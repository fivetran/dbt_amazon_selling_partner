{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.9.2", "generated_at": "2025-04-02T21:23:14.328913Z", "invocation_id": "a543f2f3-63a7-4e17-9d4a-a941ed0f2a77", "env": {}, "project_name": "amazon_selling_partner_integration_tests", "project_id": "f67cc978d1edcc78b14936e7a307bc8e", "user_id": "2bfa9082-ea6e-467b-abdc-d0514ab111d9", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"seed.amazon_selling_partner_integration_tests.orders": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "orders", "resource_type": "seed", "package_name": "amazon_selling_partner_integration_tests", "path": "orders.csv", "original_file_path": "seeds/orders.csv", "unique_id": "seed.amazon_selling_partner_integration_tests.orders", "fqn": ["amazon_selling_partner_integration_tests", "orders"], "alias": "orders", "checksum": {"name": "sha256", "checksum": "dd3ca1a00aff2874f2ef235fd1e11cbba031a257477eed6916a317a484fa4d68"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["orders"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"promise_response_due_date": "timestamp", "last_update_date": "timestamp", "purchase_date": "timestamp", "latest_delivery_date": "timestamp", "latest_ship_date": "timestamp", "earliest_delivery_date": "timestamp", "earliest_ship_date": "timestamp", "order_total_amount": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["orders"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["orders"], "column_types": {"promise_response_due_date": "timestamp", "last_update_date": "timestamp", "purchase_date": "timestamp", "latest_delivery_date": "timestamp", "latest_ship_date": "timestamp", "earliest_delivery_date": "timestamp", "earliest_ship_date": "timestamp", "order_total_amount": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}"}}, "created_at": 1743628944.993164, "relation_name": "`dbt-package-testing`.`asp_tests`.`orders`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Amazon_Selling_Partner/dbt_amazon_selling_partner/integration_tests", "depends_on": {"macros": []}}, "seed.amazon_selling_partner_integration_tests.order_item_promotion_id": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "order_item_promotion_id", "resource_type": "seed", "package_name": "amazon_selling_partner_integration_tests", "path": "order_item_promotion_id.csv", "original_file_path": "seeds/order_item_promotion_id.csv", "unique_id": "seed.amazon_selling_partner_integration_tests.order_item_promotion_id", "fqn": ["amazon_selling_partner_integration_tests", "order_item_promotion_id"], "alias": "order_item_promotion_id", "checksum": {"name": "sha256", "checksum": "85fbb5b4f25a5344ae1841e9d67a3413a632c5c3c61a4a850de569e4a750b0d0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["orders"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["orders"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["orders"]}, "created_at": 1743628944.996651, "relation_name": "`dbt-package-testing`.`asp_tests`.`order_item_promotion_id`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Amazon_Selling_Partner/dbt_amazon_selling_partner/integration_tests", "depends_on": {"macros": []}}, "seed.amazon_selling_partner_integration_tests.item_relationship": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "item_relationship", "resource_type": "seed", "package_name": "amazon_selling_partner_integration_tests", "path": "item_relationship.csv", "original_file_path": "seeds/item_relationship.csv", "unique_id": "seed.amazon_selling_partner_integration_tests.item_relationship", "fqn": ["amazon_selling_partner_integration_tests", "item_relationship"], "alias": "item_relationship", "checksum": {"name": "sha256", "checksum": "15d30930159e51c57250a8b180becb4a77edea088708e250474a7dbc284cc132"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["catalog"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["catalog"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["catalog"]}, "created_at": 1743628944.998053, "relation_name": "`dbt-package-testing`.`asp_tests`.`item_relationship`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Amazon_Selling_Partner/dbt_amazon_selling_partner/integration_tests", "depends_on": {"macros": []}}, "seed.amazon_selling_partner_integration_tests.financial_service_fee_event": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "financial_service_fee_event", "resource_type": "seed", "package_name": "amazon_selling_partner_integration_tests", "path": "financial_service_fee_event.csv", "original_file_path": "seeds/financial_service_fee_event.csv", "unique_id": "seed.amazon_selling_partner_integration_tests.financial_service_fee_event", "fqn": ["amazon_selling_partner_integration_tests", "financial_service_fee_event"], "alias": "financial_service_fee_event", "checksum": {"name": "sha256", "checksum": "d82ab605c5a84a79f36f6615ab1a78155700d63a6b12e10185df96a4ca8bbaa9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743628944.999466, "relation_name": "`dbt-package-testing`.`asp_tests`.`financial_service_fee_event`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Amazon_Selling_Partner/dbt_amazon_selling_partner/integration_tests", "depends_on": {"macros": []}}, "seed.amazon_selling_partner_integration_tests.financial_fee_component": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "financial_fee_component", "resource_type": "seed", "package_name": "amazon_selling_partner_integration_tests", "path": "financial_fee_component.csv", "original_file_path": "seeds/financial_fee_component.csv", "unique_id": "seed.amazon_selling_partner_integration_tests.financial_fee_component", "fqn": ["amazon_selling_partner_integration_tests", "financial_fee_component"], "alias": "financial_fee_component", "checksum": {"name": "sha256", "checksum": "ac33a6993217cb72b6ddc77ce2131657d6a99f1cf155c91a3106b64f57e8b477"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743628945.0007539, "relation_name": "`dbt-package-testing`.`asp_tests`.`financial_fee_component`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Amazon_Selling_Partner/dbt_amazon_selling_partner/integration_tests", "depends_on": {"macros": []}}, "seed.amazon_selling_partner_integration_tests.vendor_retail_procurement_order_item": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "vendor_retail_procurement_order_item", "resource_type": "seed", "package_name": "amazon_selling_partner_integration_tests", "path": "vendor_retail_procurement_order_item.csv", "original_file_path": "seeds/vendor_retail_procurement_order_item.csv", "unique_id": "seed.amazon_selling_partner_integration_tests.vendor_retail_procurement_order_item", "fqn": ["amazon_selling_partner_integration_tests", "vendor_retail_procurement_order_item"], "alias": "vendor_retail_procurement_order_item", "checksum": {"name": "sha256", "checksum": "884e3513d20a2d7ffeb3cfbd4516854ff0e3cfd50e5c7a8be78d5eeb07ee259a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743628945.002034, "relation_name": "`dbt-package-testing`.`asp_tests`.`vendor_retail_procurement_order_item`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Amazon_Selling_Partner/dbt_amazon_selling_partner/integration_tests", "depends_on": {"macros": []}}, "seed.amazon_selling_partner_integration_tests.item_dimension": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "item_dimension", "resource_type": "seed", "package_name": "amazon_selling_partner_integration_tests", "path": "item_dimension.csv", "original_file_path": "seeds/item_dimension.csv", "unique_id": "seed.amazon_selling_partner_integration_tests.item_dimension", "fqn": ["amazon_selling_partner_integration_tests", "item_dimension"], "alias": "item_dimension", "checksum": {"name": "sha256", "checksum": "a9ed578bd68e07ea98e717534f54ae59623fbcb28dd3f88e754340790387175d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["catalog"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["catalog"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["catalog"]}, "created_at": 1743628945.003365, "relation_name": "`dbt-package-testing`.`asp_tests`.`item_dimension`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Amazon_Selling_Partner/dbt_amazon_selling_partner/integration_tests", "depends_on": {"macros": []}}, "seed.amazon_selling_partner_integration_tests.item_classification_sales_rank": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "item_classification_sales_rank", "resource_type": "seed", "package_name": "amazon_selling_partner_integration_tests", "path": "item_classification_sales_rank.csv", "original_file_path": "seeds/item_classification_sales_rank.csv", "unique_id": "seed.amazon_selling_partner_integration_tests.item_classification_sales_rank", "fqn": ["amazon_selling_partner_integration_tests", "item_classification_sales_rank"], "alias": "item_classification_sales_rank", "checksum": {"name": "sha256", "checksum": "d8f886ac9319fda85451cd6f9bcd81888daabbcae3892aa6ec8b04dbb5f7d432"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["catalog"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["catalog"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["catalog"]}, "created_at": 1743628945.004725, "relation_name": "`dbt-package-testing`.`asp_tests`.`item_classification_sales_rank`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Amazon_Selling_Partner/dbt_amazon_selling_partner/integration_tests", "depends_on": {"macros": []}}, "seed.amazon_selling_partner_integration_tests.vendor_retail_procurement_order_item_status": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "vendor_retail_procurement_order_item_status", "resource_type": "seed", "package_name": "amazon_selling_partner_integration_tests", "path": "vendor_retail_procurement_order_item_status.csv", "original_file_path": "seeds/vendor_retail_procurement_order_item_status.csv", "unique_id": "seed.amazon_selling_partner_integration_tests.vendor_retail_procurement_order_item_status", "fqn": ["amazon_selling_partner_integration_tests", "vendor_retail_procurement_order_item_status"], "alias": "vendor_retail_procurement_order_item_status", "checksum": {"name": "sha256", "checksum": "8b7ebf4636336e8e446a10a2b77ad2ae649198de2b2ecf6b0e4200b2835eab38"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743628945.006094, "relation_name": "`dbt-package-testing`.`asp_tests`.`vendor_retail_procurement_order_item_status`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Amazon_Selling_Partner/dbt_amazon_selling_partner/integration_tests", "depends_on": {"macros": []}}, "seed.amazon_selling_partner_integration_tests.item_product_type": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "item_product_type", "resource_type": "seed", "package_name": "amazon_selling_partner_integration_tests", "path": "item_product_type.csv", "original_file_path": "seeds/item_product_type.csv", "unique_id": "seed.amazon_selling_partner_integration_tests.item_product_type", "fqn": ["amazon_selling_partner_integration_tests", "item_product_type"], "alias": "item_product_type", "checksum": {"name": "sha256", "checksum": "dfb114da1dccd594e3eebdf1354e938b596f6aa4794a29c15d8076c2f1c192cd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["catalog"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["catalog"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["catalog"]}, "created_at": 1743628945.007416, "relation_name": "`dbt-package-testing`.`asp_tests`.`item_product_type`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Amazon_Selling_Partner/dbt_amazon_selling_partner/integration_tests", "depends_on": {"macros": []}}, "seed.amazon_selling_partner_integration_tests.item_summary": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "item_summary", "resource_type": "seed", "package_name": "amazon_selling_partner_integration_tests", "path": "item_summary.csv", "original_file_path": "seeds/item_summary.csv", "unique_id": "seed.amazon_selling_partner_integration_tests.item_summary", "fqn": ["amazon_selling_partner_integration_tests", "item_summary"], "alias": "item_summary", "checksum": {"name": "sha256", "checksum": "30caa802ace0fa57ae3f9e342cede31576cb3df07caf0a99e4bb491210798c38"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["catalog"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["catalog"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["catalog"]}, "created_at": 1743628945.0087628, "relation_name": "`dbt-package-testing`.`asp_tests`.`item_summary`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Amazon_Selling_Partner/dbt_amazon_selling_partner/integration_tests", "depends_on": {"macros": []}}, "seed.amazon_selling_partner_integration_tests.payment_method_detail_item": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "payment_method_detail_item", "resource_type": "seed", "package_name": "amazon_selling_partner_integration_tests", "path": "payment_method_detail_item.csv", "original_file_path": "seeds/payment_method_detail_item.csv", "unique_id": "seed.amazon_selling_partner_integration_tests.payment_method_detail_item", "fqn": ["amazon_selling_partner_integration_tests", "payment_method_detail_item"], "alias": "payment_method_detail_item", "checksum": {"name": "sha256", "checksum": "88cc27eae85a1d64cbd12cf17f57b914df7e4dc9281a07050e86ad021a438b7f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["orders"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["orders"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["orders"]}, "created_at": 1743628945.010112, "relation_name": "`dbt-package-testing`.`asp_tests`.`payment_method_detail_item`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Amazon_Selling_Partner/dbt_amazon_selling_partner/integration_tests", "depends_on": {"macros": []}}, "seed.amazon_selling_partner_integration_tests.item_variation_theme": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "item_variation_theme", "resource_type": "seed", "package_name": "amazon_selling_partner_integration_tests", "path": "item_variation_theme.csv", "original_file_path": "seeds/item_variation_theme.csv", "unique_id": "seed.amazon_selling_partner_integration_tests.item_variation_theme", "fqn": ["amazon_selling_partner_integration_tests", "item_variation_theme"], "alias": "item_variation_theme", "checksum": {"name": "sha256", "checksum": "bbc5d202be1ee5a3f5f76674951ef4d79a2175d1e1b940ec4d4e6a9640ef9586"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743628945.011462, "relation_name": "`dbt-package-testing`.`asp_tests`.`item_variation_theme`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Amazon_Selling_Partner/dbt_amazon_selling_partner/integration_tests", "depends_on": {"macros": []}}, "seed.amazon_selling_partner_integration_tests.item_display_group_sales_rank": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "item_display_group_sales_rank", "resource_type": "seed", "package_name": "amazon_selling_partner_integration_tests", "path": "item_display_group_sales_rank.csv", "original_file_path": "seeds/item_display_group_sales_rank.csv", "unique_id": "seed.amazon_selling_partner_integration_tests.item_display_group_sales_rank", "fqn": ["amazon_selling_partner_integration_tests", "item_display_group_sales_rank"], "alias": "item_display_group_sales_rank", "checksum": {"name": "sha256", "checksum": "ec768d0cf19a5e3e6c52a9d1606d82083a76573b71a188f908b7c02a4c775c53"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["catalog"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["catalog"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["catalog"]}, "created_at": 1743628945.012772, "relation_name": "`dbt-package-testing`.`asp_tests`.`item_display_group_sales_rank`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Amazon_Selling_Partner/dbt_amazon_selling_partner/integration_tests", "depends_on": {"macros": []}}, "seed.amazon_selling_partner_integration_tests.item_identifier": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "item_identifier", "resource_type": "seed", "package_name": "amazon_selling_partner_integration_tests", "path": "item_identifier.csv", "original_file_path": "seeds/item_identifier.csv", "unique_id": "seed.amazon_selling_partner_integration_tests.item_identifier", "fqn": ["amazon_selling_partner_integration_tests", "item_identifier"], "alias": "item_identifier", "checksum": {"name": "sha256", "checksum": "e4349599ea064b275a37ccdbcf529afda8f0a00e196268c2541170d575063ffd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["catalog"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"identifier_type": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["catalog"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["catalog"], "column_types": {"identifier_type": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}"}}, "created_at": 1743628945.0141451, "relation_name": "`dbt-package-testing`.`asp_tests`.`item_identifier`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Amazon_Selling_Partner/dbt_amazon_selling_partner/integration_tests", "depends_on": {"macros": []}}, "seed.amazon_selling_partner_integration_tests.item_image": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "item_image", "resource_type": "seed", "package_name": "amazon_selling_partner_integration_tests", "path": "item_image.csv", "original_file_path": "seeds/item_image.csv", "unique_id": "seed.amazon_selling_partner_integration_tests.item_image", "fqn": ["amazon_selling_partner_integration_tests", "item_image"], "alias": "item_image", "checksum": {"name": "sha256", "checksum": "fa2e79c3af8a3e2774b04aa281a8fef316ef94e99d10cad32e097c67f415a610"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["catalog"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["catalog"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["catalog"]}, "created_at": 1743628945.015523, "relation_name": "`dbt-package-testing`.`asp_tests`.`item_image`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Amazon_Selling_Partner/dbt_amazon_selling_partner/integration_tests", "depends_on": {"macros": []}}, "seed.amazon_selling_partner_integration_tests.fba_inventory_summary": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "fba_inventory_summary", "resource_type": "seed", "package_name": "amazon_selling_partner_integration_tests", "path": "fba_inventory_summary.csv", "original_file_path": "seeds/fba_inventory_summary.csv", "unique_id": "seed.amazon_selling_partner_integration_tests.fba_inventory_summary", "fqn": ["amazon_selling_partner_integration_tests", "fba_inventory_summary"], "alias": "fba_inventory_summary", "checksum": {"name": "sha256", "checksum": "a3df209b7e8ff322181b76c75b334c62294836916872786f9f9ae9ed13ec3f5a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["fba"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["fba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["fba"]}, "created_at": 1743628945.0168772, "relation_name": "`dbt-package-testing`.`asp_tests`.`fba_inventory_summary`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Amazon_Selling_Partner/dbt_amazon_selling_partner/integration_tests", "depends_on": {"macros": []}}, "seed.amazon_selling_partner_integration_tests.catalog": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "catalog", "resource_type": "seed", "package_name": "amazon_selling_partner_integration_tests", "path": "catalog.csv", "original_file_path": "seeds/catalog.csv", "unique_id": "seed.amazon_selling_partner_integration_tests.catalog", "fqn": ["amazon_selling_partner_integration_tests", "catalog"], "alias": "catalog", "checksum": {"name": "sha256", "checksum": "653da829412c4420447eef3d85c5b18bcad5a6a2da52a809561a8bd01fe6baed"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743628945.018236, "relation_name": "`dbt-package-testing`.`asp_tests`.`catalog`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Amazon_Selling_Partner/dbt_amazon_selling_partner/integration_tests", "depends_on": {"macros": []}}, "seed.amazon_selling_partner_integration_tests.financial_charge_component": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "financial_charge_component", "resource_type": "seed", "package_name": "amazon_selling_partner_integration_tests", "path": "financial_charge_component.csv", "original_file_path": "seeds/financial_charge_component.csv", "unique_id": "seed.amazon_selling_partner_integration_tests.financial_charge_component", "fqn": ["amazon_selling_partner_integration_tests", "financial_charge_component"], "alias": "financial_charge_component", "checksum": {"name": "sha256", "checksum": "2ffc5080a2c9785fdb3b3da63a23a5ff7abca170983b12b0601fb6bb58a25540"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743628945.019511, "relation_name": "`dbt-package-testing`.`asp_tests`.`financial_charge_component`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Amazon_Selling_Partner/dbt_amazon_selling_partner/integration_tests", "depends_on": {"macros": []}}, "seed.amazon_selling_partner_integration_tests.fba_inventory_researching_quantity_entry": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "fba_inventory_researching_quantity_entry", "resource_type": "seed", "package_name": "amazon_selling_partner_integration_tests", "path": "fba_inventory_researching_quantity_entry.csv", "original_file_path": "seeds/fba_inventory_researching_quantity_entry.csv", "unique_id": "seed.amazon_selling_partner_integration_tests.fba_inventory_researching_quantity_entry", "fqn": ["amazon_selling_partner_integration_tests", "fba_inventory_researching_quantity_entry"], "alias": "fba_inventory_researching_quantity_entry", "checksum": {"name": "sha256", "checksum": "15e50c7a57456f5dfc9d5466dee34e3bac2d082278a655b49d903c8f8e6c54a4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["fba"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["fba"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["fba"]}, "created_at": 1743628945.020917, "relation_name": "`dbt-package-testing`.`asp_tests`.`fba_inventory_researching_quantity_entry`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Amazon_Selling_Partner/dbt_amazon_selling_partner/integration_tests", "depends_on": {"macros": []}}, "seed.amazon_selling_partner_integration_tests.vendor_retail_procurement_order_status": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "vendor_retail_procurement_order_status", "resource_type": "seed", "package_name": "amazon_selling_partner_integration_tests", "path": "vendor_retail_procurement_order_status.csv", "original_file_path": "seeds/vendor_retail_procurement_order_status.csv", "unique_id": "seed.amazon_selling_partner_integration_tests.vendor_retail_procurement_order_status", "fqn": ["amazon_selling_partner_integration_tests", "vendor_retail_procurement_order_status"], "alias": "vendor_retail_procurement_order_status", "checksum": {"name": "sha256", "checksum": "040d57c6063e2ebac7424411f8205df81c72a08d4a28a026eb4c6d824ec95031"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743628945.0222359, "relation_name": "`dbt-package-testing`.`asp_tests`.`vendor_retail_procurement_order_status`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Amazon_Selling_Partner/dbt_amazon_selling_partner/integration_tests", "depends_on": {"macros": []}}, "seed.amazon_selling_partner_integration_tests.order_item": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "order_item", "resource_type": "seed", "package_name": "amazon_selling_partner_integration_tests", "path": "order_item.csv", "original_file_path": "seeds/order_item.csv", "unique_id": "seed.amazon_selling_partner_integration_tests.order_item", "fqn": ["amazon_selling_partner_integration_tests", "order_item"], "alias": "order_item", "checksum": {"name": "sha256", "checksum": "0e6802432c3131ee53513f3167976ef86c2cd315eac796f84ea3558ef3c363c5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["orders"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"item_price_amount": "string", "item_tax_amount": "string", "shipping_discount_amount": "string", "shipping_discount_tax_amount": "string", "shipping_price_amount": "string", "shipping_tax_amount": "string", "promotion_discount_amount": "string", "promotion_discount_tax_amount": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": ["orders"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["orders"], "column_types": {"item_price_amount": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "item_tax_amount": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "shipping_discount_amount": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "shipping_discount_tax_amount": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "shipping_price_amount": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "shipping_tax_amount": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "promotion_discount_amount": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "promotion_discount_tax_amount": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}"}}, "created_at": 1743628945.023614, "relation_name": "`dbt-package-testing`.`asp_tests`.`order_item`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Amazon_Selling_Partner/dbt_amazon_selling_partner/integration_tests", "depends_on": {"macros": []}}, "seed.amazon_selling_partner_integration_tests.vendor_retail_procurement_order": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "vendor_retail_procurement_order", "resource_type": "seed", "package_name": "amazon_selling_partner_integration_tests", "path": "vendor_retail_procurement_order.csv", "original_file_path": "seeds/vendor_retail_procurement_order.csv", "unique_id": "seed.amazon_selling_partner_integration_tests.vendor_retail_procurement_order", "fqn": ["amazon_selling_partner_integration_tests", "vendor_retail_procurement_order"], "alias": "vendor_retail_procurement_order", "checksum": {"name": "sha256", "checksum": "cfced1a08c0deaf007e0b07558ac5a63e9034c5f8a7a67b948381619c5b76fc2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743628945.0250082, "relation_name": "`dbt-package-testing`.`asp_tests`.`vendor_retail_procurement_order`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Amazon_Selling_Partner/dbt_amazon_selling_partner/integration_tests", "depends_on": {"macros": []}}, "model.amazon_selling_partner.amazon_selling_partner__order_items": {"database": "dbt-package-testing", "schema": "asp_tests_amazon_selling_partner_dev", "name": "amazon_selling_partner__order_items", "resource_type": "model", "package_name": "amazon_selling_partner", "path": "amazon_selling_partner__order_items.sql", "original_file_path": "models/amazon_selling_partner__order_items.sql", "unique_id": "model.amazon_selling_partner.amazon_selling_partner__order_items", "fqn": ["amazon_selling_partner", "amazon_selling_partner__order_items"], "alias": "amazon_selling_partner__order_items", "checksum": {"name": "sha256", "checksum": "1accff2ce3f01bdba04110986cb33d817ed85ab237558bdca83e727e2876b9ca"}, "config": {"enabled": true, "alias": null, "schema": "amazon_selling_partner_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Table of single line items of Amazon orders, enhanced with order and catalog item information.", "columns": {"source_relation": {"name": "source_relation", "description": "The `<database>`.`<schema>` this record came from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_item_id": {"name": "order_item_id", "description": "An Amazon-defined item identifier for the associated item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "amazon_order_id": {"name": "amazon_order_id", "description": "An Amazon-defined order identifier, in 3-7-7 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_gift": {"name": "is_gift", "description": "Boolean that tndicates whether the item is a gift.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_transparency": {"name": "is_transparency", "description": "When true, the ASIN is enrolled in Transparency. The Transparency serial number that you must submit is determined by:\n\n- 1D or 2D Barcode: This has a T logo. Submit either the 29-character alpha-numeric identifier beginning with AZ or ZA, or the 38-character Serialized Global Trade Item Number (SGTIN).\n- 2D Barcode SN: Submit the 7- to 20-character serial number barcode, which likely has the prefix SN. The serial number is applied to the same side of the packaging as the GTIN (UPC/EAN/ISBN) barcode.\n- QR code SN: Submit the URL that the QR code generates.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "asin": {"name": "asin", "description": "The item's Amazon Standard Identification Number (ASIN).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_buyer_requested_cancel": {"name": "is_buyer_requested_cancel", "description": "Boolean indicating whether the buyer has requested cancellation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "buyer_requested_cancel_reason": {"name": "buyer_requested_cancel_reason", "description": "The reason that the buyer requested cancellation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "condition_id": {"name": "condition_id", "description": "The condition of the item. Possible values: New, Used, Collectible, Refurbished, Preorder, and Club.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "condition_note": {"name": "condition_note", "description": "The condition of the item, as described by the seller.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "condition_subtype_id": {"name": "condition_subtype_id", "description": "The subcondition of the item.\n\nPossible values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, Any, and Other.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "deemed_reseller_category": {"name": "deemed_reseller_category", "description": "The category of deemed reseller. This applies to selling partners that are not based in the EU and is used to help them meet the VAT Deemed Reseller tax laws in the EU and UK. \nEither `IOSS` (Import one stop shop. The item being purchased is not held in the EU for shipment) or `UOSS` (Union one stop shop. The item being purchased is held in the EU for shipment).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ioss_number": {"name": "ioss_number", "description": "The IOSS number of the marketplace. Sellers shipping to the EU from outside the EU must provide this IOSS number to their carrier when Amazon has collected the VAT on the sale.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_price_amount": {"name": "item_price_amount", "description": "The selling price of the order item. Note that an order item is an item and a quantity. This means that the value of ItemPrice is equal to the selling price of the item multiplied by the quantity ordered. ItemPrice excludes ShippingPrice and GiftWrapPrice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_price_currency_code": {"name": "item_price_currency_code", "description": "The three-digit currency code that the `item_price_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_tax_amount": {"name": "item_tax_amount", "description": "The tax on the item price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_tax_currency_code": {"name": "item_tax_currency_code", "description": "The three-digit currency code that the `item_tax_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_info_detail_number_of_items": {"name": "product_info_detail_number_of_items", "description": "The total number of items that are included in the ASIN.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "promotion_discount_amount": {"name": "promotion_discount_amount", "description": "The total of all promotional discounts in the offer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "promotion_discount_currency_code": {"name": "promotion_discount_currency_code", "description": "The three-digit currency code that the `promotion_discount_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "promotion_discount_tax_currency_code": {"name": "promotion_discount_tax_currency_code", "description": "The three-digit currency code that the `promotion_discount_tax_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "promotion_discount_tax_amount": {"name": "promotion_discount_tax_amount", "description": "The tax on the total of all promotional discounts in the offer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "quantity_ordered": {"name": "quantity_ordered", "description": "The number of items in the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "quantity_shipped": {"name": "quantity_shipped", "description": "The number of items shipped.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "scheduled_delivery_end_date": {"name": "scheduled_delivery_end_date", "description": "The end date of the scheduled delivery window in the time zone for the order destination. In ISO 8601 date time format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "scheduled_delivery_start_date": {"name": "scheduled_delivery_start_date", "description": "The start date of the scheduled delivery window in the time zone for the order destination. In ISO 8601 date time format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "seller_sku": {"name": "seller_sku", "description": "The item's seller stock keeping unit (SKU).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_discount_amount": {"name": "shipping_discount_amount", "description": "The discount on the shipping price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_discount_currency_code": {"name": "shipping_discount_currency_code", "description": "The three-digit currency code that the `shipping_discount_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_discount_tax_amount": {"name": "shipping_discount_tax_amount", "description": "The tax on the discount on the shipping price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_discount_tax_currency_code": {"name": "shipping_discount_tax_currency_code", "description": "The three-digit currency code that the `shipping_discount_tax_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_price_amount": {"name": "shipping_price_amount", "description": "The item's shipping price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_price_currency_code": {"name": "shipping_price_currency_code", "description": "The three-digit currency code that the `shipping_price_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_tax_amount": {"name": "shipping_tax_amount", "description": "The tax on the shipping price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_tax_currency_code": {"name": "shipping_tax_currency_code", "description": "The three-digit currency code that the `shipping_tax_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "store_chain_store_id": {"name": "store_chain_store_id", "description": "The store chain store identifier. Linked to a specific store in a store chain.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tax_collection_model": {"name": "tax_collection_model", "description": "The tax collection model applied to the item. Possible value(s) can be found [here](https://developer-docs.amazon.com/sp-api/docs/orders-api-v0-reference#model).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tax_collection_responsible_party": {"name": "tax_collection_responsible_party", "description": "The party responsible for withholding the taxes and remitting them to the taxing authority. Possible value(s) can be found [here](https://developer-docs.amazon.com/sp-api/docs/orders-api-v0-reference#responsibleparty).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "The item's title.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_purchase_date": {"name": "order_purchase_date", "description": "The date when the order was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_total_amount": {"name": "order_total_amount", "description": "The total charge for this order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_status": {"name": "order_status", "description": "The current order status. Possible values can be found [here](https://developer-docs.amazon.com/sp-api/docs/orders-api-v0-reference#orderstatus).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_total_currency_code": {"name": "order_total_currency_code", "description": "The three-digit currency code in which the order total is measured. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketplace_id": {"name": "marketplace_id", "description": "The unobfuscated marketplace identifier. Different marketplace values can be found [here](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_promotions_used": {"name": "count_promotions_used", "description": "The count of distinct promotions used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_name": {"name": "item_name", "description": "Name, or title, associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "display_name": {"name": "display_name", "description": "Display name for the classification.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "brand": {"name": "brand", "description": "Name of the brand associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "color": {"name": "color", "description": "Name of the color associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "size": {"name": "size", "description": "Name of the size associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "style": {"name": "style", "description": "Name of the style associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_type": {"name": "product_type", "description": "Name of the product type associated with the Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "package_quantity": {"name": "package_quantity", "description": "Quantity of an Amazon catalog item in one package.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_classification": {"name": "item_classification", "description": "Classification type associated with the Amazon catalog item. Possible values can be found [here](https://developer-docs.amazon.com/sp-api/docs/catalog-items-api-v2022-04-01-reference#itemclassification).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_serial_number_required": {"name": "is_serial_number_required", "description": "When true, the product type for this item has a serial number. Only returned for Amazon Easy Ship orders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_total_number_of_items_shipped": {"name": "order_total_number_of_items_shipped", "description": "The number of items shipped for the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_total_number_of_items_unshipped": {"name": "order_total_number_of_items_unshipped", "description": "The number of items unshipped for the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "amazon_selling_partner://models/amazon_selling_partner.yml", "build_path": null, "unrendered_config": {"schema": "amazon_selling_partner_{{ var('directed_schema','dev') }}", "materialized": "table", "enabled": true}, "created_at": 1743628945.499775, "relation_name": "`dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`amazon_selling_partner__order_items`", "raw_code": "{{ config(enabled=var('amazon_selling_partner__using_orders_module', true)) }}\n\nwith orders as (\n\n    select *\n    from {{ ref('stg_amazon_selling_partner__orders') }}\n),\n\norder_item as (\n\n    select *\n    from {{ ref('stg_amazon_selling_partner__order_item') }}\n),\n\n{% if var('amazon_selling_partner__using_catalog_module', true) %}\nitem as (\n\n    select *\n    from {{ ref('int_amazon_selling_partner__item') }}\n),\n{% endif %}\n\norder_item_promotion_id as (\n    \n    select *\n    from {{ ref('stg_amazon_selling_partner__order_item_promotion_id') }}\n),\n\naggregate_promotions as (\n\n    select \n        source_relation,\n        amazon_order_id,\n        order_item_id,\n        count(distinct promotion_id) as count_promotions_used\n\n    from order_item_promotion_id \n    group by 1,2,3\n),\n\njoined as (\n\n    select \n        order_item.*,\n        orders.purchase_date as order_purchase_date,\n        orders.order_total_amount, \n        orders.order_total_currency_code,\n        orders.order_status,\n        orders.marketplace_id,\n        orders.number_of_items_shipped as order_total_number_of_items_shipped,\n        orders.number_of_items_unshipped as order_total_number_of_items_unshipped,\n        aggregate_promotions.count_promotions_used\n\n        {% if var('amazon_selling_partner__using_catalog_module', true) %}\n        , item.item_name,\n        item.display_name,\n        item.brand,\n        item.color,\n        item.size,\n        item.style,\n        item.product_type,\n        item.package_quantity,\n        item.item_classification\n        {% endif %}\n\n    from order_item \n    {% if var('amazon_selling_partner__using_catalog_module', true) %}\n    left join item \n        on order_item.asin = item.asin \n        and order_item.source_relation = item.source_relation\n    {% endif %}\n    left join orders \n        on order_item.amazon_order_id = orders.amazon_order_id\n        and order_item.source_relation = orders.source_relation\n    left join aggregate_promotions\n        on order_item.amazon_order_id = aggregate_promotions.amazon_order_id\n        and order_item.order_item_id = aggregate_promotions.order_item_id\n        and order_item.source_relation = aggregate_promotions.source_relation\n)\n\nselect *\nfrom joined", "language": "sql", "refs": [{"name": "stg_amazon_selling_partner__orders", "package": null, "version": null}, {"name": "stg_amazon_selling_partner__order_item", "package": null, "version": null}, {"name": "int_amazon_selling_partner__item", "package": null, "version": null}, {"name": "stg_amazon_selling_partner__order_item_promotion_id", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.amazon_selling_partner.stg_amazon_selling_partner__orders", "model.amazon_selling_partner.stg_amazon_selling_partner__order_item", "model.amazon_selling_partner.int_amazon_selling_partner__item", "model.amazon_selling_partner.stg_amazon_selling_partner__order_item_promotion_id"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/amazon_selling_partner__order_items.sql", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_amazon_selling_partner__item as (\n\n\nwith item_summary as (\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_summary`\n),\n\nitem_product_type as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_product_type` \n),\n\nitem_image as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_image`\n),\n\nitem_images as (\n\n    select \n        source_relation,\n        asin,\n        marketplace_id,\n        count(*) as count_images,\n        sum(case when variant = 'SWATCH' then 1 else 0 end) as count_swatch_images\n\n    from item_image \n    group by 1,2,3\n),\n\nitem_display_group_sales_rank as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_display_group_sales_rank` \n),\n\nitem_classification_sales_rank as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_classification_sales_rank` \n),\n\nitem_relationship as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_relationship` \n),\n\nparent_variation_relationship as (\n\n    select *\n    from item_relationship\n    where type = 'VARIATION'\n),\n\npackage_hierarchy_relationship as (\n\n    select *\n    from item_relationship\n    where type = 'PACKAGE_HIERARCHY'\n),\n\nitem_dimension as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_dimension` \n),\n\nitem_identifier as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_identifier` \n),\n\nitem_identifiers as (\n\n    select \n        asin,\n        source_relation,\n        marketplace_id\n        \n        \n            , cast(max(case when identifier_type = 'SKU' then identifier end) as string) as sku\n        \n            , cast(max(case when identifier_type = 'EAN' then identifier end) as string) as ean\n        \n            , cast(max(case when identifier_type = 'GTIN' then identifier end) as string) as gtin\n        \n            , cast(max(case when identifier_type = 'ISBN' then identifier end) as string) as isbn\n        \n            , cast(max(case when identifier_type = 'JAN' then identifier end) as string) as jan\n        \n            , cast(max(case when identifier_type = 'MINSAN' then identifier end) as string) as minsan\n        \n            , cast(max(case when identifier_type = 'UPC' then identifier end) as string) as upc\n        \n    from item_identifier\n    group by 1,2,3\n),\n\njoined as (\n\n    select \n        item_summary.source_relation,\n        item_summary.marketplace_id,\n        item_summary.asin,\n        item_summary.item_name,\n        item_summary.display_name,\n        item_summary.brand,\n        item_summary.color,\n        item_summary.size,\n        item_summary.style,\n        item_summary.package_quantity,\n        item_summary.manufacturer,\n        item_summary.contributors,\n        item_product_type.product_type,\n        item_summary.item_classification,\n        item_summary.classification_id,\n        item_classification_sales_rank.link as classification_sales_rank_link,\n        item_classification_sales_rank.rank as classification_sales_rank,\n        item_summary.website_display_group,\n        item_summary.website_display_group_name,\n        item_display_group_sales_rank.link as website_display_group_sales_rank_link,\n        item_display_group_sales_rank.rank as website_display_group_sales_rank,\n        item_summary.release_date,\n        item_summary.is_memorabilia,\n        item_summary.is_adult_product,\n        item_summary.is_autographed,\n        item_summary.is_trade_in_eligible,\n\n        item_summary.model_number,\n        item_summary.part_number,\n        parent_variation_relationship.parent_asin as parent_variation_asin,\n        package_hierarchy_relationship.parent_asin as parent_package_container_asin,\n        item_identifiers.sku,\n        item_identifiers.ean,\n        item_identifiers.gtin, \n        item_identifiers.isbn, \n        item_identifiers.jan,\n        item_identifiers.minsan, \n        item_identifiers.upc,\n        \n        item_images.count_images,\n        item_images.count_swatch_images,\n        item_dimension.item_height_unit,\n        item_dimension.item_height_value,\n        item_dimension.item_length_unit,\n        item_dimension.item_length_value,\n        item_dimension.item_weight_unit,\n        item_dimension.item_weight_value,\n        item_dimension.item_width_unit,\n        item_dimension.item_width_value,\n        item_dimension.package_height_unit,\n        item_dimension.package_height_value,\n        item_dimension.package_length_unit,\n        item_dimension.package_length_value,\n        item_dimension.package_weight_unit,\n        item_dimension.package_weight_value,\n        item_dimension.package_width_unit,\n        item_dimension.package_width_value\n\n    from item_summary\n    left join item_product_type\n        on item_summary.asin = item_product_type.asin \n        and item_summary.marketplace_id = item_product_type.marketplace_id\n        and item_summary.source_relation = item_product_type.source_relation\n    left join item_images\n        on item_summary.asin = item_images.asin \n        and item_summary.marketplace_id = item_images.marketplace_id\n        and item_summary.source_relation = item_images.source_relation\n    left join item_display_group_sales_rank\n        on item_summary.asin = item_display_group_sales_rank.asin \n        and item_summary.website_display_group = item_display_group_sales_rank.website_display_group\n        and item_summary.source_relation = item_display_group_sales_rank.source_relation\n    left join item_classification_sales_rank\n        on item_summary.asin = item_classification_sales_rank.asin \n        and item_summary.classification_id = item_classification_sales_rank.classification_id\n        and item_summary.source_relation = item_classification_sales_rank.source_relation\n    left join parent_variation_relationship\n        on item_summary.asin = parent_variation_relationship.child_asin\n        and item_summary.source_relation = parent_variation_relationship.source_relation\n    left join package_hierarchy_relationship\n        on item_summary.asin = package_hierarchy_relationship.child_asin\n        and item_summary.source_relation = package_hierarchy_relationship.source_relation\n    left join item_identifiers\n        on item_summary.asin = item_identifiers.asin \n        and item_summary.marketplace_id = item_identifiers.marketplace_id\n        and item_summary.source_relation = item_identifiers.source_relation\n    left join item_dimension \n        on item_summary.asin = item_dimension.asin \n        and item_summary.marketplace_id = item_dimension.marketplace_id\n        and item_summary.source_relation = item_dimension.source_relation\n)\n\nselect *\nfrom joined\n), orders as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__orders`\n),\n\norder_item as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__order_item`\n),\n\n\nitem as (\n\n    select *\n    from __dbt__cte__int_amazon_selling_partner__item\n),\n\n\norder_item_promotion_id as (\n    \n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__order_item_promotion_id`\n),\n\naggregate_promotions as (\n\n    select \n        source_relation,\n        amazon_order_id,\n        order_item_id,\n        count(distinct promotion_id) as count_promotions_used\n\n    from order_item_promotion_id \n    group by 1,2,3\n),\n\njoined as (\n\n    select \n        order_item.*,\n        orders.purchase_date as order_purchase_date,\n        orders.order_total_amount, \n        orders.order_total_currency_code,\n        orders.order_status,\n        orders.marketplace_id,\n        orders.number_of_items_shipped as order_total_number_of_items_shipped,\n        orders.number_of_items_unshipped as order_total_number_of_items_unshipped,\n        aggregate_promotions.count_promotions_used\n\n        \n        , item.item_name,\n        item.display_name,\n        item.brand,\n        item.color,\n        item.size,\n        item.style,\n        item.product_type,\n        item.package_quantity,\n        item.item_classification\n        \n\n    from order_item \n    \n    left join item \n        on order_item.asin = item.asin \n        and order_item.source_relation = item.source_relation\n    \n    left join orders \n        on order_item.amazon_order_id = orders.amazon_order_id\n        and order_item.source_relation = orders.source_relation\n    left join aggregate_promotions\n        on order_item.amazon_order_id = aggregate_promotions.amazon_order_id\n        and order_item.order_item_id = aggregate_promotions.order_item_id\n        and order_item.source_relation = aggregate_promotions.source_relation\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.amazon_selling_partner.int_amazon_selling_partner__item", "sql": " __dbt__cte__int_amazon_selling_partner__item as (\n\n\nwith item_summary as (\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_summary`\n),\n\nitem_product_type as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_product_type` \n),\n\nitem_image as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_image`\n),\n\nitem_images as (\n\n    select \n        source_relation,\n        asin,\n        marketplace_id,\n        count(*) as count_images,\n        sum(case when variant = 'SWATCH' then 1 else 0 end) as count_swatch_images\n\n    from item_image \n    group by 1,2,3\n),\n\nitem_display_group_sales_rank as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_display_group_sales_rank` \n),\n\nitem_classification_sales_rank as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_classification_sales_rank` \n),\n\nitem_relationship as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_relationship` \n),\n\nparent_variation_relationship as (\n\n    select *\n    from item_relationship\n    where type = 'VARIATION'\n),\n\npackage_hierarchy_relationship as (\n\n    select *\n    from item_relationship\n    where type = 'PACKAGE_HIERARCHY'\n),\n\nitem_dimension as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_dimension` \n),\n\nitem_identifier as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_identifier` \n),\n\nitem_identifiers as (\n\n    select \n        asin,\n        source_relation,\n        marketplace_id\n        \n        \n            , cast(max(case when identifier_type = 'SKU' then identifier end) as string) as sku\n        \n            , cast(max(case when identifier_type = 'EAN' then identifier end) as string) as ean\n        \n            , cast(max(case when identifier_type = 'GTIN' then identifier end) as string) as gtin\n        \n            , cast(max(case when identifier_type = 'ISBN' then identifier end) as string) as isbn\n        \n            , cast(max(case when identifier_type = 'JAN' then identifier end) as string) as jan\n        \n            , cast(max(case when identifier_type = 'MINSAN' then identifier end) as string) as minsan\n        \n            , cast(max(case when identifier_type = 'UPC' then identifier end) as string) as upc\n        \n    from item_identifier\n    group by 1,2,3\n),\n\njoined as (\n\n    select \n        item_summary.source_relation,\n        item_summary.marketplace_id,\n        item_summary.asin,\n        item_summary.item_name,\n        item_summary.display_name,\n        item_summary.brand,\n        item_summary.color,\n        item_summary.size,\n        item_summary.style,\n        item_summary.package_quantity,\n        item_summary.manufacturer,\n        item_summary.contributors,\n        item_product_type.product_type,\n        item_summary.item_classification,\n        item_summary.classification_id,\n        item_classification_sales_rank.link as classification_sales_rank_link,\n        item_classification_sales_rank.rank as classification_sales_rank,\n        item_summary.website_display_group,\n        item_summary.website_display_group_name,\n        item_display_group_sales_rank.link as website_display_group_sales_rank_link,\n        item_display_group_sales_rank.rank as website_display_group_sales_rank,\n        item_summary.release_date,\n        item_summary.is_memorabilia,\n        item_summary.is_adult_product,\n        item_summary.is_autographed,\n        item_summary.is_trade_in_eligible,\n\n        item_summary.model_number,\n        item_summary.part_number,\n        parent_variation_relationship.parent_asin as parent_variation_asin,\n        package_hierarchy_relationship.parent_asin as parent_package_container_asin,\n        item_identifiers.sku,\n        item_identifiers.ean,\n        item_identifiers.gtin, \n        item_identifiers.isbn, \n        item_identifiers.jan,\n        item_identifiers.minsan, \n        item_identifiers.upc,\n        \n        item_images.count_images,\n        item_images.count_swatch_images,\n        item_dimension.item_height_unit,\n        item_dimension.item_height_value,\n        item_dimension.item_length_unit,\n        item_dimension.item_length_value,\n        item_dimension.item_weight_unit,\n        item_dimension.item_weight_value,\n        item_dimension.item_width_unit,\n        item_dimension.item_width_value,\n        item_dimension.package_height_unit,\n        item_dimension.package_height_value,\n        item_dimension.package_length_unit,\n        item_dimension.package_length_value,\n        item_dimension.package_weight_unit,\n        item_dimension.package_weight_value,\n        item_dimension.package_width_unit,\n        item_dimension.package_width_value\n\n    from item_summary\n    left join item_product_type\n        on item_summary.asin = item_product_type.asin \n        and item_summary.marketplace_id = item_product_type.marketplace_id\n        and item_summary.source_relation = item_product_type.source_relation\n    left join item_images\n        on item_summary.asin = item_images.asin \n        and item_summary.marketplace_id = item_images.marketplace_id\n        and item_summary.source_relation = item_images.source_relation\n    left join item_display_group_sales_rank\n        on item_summary.asin = item_display_group_sales_rank.asin \n        and item_summary.website_display_group = item_display_group_sales_rank.website_display_group\n        and item_summary.source_relation = item_display_group_sales_rank.source_relation\n    left join item_classification_sales_rank\n        on item_summary.asin = item_classification_sales_rank.asin \n        and item_summary.classification_id = item_classification_sales_rank.classification_id\n        and item_summary.source_relation = item_classification_sales_rank.source_relation\n    left join parent_variation_relationship\n        on item_summary.asin = parent_variation_relationship.child_asin\n        and item_summary.source_relation = parent_variation_relationship.source_relation\n    left join package_hierarchy_relationship\n        on item_summary.asin = package_hierarchy_relationship.child_asin\n        and item_summary.source_relation = package_hierarchy_relationship.source_relation\n    left join item_identifiers\n        on item_summary.asin = item_identifiers.asin \n        and item_summary.marketplace_id = item_identifiers.marketplace_id\n        and item_summary.source_relation = item_identifiers.source_relation\n    left join item_dimension \n        on item_summary.asin = item_dimension.asin \n        and item_summary.marketplace_id = item_dimension.marketplace_id\n        and item_summary.source_relation = item_dimension.source_relation\n)\n\nselect *\nfrom joined\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["amazon_order_id", "order_item_id", "source_relation"], "time_spine": null}, "model.amazon_selling_partner.amazon_selling_partner__item_inventory": {"database": "dbt-package-testing", "schema": "asp_tests_amazon_selling_partner_dev", "name": "amazon_selling_partner__item_inventory", "resource_type": "model", "package_name": "amazon_selling_partner", "path": "amazon_selling_partner__item_inventory.sql", "original_file_path": "models/amazon_selling_partner__item_inventory.sql", "unique_id": "model.amazon_selling_partner.amazon_selling_partner__item_inventory", "fqn": ["amazon_selling_partner", "amazon_selling_partner__item_inventory"], "alias": "amazon_selling_partner__item_inventory", "checksum": {"name": "sha256", "checksum": "a9ca99414168c08d407d41f1f5574036bcdc3955f7c6ef2a4e48a42a8a771c39"}, "config": {"enabled": true, "alias": null, "schema": "amazon_selling_partner_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Table containing current inventory levels pertaining to individual Amazon catalog items, enhanced with all product descriptors and identifiers, listing metadata, item dimensions, and sales ranks.", "columns": {"source_relation": {"name": "source_relation", "description": "The `<database>`.`<schema>` this record came from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketplace_id": {"name": "marketplace_id", "description": "The unobfuscated marketplace identifier. Different marketplace values can be found [here](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "asin": {"name": "asin", "description": "The item's Amazon Standard Identification Number (ASIN).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_name": {"name": "item_name", "description": "Name, or title, associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "display_name": {"name": "display_name", "description": "Display name for the classification.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_name": {"name": "product_name", "description": "The localized language product title of the item within the specific marketplace.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "brand": {"name": "brand", "description": "Name of the brand associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "color": {"name": "color", "description": "Name of the color associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "size": {"name": "size", "description": "Name of the size associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "style": {"name": "style", "description": "Name of the style associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "package_quantity": {"name": "package_quantity", "description": "Quantity of an Amazon catalog item in one package.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "manufacturer": {"name": "manufacturer", "description": "Name of the manufacturer associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "contributors": {"name": "contributors", "description": "Individual contributors to the creation of an item, such as the authors or actors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_type": {"name": "product_type", "description": "Name of the product type associated with the Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "condition": {"name": "condition", "description": "The condition of the item as described by the seller (for example, New Item).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "release_date": {"name": "release_date", "description": "First date on which an Amazon catalog item is shippable to customers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_classification": {"name": "item_classification", "description": "Classification type associated with the Amazon catalog item. Possible values can be found [here](https://developer-docs.amazon.com/sp-api/docs/catalog-items-api-v2022-04-01-reference#itemclassification).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "classification_id": {"name": "classification_id", "description": "Identifier of the classification associated with the sales rank.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "classification_sales_rank_link": {"name": "classification_sales_rank_link", "description": "Corresponding Amazon retail website link, or URL, for the sales rank.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "classification_sales_rank": {"name": "classification_sales_rank", "description": "Sales rank value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "website_display_group": {"name": "website_display_group", "description": "Identifier of the website display group associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "website_display_group_name": {"name": "website_display_group_name", "description": "Display name of the website display group associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "website_display_group_sales_rank_link": {"name": "website_display_group_sales_rank_link", "description": "Corresponding Amazon retail website link, or URL, for the sales rank.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "website_display_group_sales_rank": {"name": "website_display_group_sales_rank", "description": "Sales rank value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_memorabilia": {"name": "is_memorabilia", "description": "Identifies an Amazon catalog item is memorabilia valued for its connection with historical events, culture, or entertainment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_adult_product": {"name": "is_adult_product", "description": "Identifies an Amazon catalog item is intended for an adult audience or is sexual in nature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_autographed": {"name": "is_autographed", "description": "Identifies an Amazon catalog item is autographed by a player or celebrity.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_trade_in_eligible": {"name": "is_trade_in_eligible", "description": "Identifies an Amazon catalog item is eligible for trade-in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "model_number": {"name": "model_number", "description": "Model number associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "part_number": {"name": "part_number", "description": "Part number associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "parent_variation_asin": {"name": "parent_variation_asin", "description": "Identifier (ASIN) of the item's variation parent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "parent_package_container_asin": {"name": "parent_package_container_asin", "description": "Identifier (ASIN) of the item's package container parent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sku": {"name": "sku", "description": "Stock Keeping Unit, a seller-specified identifier for an Amazon listed item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fn_sku": {"name": "fn_sku", "description": "Amazon's fulfillment network SKU identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ean": {"name": "ean", "description": "European Article Number of the catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "gtin": {"name": "gtin", "description": "Global Trade Item Number of the catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "isbn": {"name": "isbn", "description": "International Standard Book Number of the catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "jan": {"name": "jan", "description": "Japanese Article Number of the catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "minsan": {"name": "minsan", "description": "Minsan Code of the catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "upc": {"name": "upc", "description": "Universal Product Code of the catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_images": {"name": "count_images", "description": "Count of images for an item in the Amazon catalog for the indicated Amazon marketplace.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_swatch_images": {"name": "count_swatch_images", "description": "Count of Swatch images for this item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_height_unit": {"name": "item_height_unit", "description": "Measurement unit of the dimension value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_height_value": {"name": "item_height_value", "description": "Height of an item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_length_unit": {"name": "item_length_unit", "description": "Measurement unit of the dimension value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_length_value": {"name": "item_length_value", "description": "Length of an item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_weight_unit": {"name": "item_weight_unit", "description": "Measurement unit of the dimension value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_weight_value": {"name": "item_weight_value", "description": "Weight of an item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_width_unit": {"name": "item_width_unit", "description": "Measurement unit of the dimension value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_width_value": {"name": "item_width_value", "description": "Width of an item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "package_height_unit": {"name": "package_height_unit", "description": "Measurement unit of the dimension value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "package_height_value": {"name": "package_height_value", "description": "Height of an item package.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "package_length_unit": {"name": "package_length_unit", "description": "Measurement unit of the dimension value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "package_length_value": {"name": "package_length_value", "description": "Length of an item package.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "package_weight_unit": {"name": "package_weight_unit", "description": "Measurement unit of the dimension value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "package_weight_value": {"name": "package_weight_value", "description": "Weight of an item package.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "package_width_unit": {"name": "package_width_unit", "description": "Measurement unit of the dimension value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "package_width_value": {"name": "package_width_value", "description": "Width of an item package.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inventory_summary_id": {"name": "inventory_summary_id", "description": "Fivetran-generated Primary Key for inventory summaries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inventory_last_updated_at": {"name": "inventory_last_updated_at", "description": "The date and time that any quantity was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_quantity": {"name": "total_quantity", "description": "The total number of units in an inbound shipment or in Amazon fulfillment centers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_researching_quantity": {"name": "total_researching_quantity", "description": "The total number of units in Amazon's fulfillment network that are currently being picked, packed, and shipped; or are sidelined for measurement, sampling, or other internal processes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_reserved_quantity": {"name": "total_reserved_quantity", "description": "The total number of units in Amazon's fulfillment network that are currently being picked, packed, and shipped; or are sidelined for measurement, sampling, or other internal processes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fullfillable_quantity": {"name": "fullfillable_quantity", "description": "The item quantity that can be picked, packed, and shipped.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_unfulfillable_quantity": {"name": "total_unfulfillable_quantity", "description": "The total number of units in Amazon's fulfillment network in unsellable condition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pending_customer_order_quantity": {"name": "pending_customer_order_quantity", "description": "The number of units reserved for customer orders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pending_transshipment_quantity": {"name": "pending_transshipment_quantity", "description": "The number of units being transferred from one fulfillment center to another.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fc_processing_quantity": {"name": "fc_processing_quantity", "description": "The number of units that have been sidelined at the fulfillment center for additional processing.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inblound_shipped_quantity": {"name": "inblound_shipped_quantity", "description": "The number of units in an inbound shipment that you have notified Amazon about and have provided a tracking number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inbound_receiving_quantity": {"name": "inbound_receiving_quantity", "description": "The number of units that have not yet been received at an Amazon fulfillment center for processing, but are part of an inbound shipment with some units that have already been received and processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inbound_working_quantity": {"name": "inbound_working_quantity", "description": "The number of units in an inbound shipment for which you have notified Amazon.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "warehouse_damaged_quantity": {"name": "warehouse_damaged_quantity", "description": "The number of units in warehouse damaged disposition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "carrier_damaged_quantity": {"name": "carrier_damaged_quantity", "description": "The number of units in carrier damaged disposition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_damaged_quantity": {"name": "customer_damaged_quantity", "description": "The number of units in customer damaged disposition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "defective_quantity": {"name": "defective_quantity", "description": "The number of units in defective disposition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "distributor_damaged_quantity": {"name": "distributor_damaged_quantity", "description": "The number of units in distributor damaged disposition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "expired_quantity": {"name": "expired_quantity", "description": "The number of units in expired disposition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "short_term_research_quantity": {"name": "short_term_research_quantity", "description": "The quantity of misplaced or warehouse damaged inventory that is actively being confirmed at Amazon fulfillment center and researched for a duration of 1-10 days.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "mid_term_research_quantity": {"name": "mid_term_research_quantity", "description": "The quantity of misplaced or warehouse damaged inventory that is actively being confirmed at Amazon fulfillment center and researched for a duration of 11-20 days.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "long_term_research_quantity": {"name": "long_term_research_quantity", "description": "The quantity of misplaced or warehouse damaged inventory that is actively being confirmed at Amazon fulfillment center and researched for a duration of 21 days or longer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "amazon_selling_partner://models/amazon_selling_partner.yml", "build_path": null, "unrendered_config": {"schema": "amazon_selling_partner_{{ var('directed_schema','dev') }}", "materialized": "table", "enabled": true}, "created_at": 1743628945.51141, "relation_name": "`dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`amazon_selling_partner__item_inventory`", "raw_code": "{{ config(enabled=var('amazon_selling_partner__using_catalog_module', true)) }}\n\nwith item as (\n\n    select *\n    from {{ ref('int_amazon_selling_partner__item') }}\n),\n\n{% if var('amazon_selling_partner__using_fba_module', true) %}\nfba_inventory_summary as (\n\n    select *\n    from {{ ref('stg_amazon_selling_partner__fba_inventory_summary') }}\n),\n\nfba_inventory_researching_quantity_entry as (\n    select * \n    from {{ ref('stg_amazon_selling_partner__fba_inventory_researching') }}\n),\n\npivot_researching_quantity as (\n    \n    select \n        inventory_summary_id,\n        source_relation,\n        sum(case when lower(name) = 'researchingquantityinshortterm' then quantity else 0 end) as short_term_research_quantity,\n        sum(case when lower(name) = 'researchingquantityinmidterm' then quantity else 0 end) as mid_term_research_quantity,\n        sum(case when lower(name) = 'researchingquantityinlongterm' then quantity else 0 end) as long_term_research_quantity\n    from fba_inventory_researching_quantity_entry\n    group by 1,2\n),\n{% endif %}\n\njoined as (\n\n    select \n        -- Item description\n        item.source_relation,\n        item.marketplace_id,\n        item.asin,\n        item.item_name,\n        item.display_name,\n        {% if var('amazon_selling_partner__using_fba_module', true) -%} fba_inventory_summary.product_name, {%- endif %}\n        item.brand,\n        item.color,\n        item.size,\n        item.style,\n        item.package_quantity,\n        item.manufacturer,\n        item.contributors,\n        item.product_type,\n        {% if var('amazon_selling_partner__using_fba_module', true) -%} fba_inventory_summary.condition, {%- endif %}\n        item.release_date,\n        item.item_classification,\n        item.classification_id,\n        item.classification_sales_rank_link,\n        item.classification_sales_rank,\n        item.website_display_group,\n        item.website_display_group_name,\n        item.website_display_group_sales_rank_link,\n        item.website_display_group_sales_rank,\n        item.is_memorabilia,\n        item.is_adult_product,\n        item.is_autographed,\n        item.is_trade_in_eligible,\n\n        -- IDs\n        item.model_number,\n        item.part_number,\n        item.parent_variation_asin,\n        item.parent_package_container_asin,\n        {% if var('amazon_selling_partner__using_fba_module', true) %}\n            coalesce(item.sku, fba_inventory_summary.seller_sku) as sku,\n            fba_inventory_summary.fn_sku,\n        {% else %}\n            item.sku,\n        {% endif %}\n        item.ean,\n        item.gtin,\n        item.isbn,\n        item.jan,\n        item.minsan,\n        item.upc,\n\n        -- Item listing metadata \n        item.count_images,\n        item.count_swatch_images,\n        item.item_height_unit,\n        item.item_height_value,\n        item.item_length_unit,\n        item.item_length_value,\n        item.item_weight_unit,\n        item.item_weight_value,\n        item.item_width_unit,\n        item.item_width_value,\n        item.package_height_unit,\n        item.package_height_value,\n        item.package_length_unit,\n        item.package_length_value,\n        item.package_weight_unit,\n        item.package_weight_value,\n        item.package_width_unit,\n        item.package_width_value\n\n        -- Inventory description\n        {% if var('amazon_selling_partner__using_fba_module', true) %}\n        , fba_inventory_summary.inventory_summary_id,\n        fba_inventory_summary.last_updated_at as inventory_last_updated_at,\n        fba_inventory_summary.total_quantity,\n        fba_inventory_summary.total_researching_quantity,\n        fba_inventory_summary.total_reserved_quantity,\n        fba_inventory_summary.fullfillable_quantity,\n        fba_inventory_summary.total_unfulfillable_quantity,\n        fba_inventory_summary.pending_customer_order_quantity,\n        fba_inventory_summary.pending_transshipment_quantity,\n        fba_inventory_summary.fc_processing_quantity,\n        fba_inventory_summary.inblound_shipped_quantity,\n        fba_inventory_summary.inbound_receiving_quantity,\n        fba_inventory_summary.inbound_working_quantity,\n        fba_inventory_summary.warehouse_damaged_quantity,\n        fba_inventory_summary.carrier_damaged_quantity,\n        fba_inventory_summary.customer_damaged_quantity,\n        fba_inventory_summary.defective_quantity,\n        fba_inventory_summary.distributor_damaged_quantity,\n        fba_inventory_summary.expired_quantity,\n        pivot_researching_quantity.short_term_research_quantity,\n        pivot_researching_quantity.mid_term_research_quantity,\n        pivot_researching_quantity.long_term_research_quantity\n        {% endif %}\n\n    from item\n    {% if var('amazon_selling_partner__using_fba_module', true) %}\n    left join fba_inventory_summary \n        on fba_inventory_summary.asin = item.asin\n        and fba_inventory_summary.source_relation = item.source_relation\n    left join pivot_researching_quantity\n        on fba_inventory_summary.inventory_summary_id = pivot_researching_quantity.inventory_summary_id\n        and fba_inventory_summary.source_relation = pivot_researching_quantity.source_relation\n    {% endif %}\n\n)\n\nselect *\nfrom joined", "language": "sql", "refs": [{"name": "int_amazon_selling_partner__item", "package": null, "version": null}, {"name": "stg_amazon_selling_partner__fba_inventory_summary", "package": null, "version": null}, {"name": "stg_amazon_selling_partner__fba_inventory_researching", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.amazon_selling_partner.int_amazon_selling_partner__item", "model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_summary", "model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_researching"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/amazon_selling_partner__item_inventory.sql", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_amazon_selling_partner__item as (\n\n\nwith item_summary as (\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_summary`\n),\n\nitem_product_type as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_product_type` \n),\n\nitem_image as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_image`\n),\n\nitem_images as (\n\n    select \n        source_relation,\n        asin,\n        marketplace_id,\n        count(*) as count_images,\n        sum(case when variant = 'SWATCH' then 1 else 0 end) as count_swatch_images\n\n    from item_image \n    group by 1,2,3\n),\n\nitem_display_group_sales_rank as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_display_group_sales_rank` \n),\n\nitem_classification_sales_rank as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_classification_sales_rank` \n),\n\nitem_relationship as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_relationship` \n),\n\nparent_variation_relationship as (\n\n    select *\n    from item_relationship\n    where type = 'VARIATION'\n),\n\npackage_hierarchy_relationship as (\n\n    select *\n    from item_relationship\n    where type = 'PACKAGE_HIERARCHY'\n),\n\nitem_dimension as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_dimension` \n),\n\nitem_identifier as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_identifier` \n),\n\nitem_identifiers as (\n\n    select \n        asin,\n        source_relation,\n        marketplace_id\n        \n        \n            , cast(max(case when identifier_type = 'SKU' then identifier end) as string) as sku\n        \n            , cast(max(case when identifier_type = 'EAN' then identifier end) as string) as ean\n        \n            , cast(max(case when identifier_type = 'GTIN' then identifier end) as string) as gtin\n        \n            , cast(max(case when identifier_type = 'ISBN' then identifier end) as string) as isbn\n        \n            , cast(max(case when identifier_type = 'JAN' then identifier end) as string) as jan\n        \n            , cast(max(case when identifier_type = 'MINSAN' then identifier end) as string) as minsan\n        \n            , cast(max(case when identifier_type = 'UPC' then identifier end) as string) as upc\n        \n    from item_identifier\n    group by 1,2,3\n),\n\njoined as (\n\n    select \n        item_summary.source_relation,\n        item_summary.marketplace_id,\n        item_summary.asin,\n        item_summary.item_name,\n        item_summary.display_name,\n        item_summary.brand,\n        item_summary.color,\n        item_summary.size,\n        item_summary.style,\n        item_summary.package_quantity,\n        item_summary.manufacturer,\n        item_summary.contributors,\n        item_product_type.product_type,\n        item_summary.item_classification,\n        item_summary.classification_id,\n        item_classification_sales_rank.link as classification_sales_rank_link,\n        item_classification_sales_rank.rank as classification_sales_rank,\n        item_summary.website_display_group,\n        item_summary.website_display_group_name,\n        item_display_group_sales_rank.link as website_display_group_sales_rank_link,\n        item_display_group_sales_rank.rank as website_display_group_sales_rank,\n        item_summary.release_date,\n        item_summary.is_memorabilia,\n        item_summary.is_adult_product,\n        item_summary.is_autographed,\n        item_summary.is_trade_in_eligible,\n\n        item_summary.model_number,\n        item_summary.part_number,\n        parent_variation_relationship.parent_asin as parent_variation_asin,\n        package_hierarchy_relationship.parent_asin as parent_package_container_asin,\n        item_identifiers.sku,\n        item_identifiers.ean,\n        item_identifiers.gtin, \n        item_identifiers.isbn, \n        item_identifiers.jan,\n        item_identifiers.minsan, \n        item_identifiers.upc,\n        \n        item_images.count_images,\n        item_images.count_swatch_images,\n        item_dimension.item_height_unit,\n        item_dimension.item_height_value,\n        item_dimension.item_length_unit,\n        item_dimension.item_length_value,\n        item_dimension.item_weight_unit,\n        item_dimension.item_weight_value,\n        item_dimension.item_width_unit,\n        item_dimension.item_width_value,\n        item_dimension.package_height_unit,\n        item_dimension.package_height_value,\n        item_dimension.package_length_unit,\n        item_dimension.package_length_value,\n        item_dimension.package_weight_unit,\n        item_dimension.package_weight_value,\n        item_dimension.package_width_unit,\n        item_dimension.package_width_value\n\n    from item_summary\n    left join item_product_type\n        on item_summary.asin = item_product_type.asin \n        and item_summary.marketplace_id = item_product_type.marketplace_id\n        and item_summary.source_relation = item_product_type.source_relation\n    left join item_images\n        on item_summary.asin = item_images.asin \n        and item_summary.marketplace_id = item_images.marketplace_id\n        and item_summary.source_relation = item_images.source_relation\n    left join item_display_group_sales_rank\n        on item_summary.asin = item_display_group_sales_rank.asin \n        and item_summary.website_display_group = item_display_group_sales_rank.website_display_group\n        and item_summary.source_relation = item_display_group_sales_rank.source_relation\n    left join item_classification_sales_rank\n        on item_summary.asin = item_classification_sales_rank.asin \n        and item_summary.classification_id = item_classification_sales_rank.classification_id\n        and item_summary.source_relation = item_classification_sales_rank.source_relation\n    left join parent_variation_relationship\n        on item_summary.asin = parent_variation_relationship.child_asin\n        and item_summary.source_relation = parent_variation_relationship.source_relation\n    left join package_hierarchy_relationship\n        on item_summary.asin = package_hierarchy_relationship.child_asin\n        and item_summary.source_relation = package_hierarchy_relationship.source_relation\n    left join item_identifiers\n        on item_summary.asin = item_identifiers.asin \n        and item_summary.marketplace_id = item_identifiers.marketplace_id\n        and item_summary.source_relation = item_identifiers.source_relation\n    left join item_dimension \n        on item_summary.asin = item_dimension.asin \n        and item_summary.marketplace_id = item_dimension.marketplace_id\n        and item_summary.source_relation = item_dimension.source_relation\n)\n\nselect *\nfrom joined\n), item as (\n\n    select *\n    from __dbt__cte__int_amazon_selling_partner__item\n),\n\n\nfba_inventory_summary as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__fba_inventory_summary`\n),\n\nfba_inventory_researching_quantity_entry as (\n    select * \n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__fba_inventory_researching`\n),\n\npivot_researching_quantity as (\n    \n    select \n        inventory_summary_id,\n        source_relation,\n        sum(case when lower(name) = 'researchingquantityinshortterm' then quantity else 0 end) as short_term_research_quantity,\n        sum(case when lower(name) = 'researchingquantityinmidterm' then quantity else 0 end) as mid_term_research_quantity,\n        sum(case when lower(name) = 'researchingquantityinlongterm' then quantity else 0 end) as long_term_research_quantity\n    from fba_inventory_researching_quantity_entry\n    group by 1,2\n),\n\n\njoined as (\n\n    select \n        -- Item description\n        item.source_relation,\n        item.marketplace_id,\n        item.asin,\n        item.item_name,\n        item.display_name,\n        fba_inventory_summary.product_name,\n        item.brand,\n        item.color,\n        item.size,\n        item.style,\n        item.package_quantity,\n        item.manufacturer,\n        item.contributors,\n        item.product_type,\n        fba_inventory_summary.condition,\n        item.release_date,\n        item.item_classification,\n        item.classification_id,\n        item.classification_sales_rank_link,\n        item.classification_sales_rank,\n        item.website_display_group,\n        item.website_display_group_name,\n        item.website_display_group_sales_rank_link,\n        item.website_display_group_sales_rank,\n        item.is_memorabilia,\n        item.is_adult_product,\n        item.is_autographed,\n        item.is_trade_in_eligible,\n\n        -- IDs\n        item.model_number,\n        item.part_number,\n        item.parent_variation_asin,\n        item.parent_package_container_asin,\n        \n            coalesce(item.sku, fba_inventory_summary.seller_sku) as sku,\n            fba_inventory_summary.fn_sku,\n        \n        item.ean,\n        item.gtin,\n        item.isbn,\n        item.jan,\n        item.minsan,\n        item.upc,\n\n        -- Item listing metadata \n        item.count_images,\n        item.count_swatch_images,\n        item.item_height_unit,\n        item.item_height_value,\n        item.item_length_unit,\n        item.item_length_value,\n        item.item_weight_unit,\n        item.item_weight_value,\n        item.item_width_unit,\n        item.item_width_value,\n        item.package_height_unit,\n        item.package_height_value,\n        item.package_length_unit,\n        item.package_length_value,\n        item.package_weight_unit,\n        item.package_weight_value,\n        item.package_width_unit,\n        item.package_width_value\n\n        -- Inventory description\n        \n        , fba_inventory_summary.inventory_summary_id,\n        fba_inventory_summary.last_updated_at as inventory_last_updated_at,\n        fba_inventory_summary.total_quantity,\n        fba_inventory_summary.total_researching_quantity,\n        fba_inventory_summary.total_reserved_quantity,\n        fba_inventory_summary.fullfillable_quantity,\n        fba_inventory_summary.total_unfulfillable_quantity,\n        fba_inventory_summary.pending_customer_order_quantity,\n        fba_inventory_summary.pending_transshipment_quantity,\n        fba_inventory_summary.fc_processing_quantity,\n        fba_inventory_summary.inblound_shipped_quantity,\n        fba_inventory_summary.inbound_receiving_quantity,\n        fba_inventory_summary.inbound_working_quantity,\n        fba_inventory_summary.warehouse_damaged_quantity,\n        fba_inventory_summary.carrier_damaged_quantity,\n        fba_inventory_summary.customer_damaged_quantity,\n        fba_inventory_summary.defective_quantity,\n        fba_inventory_summary.distributor_damaged_quantity,\n        fba_inventory_summary.expired_quantity,\n        pivot_researching_quantity.short_term_research_quantity,\n        pivot_researching_quantity.mid_term_research_quantity,\n        pivot_researching_quantity.long_term_research_quantity\n        \n\n    from item\n    \n    left join fba_inventory_summary \n        on fba_inventory_summary.asin = item.asin\n        and fba_inventory_summary.source_relation = item.source_relation\n    left join pivot_researching_quantity\n        on fba_inventory_summary.inventory_summary_id = pivot_researching_quantity.inventory_summary_id\n        and fba_inventory_summary.source_relation = pivot_researching_quantity.source_relation\n    \n\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.amazon_selling_partner.int_amazon_selling_partner__item", "sql": " __dbt__cte__int_amazon_selling_partner__item as (\n\n\nwith item_summary as (\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_summary`\n),\n\nitem_product_type as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_product_type` \n),\n\nitem_image as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_image`\n),\n\nitem_images as (\n\n    select \n        source_relation,\n        asin,\n        marketplace_id,\n        count(*) as count_images,\n        sum(case when variant = 'SWATCH' then 1 else 0 end) as count_swatch_images\n\n    from item_image \n    group by 1,2,3\n),\n\nitem_display_group_sales_rank as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_display_group_sales_rank` \n),\n\nitem_classification_sales_rank as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_classification_sales_rank` \n),\n\nitem_relationship as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_relationship` \n),\n\nparent_variation_relationship as (\n\n    select *\n    from item_relationship\n    where type = 'VARIATION'\n),\n\npackage_hierarchy_relationship as (\n\n    select *\n    from item_relationship\n    where type = 'PACKAGE_HIERARCHY'\n),\n\nitem_dimension as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_dimension` \n),\n\nitem_identifier as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_identifier` \n),\n\nitem_identifiers as (\n\n    select \n        asin,\n        source_relation,\n        marketplace_id\n        \n        \n            , cast(max(case when identifier_type = 'SKU' then identifier end) as string) as sku\n        \n            , cast(max(case when identifier_type = 'EAN' then identifier end) as string) as ean\n        \n            , cast(max(case when identifier_type = 'GTIN' then identifier end) as string) as gtin\n        \n            , cast(max(case when identifier_type = 'ISBN' then identifier end) as string) as isbn\n        \n            , cast(max(case when identifier_type = 'JAN' then identifier end) as string) as jan\n        \n            , cast(max(case when identifier_type = 'MINSAN' then identifier end) as string) as minsan\n        \n            , cast(max(case when identifier_type = 'UPC' then identifier end) as string) as upc\n        \n    from item_identifier\n    group by 1,2,3\n),\n\njoined as (\n\n    select \n        item_summary.source_relation,\n        item_summary.marketplace_id,\n        item_summary.asin,\n        item_summary.item_name,\n        item_summary.display_name,\n        item_summary.brand,\n        item_summary.color,\n        item_summary.size,\n        item_summary.style,\n        item_summary.package_quantity,\n        item_summary.manufacturer,\n        item_summary.contributors,\n        item_product_type.product_type,\n        item_summary.item_classification,\n        item_summary.classification_id,\n        item_classification_sales_rank.link as classification_sales_rank_link,\n        item_classification_sales_rank.rank as classification_sales_rank,\n        item_summary.website_display_group,\n        item_summary.website_display_group_name,\n        item_display_group_sales_rank.link as website_display_group_sales_rank_link,\n        item_display_group_sales_rank.rank as website_display_group_sales_rank,\n        item_summary.release_date,\n        item_summary.is_memorabilia,\n        item_summary.is_adult_product,\n        item_summary.is_autographed,\n        item_summary.is_trade_in_eligible,\n\n        item_summary.model_number,\n        item_summary.part_number,\n        parent_variation_relationship.parent_asin as parent_variation_asin,\n        package_hierarchy_relationship.parent_asin as parent_package_container_asin,\n        item_identifiers.sku,\n        item_identifiers.ean,\n        item_identifiers.gtin, \n        item_identifiers.isbn, \n        item_identifiers.jan,\n        item_identifiers.minsan, \n        item_identifiers.upc,\n        \n        item_images.count_images,\n        item_images.count_swatch_images,\n        item_dimension.item_height_unit,\n        item_dimension.item_height_value,\n        item_dimension.item_length_unit,\n        item_dimension.item_length_value,\n        item_dimension.item_weight_unit,\n        item_dimension.item_weight_value,\n        item_dimension.item_width_unit,\n        item_dimension.item_width_value,\n        item_dimension.package_height_unit,\n        item_dimension.package_height_value,\n        item_dimension.package_length_unit,\n        item_dimension.package_length_value,\n        item_dimension.package_weight_unit,\n        item_dimension.package_weight_value,\n        item_dimension.package_width_unit,\n        item_dimension.package_width_value\n\n    from item_summary\n    left join item_product_type\n        on item_summary.asin = item_product_type.asin \n        and item_summary.marketplace_id = item_product_type.marketplace_id\n        and item_summary.source_relation = item_product_type.source_relation\n    left join item_images\n        on item_summary.asin = item_images.asin \n        and item_summary.marketplace_id = item_images.marketplace_id\n        and item_summary.source_relation = item_images.source_relation\n    left join item_display_group_sales_rank\n        on item_summary.asin = item_display_group_sales_rank.asin \n        and item_summary.website_display_group = item_display_group_sales_rank.website_display_group\n        and item_summary.source_relation = item_display_group_sales_rank.source_relation\n    left join item_classification_sales_rank\n        on item_summary.asin = item_classification_sales_rank.asin \n        and item_summary.classification_id = item_classification_sales_rank.classification_id\n        and item_summary.source_relation = item_classification_sales_rank.source_relation\n    left join parent_variation_relationship\n        on item_summary.asin = parent_variation_relationship.child_asin\n        and item_summary.source_relation = parent_variation_relationship.source_relation\n    left join package_hierarchy_relationship\n        on item_summary.asin = package_hierarchy_relationship.child_asin\n        and item_summary.source_relation = package_hierarchy_relationship.source_relation\n    left join item_identifiers\n        on item_summary.asin = item_identifiers.asin \n        and item_summary.marketplace_id = item_identifiers.marketplace_id\n        and item_summary.source_relation = item_identifiers.source_relation\n    left join item_dimension \n        on item_summary.asin = item_dimension.asin \n        and item_summary.marketplace_id = item_dimension.marketplace_id\n        and item_summary.source_relation = item_dimension.source_relation\n)\n\nselect *\nfrom joined\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["asin", "marketplace_id", "source_relation"], "time_spine": null}, "model.amazon_selling_partner.amazon_selling_partner__orders": {"database": "dbt-package-testing", "schema": "asp_tests_amazon_selling_partner_dev", "name": "amazon_selling_partner__orders", "resource_type": "model", "package_name": "amazon_selling_partner", "path": "amazon_selling_partner__orders.sql", "original_file_path": "models/amazon_selling_partner__orders.sql", "unique_id": "model.amazon_selling_partner.amazon_selling_partner__orders", "fqn": ["amazon_selling_partner", "amazon_selling_partner__orders"], "alias": "amazon_selling_partner__orders", "checksum": {"name": "sha256", "checksum": "2767856f9ee83bf28153b6f6d807e5ae8623e9a852ae188ee2605da69b4737f0"}, "config": {"enabled": true, "alias": null, "schema": "amazon_selling_partner_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Table of orders placed in Amazon, enhanced with payment method information and order item aggregates.", "columns": {"source_relation": {"name": "source_relation", "description": "The `<database>`.`<schema>` this record came from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "amazon_order_id": {"name": "amazon_order_id", "description": "An Amazon-defined order identifier, in 3-7-7 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "automated_shipping_setting_automated_carrier": {"name": "automated_shipping_setting_automated_carrier", "description": "Auto-generated carrier for SSA orders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "automated_shipping_setting_automated_ship_method": {"name": "automated_shipping_setting_automated_ship_method", "description": "Auto-generated ship method for SSA orders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "automated_shipping_setting_has_automated_shipping_settings": {"name": "automated_shipping_setting_has_automated_shipping_settings", "description": "When true, this order has automated shipping settings generated by Amazon. This order could be identified as an SSA order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "buyer_info_purchase_order_number": {"name": "buyer_info_purchase_order_number", "description": "The purchase order (PO) number entered by the buyer at checkout. Only returned for orders where the buyer entered a PO number at checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "earliest_delivery_date": {"name": "earliest_delivery_date", "description": "The start of the time period within which you have committed to fulfill the order. In ISO 8601 date time format. Only returned for seller-fulfilled orders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "earliest_ship_date": {"name": "earliest_ship_date", "description": "The start of the time period within which you have committed to ship the order. In ISO 8601 date time format. Only returned for seller-fulfilled orders. Note: EarliestShipDate might not be returned for orders placed before February 1, 2013.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "easy_ship_shipment_status": {"name": "easy_ship_shipment_status", "description": "The status of the Amazon Easy Ship order. This property is only included for Amazon Easy Ship orders. Possible values can be found [here](https://developer-docs.amazon.com/sp-api/docs/orders-api-v0-reference#easyshipshipmentstatus).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "electronic_invoice_status": {"name": "electronic_invoice_status", "description": "The status of the electronic invoice. Only available for Easy Ship orders and orders in the BR marketplace. Possible values can be found [here](https://developer-docs.amazon.com/sp-api/docs/orders-api-v0-reference#electronicinvoicestatus).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fulfillment_channel": {"name": "fulfillment_channel", "description": "Whether the order was fulfilled by Amazon (AFN) or by the seller (MFN).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fulfillment_supply_source_id": {"name": "fulfillment_supply_source_id", "description": "The sourceId of the location from where you want the order fulfilled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "has_regulated_items": {"name": "has_regulated_items", "description": "Whether the order contains regulated items which may require additional approval steps before being fulfilled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_access_point_order": {"name": "is_access_point_order", "description": "When true, this order is marked to be delivered to an Access Point. The access location is chosen by the customer. Access Points include Amazon Hub Lockers, Amazon Hub Counters, and pickup points operated by carriers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_business_order": {"name": "is_business_order", "description": "When true, the order is an Amazon Business order. An Amazon Business order is an order where the buyer is a Verified Business Buyer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_estimated_ship_date_set": {"name": "is_estimated_ship_date_set", "description": "When true, the estimated ship date is set for the order. Only returned for Sourcing on Demand orders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_global_express_enabled": {"name": "is_global_express_enabled", "description": "When true, the order is a GlobalExpress order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_iba": {"name": "is_iba", "description": "When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_ispu": {"name": "is_ispu", "description": "When true, this order is marked to be picked up from a store rather than delivered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_premium_order": {"name": "is_premium_order", "description": "When true, the order has a Premium Shipping Service Level Agreement. For more information about Premium Shipping orders, refer to \"Premium Shipping Options\" in the Seller Central Help for your marketplace.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_prime": {"name": "is_prime", "description": "When true, the order is a seller-fulfilled Amazon Prime order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_replacement_order": {"name": "is_replacement_order", "description": "When true, this is a replacement order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_sold_by_ab": {"name": "is_sold_by_ab", "description": "When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "last_update_date": {"name": "last_update_date", "description": "The date when the order was last updated. Note: LastUpdateDate is returned with an incorrect date for orders that were last updated before 2009-04-01.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "latest_delivery_date": {"name": "latest_delivery_date", "description": "The end of the time period within which you have committed to fulfill the order. In ISO 8601 date time format. Only returned for seller-fulfilled orders that do not have a PendingAvailability, Pending, or Canceled status.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "latest_ship_date": {"name": "latest_ship_date", "description": "The end of the time period within which you have committed to ship the order. In ISO 8601 date time format. Only returned for seller-fulfilled orders. Note: LatestShipDate might not be returned for orders placed before February 1, 2013.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketplace_id": {"name": "marketplace_id", "description": "The unobfuscated marketplace identifier. Different marketplace values can be found [here](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "number_of_items_shipped": {"name": "number_of_items_shipped", "description": "The number of items shipped for the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "number_of_items_unshipped": {"name": "number_of_items_unshipped", "description": "The number of items unshipped for the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_channel": {"name": "order_channel", "description": "The order channel for the first item in the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_status": {"name": "order_status", "description": "The current order status. Possible values can be found [here](https://developer-docs.amazon.com/sp-api/docs/orders-api-v0-reference#orderstatus).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_total_amount": {"name": "order_total_amount", "description": "The total charge for this order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_total_currency_code": {"name": "order_total_currency_code", "description": "The three-digit currency code in which the order total is measured. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_type": {"name": "order_type", "description": "The order's type. Possible values can be found [here](https://developer-docs.amazon.com/sp-api/docs/orders-api-v0-reference#ordertype).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "payment_method": {"name": "payment_method", "description": "The payment method for the order. This property is limited to COD and CVS payment methods. Unless you need the specific COD payment information provided by the PaymentExecutionDetailItem object, Amazon recommends using the PaymentMethodDetails table to get payment method information.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "promise_response_due_date": {"name": "promise_response_due_date", "description": "Indicates the date by which the seller must respond to the buyer with an estimated ship date. Only returned for Sourcing on Demand orders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "purchase_date": {"name": "purchase_date", "description": "The date when the order was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "replaced_order_id": {"name": "replaced_order_id", "description": "The order ID value for the order that is being replaced. Returned only if IsReplacementOrder = true.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sales_channel": {"name": "sales_channel", "description": "The sales channel for the first item in the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "seller_order_id": {"name": "seller_order_id", "description": "An order identifier that is specified by the seller. Used to select only the orders that match the order identifier. If SellerOrderId is specified, then FulfillmentChannels, OrderStatuses, PaymentMethod, LastUpdatedAfter, LastUpdatedBefore, and BuyerEmail cannot be specified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ship_service_level": {"name": "ship_service_level", "description": "The order's shipment service level.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipment_service_level_category": {"name": "shipment_service_level_category", "description": "The shipment service level category for the order. Possible values: Expedited, FreeEconomy, NextDay, Priority, SameDay, SecondDay, Scheduled, and Standard.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_address_line_1": {"name": "default_ship_from_location_address_line_1", "description": "Street address of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_address_line_2": {"name": "default_ship_from_location_address_line_2", "description": "Additional street address information of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_address_line_3": {"name": "default_ship_from_location_address_line_3", "description": "Additional street address informatio of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_address_type": {"name": "default_ship_from_location_address_type", "description": "Address type of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_city": {"name": "default_ship_from_location_city", "description": "City of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_country_code": {"name": "default_ship_from_location_country_code", "description": "Country code (two-character country code, in ISO 3166-1 alpha-2 format.) of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_county": {"name": "default_ship_from_location_county", "description": "County of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_district": {"name": "default_ship_from_location_district", "description": "District of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_municipality": {"name": "default_ship_from_location_municipality", "description": "Municipality of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_name": {"name": "default_ship_from_location_name", "description": "Name of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_phone": {"name": "default_ship_from_location_phone", "description": "Associated phone number of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.\n\nNote: In some cases, the buyer phone number is suppressed:\na. Phone is suppressed for all AFN (fulfilled by Amazon) orders.\nb. Phone is suppressed for the shipped MFN (fulfilled by seller) order when the current date is past the Latest Delivery Date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_postal_code": {"name": "default_ship_from_location_postal_code", "description": "Postal code of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_state_or_region": {"name": "default_ship_from_location_state_or_region", "description": "State or region of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_address_type": {"name": "shipping_address_address_type", "description": "Address type of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_city": {"name": "shipping_address_city", "description": "City of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_country_code": {"name": "shipping_address_country_code", "description": "Country code (two-character country code, in ISO 3166-1 alpha-2 format) of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_county": {"name": "shipping_address_county", "description": "County of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_district": {"name": "shipping_address_district", "description": "District of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_municipality": {"name": "shipping_address_municipality", "description": "Municipality of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_postal_code": {"name": "shipping_address_postal_code", "description": "Postal code of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_state_or_region": {"name": "shipping_address_state_or_region", "description": "State or region of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "methods": {"name": "methods", "description": "Comma-separated list of payment methods used for an order. Possible individual values: COD (Cash on delivery), GC (Gift card), CVS (Convenience Store), PointsAccount (Amazon Points), Invoice, or Other.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_order_items": {"name": "count_order_items", "description": "Count of order items associated with the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_item_price_amount": {"name": "total_item_price_amount", "description": "The total selling price of the order's line items. Note that an individual order item is an item and a quantity. This means that the value of ItemPrice is equal to the selling price of the item multiplied by the quantity ordered. ItemPrice excludes ShippingPrice and GiftWrapPrice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_price_currency_code": {"name": "item_price_currency_code", "description": "The three-digit currency code that the `item_price_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_item_tax_amount": {"name": "total_item_tax_amount", "description": "The total tax on the order items' price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_tax_currency_code": {"name": "item_tax_currency_code", "description": "The three-digit currency code that the `item_tax_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_shipping_discount_amount": {"name": "total_shipping_discount_amount", "description": "The total discount on the order's shipping prices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_discount_currency_code": {"name": "shipping_discount_currency_code", "description": "The three-digit currency code that the `shipping_discount_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_shipping_discount_tax_amount": {"name": "total_shipping_discount_tax_amount", "description": "The total tax on the discount on the order's shipping prices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_discount_tax_currency_code": {"name": "shipping_discount_tax_currency_code", "description": "The three-digit currency code that the `shipping_discount_tax_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_shipping_price_amount": {"name": "total_shipping_price_amount", "description": "The total order's shipping price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_price_currency_code": {"name": "shipping_price_currency_code", "description": "The three-digit currency code that the `shipping_price_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_shipping_tax_amount": {"name": "total_shipping_tax_amount", "description": "The total tax on the order's shipping price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_tax_currency_code": {"name": "shipping_tax_currency_code", "description": "The three-digit currency code that the `shipping_tax_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_promotion_discount_amount": {"name": "total_promotion_discount_amount", "description": "The total of all promotional discounts in the offers associated with the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "promotion_discount_currency_code": {"name": "promotion_discount_currency_code", "description": "The three-digit currency code that the `promotion_discount_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_promotion_discount_tax_amount": {"name": "total_promotion_discount_tax_amount", "description": "The total tax on all promotional discounts in the offers associated with the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "promotion_discount_tax_currency_code": {"name": "promotion_discount_tax_currency_code", "description": "The three-digit currency code that the `promotion_discount_tax_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_promotions_used": {"name": "count_promotions_used", "description": "The count of distinct promotions used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "amazon_selling_partner://models/amazon_selling_partner.yml", "build_path": null, "unrendered_config": {"schema": "amazon_selling_partner_{{ var('directed_schema','dev') }}", "materialized": "table", "enabled": true}, "created_at": 1743628945.4921138, "relation_name": "`dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`amazon_selling_partner__orders`", "raw_code": "{{ config(enabled=var('amazon_selling_partner__using_orders_module', true)) }}\n\nwith orders as (\n\n    select *\n    from {{ ref('stg_amazon_selling_partner__orders')}}\n),\n\norder_item as (\n\n    select *\n    from {{ ref('stg_amazon_selling_partner__order_item') }}\n),\n\norder_item_promotion_id as (\n    \n    select *\n    from {{ ref('stg_amazon_selling_partner__order_item_promotion_id') }}\n),\n\npayment_method_detail_item as (\n\n    select *\n    from {{ ref('stg_amazon_selling_partner__payment_method_detail_item') }}\n),\n\naggregate_order_items as (\n\n    select \n        source_relation,\n        amazon_order_id,\n        count(order_item_id) as count_order_items,\n        sum(coalesce(item_price_amount, 0)) as total_item_price_amount,\n        {{ fivetran_utils.string_agg('distinct item_price_currency_code', \"', '\") }} as item_price_currency_code,\n        sum(coalesce(item_tax_amount, 0)) as total_item_tax_amount,\n        {{ fivetran_utils.string_agg('distinct item_tax_currency_code', \"', '\") }} as item_tax_currency_code,\n        sum(coalesce(shipping_discount_amount, 0)) as total_shipping_discount_amount,\n        {{ fivetran_utils.string_agg('distinct shipping_discount_currency_code', \"', '\") }} as shipping_discount_currency_code,\n        sum(coalesce(shipping_discount_tax_amount, 0)) as total_shipping_discount_tax_amount,\n        {{ fivetran_utils.string_agg('distinct shipping_discount_tax_currency_code', \"', '\") }} as shipping_discount_tax_currency_code,\n        sum(coalesce(shipping_price_amount, 0)) as total_shipping_price_amount,\n        {{ fivetran_utils.string_agg('distinct shipping_price_currency_code', \"', '\") }} as shipping_price_currency_code,\n        sum(coalesce(shipping_tax_amount, 0)) as total_shipping_tax_amount,\n        {{ fivetran_utils.string_agg('distinct shipping_tax_currency_code', \"', '\") }} as shipping_tax_currency_code,\n        sum(coalesce(promotion_discount_amount, 0)) as total_promotion_discount_amount,\n        {{ fivetran_utils.string_agg('distinct promotion_discount_currency_code', \"', '\") }} as promotion_discount_currency_code,\n        sum(coalesce(promotion_discount_tax_amount, 0)) as total_promotion_discount_tax_amount,\n        {{ fivetran_utils.string_agg('distinct promotion_discount_tax_currency_code', \"', '\") }} as promotion_discount_tax_currency_code\n\n    from order_item\n    group by 1,2\n),\n\naggregate_promotions as (\n\n    select \n        source_relation,\n        amazon_order_id,\n        count(distinct promotion_id) as count_promotions_used\n\n    from order_item_promotion_id \n    group by 1,2\n),\n\naggregate_payment_methods as (\n\n    select\n        source_relation,\n        amazon_order_id,\n        {{ fivetran_utils.string_agg('distinct method', \"', '\") }} as methods\n\n    from payment_method_detail_item\n    group by 1,2\n),\n\njoined as (\n\n    select \n        orders.*,\n        aggregate_payment_methods.methods,\n        aggregate_order_items.count_order_items,\n        aggregate_order_items.total_item_price_amount,\n        aggregate_order_items.item_price_currency_code,\n        aggregate_order_items.total_item_tax_amount,\n        aggregate_order_items.item_tax_currency_code,\n        aggregate_order_items.total_shipping_discount_amount,\n        aggregate_order_items.shipping_discount_currency_code,\n        aggregate_order_items.total_shipping_discount_tax_amount,\n        aggregate_order_items.shipping_discount_tax_currency_code,\n        aggregate_order_items.total_shipping_price_amount,\n        aggregate_order_items.shipping_price_currency_code,\n        aggregate_order_items.total_shipping_tax_amount,\n        aggregate_order_items.shipping_tax_currency_code,\n        aggregate_order_items.total_promotion_discount_amount,\n        aggregate_order_items.promotion_discount_currency_code,\n        aggregate_order_items.total_promotion_discount_tax_amount,\n        aggregate_order_items.promotion_discount_tax_currency_code,\n        aggregate_promotions.count_promotions_used\n\n    from orders \n    left join aggregate_order_items\n        on orders.amazon_order_id = aggregate_order_items.amazon_order_id\n        and orders.source_relation = aggregate_order_items.source_relation\n    left join aggregate_promotions\n        on orders.amazon_order_id = aggregate_promotions.amazon_order_id\n        and orders.source_relation = aggregate_promotions.source_relation\n    left join aggregate_payment_methods\n        on orders.amazon_order_id = aggregate_payment_methods.amazon_order_id\n        and orders.source_relation = aggregate_payment_methods.source_relation\n)\n\nselect *\nfrom joined", "language": "sql", "refs": [{"name": "stg_amazon_selling_partner__orders", "package": null, "version": null}, {"name": "stg_amazon_selling_partner__order_item", "package": null, "version": null}, {"name": "stg_amazon_selling_partner__order_item_promotion_id", "package": null, "version": null}, {"name": "stg_amazon_selling_partner__payment_method_detail_item", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.string_agg"], "nodes": ["model.amazon_selling_partner.stg_amazon_selling_partner__orders", "model.amazon_selling_partner.stg_amazon_selling_partner__order_item", "model.amazon_selling_partner.stg_amazon_selling_partner__order_item_promotion_id", "model.amazon_selling_partner.stg_amazon_selling_partner__payment_method_detail_item"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/amazon_selling_partner__orders.sql", "compiled": true, "compiled_code": "\n\nwith orders as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__orders`\n),\n\norder_item as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__order_item`\n),\n\norder_item_promotion_id as (\n    \n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__order_item_promotion_id`\n),\n\npayment_method_detail_item as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__payment_method_detail_item`\n),\n\naggregate_order_items as (\n\n    select \n        source_relation,\n        amazon_order_id,\n        count(order_item_id) as count_order_items,\n        sum(coalesce(item_price_amount, 0)) as total_item_price_amount,\n        \n    string_agg(distinct item_price_currency_code, ', ')\n\n as item_price_currency_code,\n        sum(coalesce(item_tax_amount, 0)) as total_item_tax_amount,\n        \n    string_agg(distinct item_tax_currency_code, ', ')\n\n as item_tax_currency_code,\n        sum(coalesce(shipping_discount_amount, 0)) as total_shipping_discount_amount,\n        \n    string_agg(distinct shipping_discount_currency_code, ', ')\n\n as shipping_discount_currency_code,\n        sum(coalesce(shipping_discount_tax_amount, 0)) as total_shipping_discount_tax_amount,\n        \n    string_agg(distinct shipping_discount_tax_currency_code, ', ')\n\n as shipping_discount_tax_currency_code,\n        sum(coalesce(shipping_price_amount, 0)) as total_shipping_price_amount,\n        \n    string_agg(distinct shipping_price_currency_code, ', ')\n\n as shipping_price_currency_code,\n        sum(coalesce(shipping_tax_amount, 0)) as total_shipping_tax_amount,\n        \n    string_agg(distinct shipping_tax_currency_code, ', ')\n\n as shipping_tax_currency_code,\n        sum(coalesce(promotion_discount_amount, 0)) as total_promotion_discount_amount,\n        \n    string_agg(distinct promotion_discount_currency_code, ', ')\n\n as promotion_discount_currency_code,\n        sum(coalesce(promotion_discount_tax_amount, 0)) as total_promotion_discount_tax_amount,\n        \n    string_agg(distinct promotion_discount_tax_currency_code, ', ')\n\n as promotion_discount_tax_currency_code\n\n    from order_item\n    group by 1,2\n),\n\naggregate_promotions as (\n\n    select \n        source_relation,\n        amazon_order_id,\n        count(distinct promotion_id) as count_promotions_used\n\n    from order_item_promotion_id \n    group by 1,2\n),\n\naggregate_payment_methods as (\n\n    select\n        source_relation,\n        amazon_order_id,\n        \n    string_agg(distinct method, ', ')\n\n as methods\n\n    from payment_method_detail_item\n    group by 1,2\n),\n\njoined as (\n\n    select \n        orders.*,\n        aggregate_payment_methods.methods,\n        aggregate_order_items.count_order_items,\n        aggregate_order_items.total_item_price_amount,\n        aggregate_order_items.item_price_currency_code,\n        aggregate_order_items.total_item_tax_amount,\n        aggregate_order_items.item_tax_currency_code,\n        aggregate_order_items.total_shipping_discount_amount,\n        aggregate_order_items.shipping_discount_currency_code,\n        aggregate_order_items.total_shipping_discount_tax_amount,\n        aggregate_order_items.shipping_discount_tax_currency_code,\n        aggregate_order_items.total_shipping_price_amount,\n        aggregate_order_items.shipping_price_currency_code,\n        aggregate_order_items.total_shipping_tax_amount,\n        aggregate_order_items.shipping_tax_currency_code,\n        aggregate_order_items.total_promotion_discount_amount,\n        aggregate_order_items.promotion_discount_currency_code,\n        aggregate_order_items.total_promotion_discount_tax_amount,\n        aggregate_order_items.promotion_discount_tax_currency_code,\n        aggregate_promotions.count_promotions_used\n\n    from orders \n    left join aggregate_order_items\n        on orders.amazon_order_id = aggregate_order_items.amazon_order_id\n        and orders.source_relation = aggregate_order_items.source_relation\n    left join aggregate_promotions\n        on orders.amazon_order_id = aggregate_promotions.amazon_order_id\n        and orders.source_relation = aggregate_promotions.source_relation\n    left join aggregate_payment_methods\n        on orders.amazon_order_id = aggregate_payment_methods.amazon_order_id\n        and orders.source_relation = aggregate_payment_methods.source_relation\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["amazon_order_id", "source_relation"], "time_spine": null}, "model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_researching": {"database": "dbt-package-testing", "schema": "asp_tests_amazon_selling_partner_dev", "name": "stg_amazon_selling_partner__fba_inventory_researching", "resource_type": "model", "package_name": "amazon_selling_partner", "path": "staging/stg_amazon_selling_partner__fba_inventory_researching.sql", "original_file_path": "models/staging/stg_amazon_selling_partner__fba_inventory_researching.sql", "unique_id": "model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_researching", "fqn": ["amazon_selling_partner", "staging", "stg_amazon_selling_partner__fba_inventory_researching"], "alias": "stg_amazon_selling_partner__fba_inventory_researching", "checksum": {"name": "sha256", "checksum": "84dbcacddf7e1d89ee6fd78eb83423e577fc8a69ff8f0d51b9c97285c577d334"}, "config": {"enabled": true, "alias": null, "schema": "amazon_selling_partner_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "The misplaced or warehouse damaged inventory that is actively being confirmed at Amazon fulfillment centers.", "columns": {"source_relation": {"name": "source_relation", "description": "The `<database>`.`<schema>` this record came from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inventory_summary_id": {"name": "inventory_summary_id", "description": "Fivetran-generated Primary Key for inventory summaries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "The duration of the research. [Possible values](https://developer-docs.amazon.com/sp-api/docs/fbainventory-api-v1-reference#name) are `researchingQuantityInShortTerm` (Short term for 1-10 days), `researchingQuantityInMidTerm` (Mid term for 11-20 days), and `researchingQuantityInLongTerm` (Long term for 21 days or longer)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "quantity": {"name": "quantity", "description": "The number of units.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "amazon_selling_partner://models/staging/stg_amazon_selling_partner.yml", "build_path": null, "unrendered_config": {"schema": "amazon_selling_partner_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1743628945.69194, "relation_name": "`dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__fba_inventory_researching`", "raw_code": "{{ config(enabled=var('amazon_selling_partner__using_fba_module', true)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_amazon_selling_partner__fba_inventory_researching_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_amazon_selling_partner__fba_inventory_researching_base')),\n                staging_columns=get_fba_inventory_researching_quantity_entry_columns()\n            )\n        }}\n        \n        {{ amazon_selling_partner_apply_source_relation() }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        inventory_summary_id,\n        name,\n        quantity\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_amazon_selling_partner__fba_inventory_researching_base", "package": null, "version": null}, {"name": "stg_amazon_selling_partner__fba_inventory_researching_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.amazon_selling_partner.get_fba_inventory_researching_quantity_entry_columns", "macro.fivetran_utils.fill_staging_columns", "macro.amazon_selling_partner.amazon_selling_partner_apply_source_relation"], "nodes": ["model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_researching_base"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/stg_amazon_selling_partner__fba_inventory_researching.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__fba_inventory_researching_base`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    inventory_summary_id\n    \n as \n    \n    inventory_summary_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n\n\n\n        \n        \n, 'dbt-package-testing' || '.'|| 'asp_tests' as source_relation\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        inventory_summary_id,\n        name,\n        quantity\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["inventory_summary_id", "name", "source_relation"], "time_spine": null}, "model.amazon_selling_partner.stg_amazon_selling_partner__item_image": {"database": "dbt-package-testing", "schema": "asp_tests_amazon_selling_partner_dev", "name": "stg_amazon_selling_partner__item_image", "resource_type": "model", "package_name": "amazon_selling_partner", "path": "staging/stg_amazon_selling_partner__item_image.sql", "original_file_path": "models/staging/stg_amazon_selling_partner__item_image.sql", "unique_id": "model.amazon_selling_partner.stg_amazon_selling_partner__item_image", "fqn": ["amazon_selling_partner", "staging", "stg_amazon_selling_partner__item_image"], "alias": "stg_amazon_selling_partner__item_image", "checksum": {"name": "sha256", "checksum": "b86f7daba17705b291298606b3a6974af86a7d83dfcab936042b8a64a2e1622a"}, "config": {"enabled": true, "alias": null, "schema": "amazon_selling_partner_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Images for an item in the Amazon catalog.", "columns": {"source_relation": {"name": "source_relation", "description": "The `<database>`.`<schema>` this record came from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "asin": {"name": "asin", "description": "The item's Amazon Standard Identification Number (ASIN).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketplace_id": {"name": "marketplace_id", "description": "The unobfuscated marketplace identifier. Different marketplace values can be found [here](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "link": {"name": "link", "description": "Link, or URL, for the image.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant": {"name": "variant", "description": "Variant of the image. Possible values can be found [here](https://developer-docs.amazon.com/sp-api/docs/catalog-items-api-v2022-04-01-reference#variant).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "height": {"name": "height", "description": "Height of the image in pixels.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "width": {"name": "width", "description": "Width of the image in pixels.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "UTC timestamp of when the row was last successfully synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "amazon_selling_partner://models/staging/stg_amazon_selling_partner.yml", "build_path": null, "unrendered_config": {"schema": "amazon_selling_partner_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1743628945.641408, "relation_name": "`dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_image`", "raw_code": "{{ config(enabled=var('amazon_selling_partner__using_catalog_module', true)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_amazon_selling_partner__item_image_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_amazon_selling_partner__item_image_base')),\n                staging_columns=get_item_image_columns()\n            )\n        }}\n        \n        {{ amazon_selling_partner_apply_source_relation() }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        _fivetran_synced,\n        asin,\n        height,\n        link,\n        marketplace_id,\n        upper(variant) as variant,\n        width\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_amazon_selling_partner__item_image_base", "package": null, "version": null}, {"name": "stg_amazon_selling_partner__item_image_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.amazon_selling_partner.get_item_image_columns", "macro.fivetran_utils.fill_staging_columns", "macro.amazon_selling_partner.amazon_selling_partner_apply_source_relation"], "nodes": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_image_base"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/stg_amazon_selling_partner__item_image.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_image_base`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    asin\n    \n as \n    \n    asin\n    \n, \n    \n    \n    height\n    \n as \n    \n    height\n    \n, \n    \n    \n    link\n    \n as \n    \n    link\n    \n, \n    \n    \n    marketplace_id\n    \n as \n    \n    marketplace_id\n    \n, \n    \n    \n    variant\n    \n as \n    \n    variant\n    \n, \n    \n    \n    width\n    \n as \n    \n    width\n    \n\n\n\n        \n        \n, 'dbt-package-testing' || '.'|| 'asp_tests' as source_relation\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        _fivetran_synced,\n        asin,\n        height,\n        link,\n        marketplace_id,\n        upper(variant) as variant,\n        width\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["asin", "marketplace_id", "source_relation", "variant"], "time_spine": null}, "model.amazon_selling_partner.stg_amazon_selling_partner__payment_method_detail_item": {"database": "dbt-package-testing", "schema": "asp_tests_amazon_selling_partner_dev", "name": "stg_amazon_selling_partner__payment_method_detail_item", "resource_type": "model", "package_name": "amazon_selling_partner", "path": "staging/stg_amazon_selling_partner__payment_method_detail_item.sql", "original_file_path": "models/staging/stg_amazon_selling_partner__payment_method_detail_item.sql", "unique_id": "model.amazon_selling_partner.stg_amazon_selling_partner__payment_method_detail_item", "fqn": ["amazon_selling_partner", "staging", "stg_amazon_selling_partner__payment_method_detail_item"], "alias": "stg_amazon_selling_partner__payment_method_detail_item", "checksum": {"name": "sha256", "checksum": "1cf640db0ae3aca55c5aea8567373aee9a2f01bbca2c86b8e0294980b5891a57"}, "config": {"enabled": true, "alias": null, "schema": "amazon_selling_partner_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "A list of payment methods for the order.", "columns": {"source_relation": {"name": "source_relation", "description": "The `<database>`.`<schema>` this record came from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "amazon_order_id": {"name": "amazon_order_id", "description": "An Amazon-defined order identifier, in 3-7-7 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "method": {"name": "method", "description": "A sub-payment method for a COD order. Possible values: COD (Cash on delivery), GC (Gift card), CVS (Convenience Store), PointsAccount (Amazon Points), Invoice, or Other.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "amazon_selling_partner://models/staging/stg_amazon_selling_partner.yml", "build_path": null, "unrendered_config": {"schema": "amazon_selling_partner_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1743628945.639481, "relation_name": "`dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__payment_method_detail_item`", "raw_code": "{{ config(enabled=var('amazon_selling_partner__using_orders_module', true)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_amazon_selling_partner__payment_method_detail_item_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_amazon_selling_partner__payment_method_detail_item_base')),\n                staging_columns=get_payment_method_detail_item_columns()\n            )\n        }}\n        \n        {{ amazon_selling_partner_apply_source_relation() }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        amazon_order_id,\n        method\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_amazon_selling_partner__payment_method_detail_item_base", "package": null, "version": null}, {"name": "stg_amazon_selling_partner__payment_method_detail_item_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.amazon_selling_partner.get_payment_method_detail_item_columns", "macro.fivetran_utils.fill_staging_columns", "macro.amazon_selling_partner.amazon_selling_partner_apply_source_relation"], "nodes": ["model.amazon_selling_partner.stg_amazon_selling_partner__payment_method_detail_item_base"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/stg_amazon_selling_partner__payment_method_detail_item.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__payment_method_detail_item_base`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    amazon_order_id\n    \n as \n    \n    amazon_order_id\n    \n, \n    \n    \n    method\n    \n as \n    \n    method\n    \n\n\n\n        \n        \n, 'dbt-package-testing' || '.'|| 'asp_tests' as source_relation\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        amazon_order_id,\n        method\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["amazon_order_id", "method", "source_relation"], "time_spine": null}, "model.amazon_selling_partner.stg_amazon_selling_partner__item_product_type": {"database": "dbt-package-testing", "schema": "asp_tests_amazon_selling_partner_dev", "name": "stg_amazon_selling_partner__item_product_type", "resource_type": "model", "package_name": "amazon_selling_partner", "path": "staging/stg_amazon_selling_partner__item_product_type.sql", "original_file_path": "models/staging/stg_amazon_selling_partner__item_product_type.sql", "unique_id": "model.amazon_selling_partner.stg_amazon_selling_partner__item_product_type", "fqn": ["amazon_selling_partner", "staging", "stg_amazon_selling_partner__item_product_type"], "alias": "stg_amazon_selling_partner__item_product_type", "checksum": {"name": "sha256", "checksum": "f9f6e5c2c601f6a0886a3740cfa139fd24aaf941a9eac1c5b40d2ceed2e1aea4"}, "config": {"enabled": true, "alias": null, "schema": "amazon_selling_partner_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Product types associated with the Amazon catalog item.", "columns": {"source_relation": {"name": "source_relation", "description": "The `<database>`.`<schema>` this record came from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "asin": {"name": "asin", "description": "The item's Amazon Standard Identification Number (ASIN).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketplace_id": {"name": "marketplace_id", "description": "The unobfuscated marketplace identifier. Different marketplace values can be found [here](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_type": {"name": "product_type", "description": "Name of the product type associated with the Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "UTC timestamp of when the row was last successfully synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "amazon_selling_partner://models/staging/stg_amazon_selling_partner.yml", "build_path": null, "unrendered_config": {"schema": "amazon_selling_partner_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1743628945.6398568, "relation_name": "`dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_product_type`", "raw_code": "{{ config(enabled=var('amazon_selling_partner__using_catalog_module', true)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_amazon_selling_partner__item_product_type_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_amazon_selling_partner__item_product_type_base')),\n                staging_columns=get_item_product_type_columns()\n            )\n        }}\n        \n        {{ amazon_selling_partner_apply_source_relation() }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        _fivetran_synced,\n        asin,\n        marketplace_id,\n        product_type\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_amazon_selling_partner__item_product_type_base", "package": null, "version": null}, {"name": "stg_amazon_selling_partner__item_product_type_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.amazon_selling_partner.get_item_product_type_columns", "macro.fivetran_utils.fill_staging_columns", "macro.amazon_selling_partner.amazon_selling_partner_apply_source_relation"], "nodes": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_product_type_base"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/stg_amazon_selling_partner__item_product_type.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_product_type_base`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    asin\n    \n as \n    \n    asin\n    \n, \n    \n    \n    marketplace_id\n    \n as \n    \n    marketplace_id\n    \n, \n    \n    \n    product_type\n    \n as \n    \n    product_type\n    \n\n\n\n        \n        \n, 'dbt-package-testing' || '.'|| 'asp_tests' as source_relation\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        _fivetran_synced,\n        asin,\n        marketplace_id,\n        product_type\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["asin", "marketplace_id", "source_relation"], "time_spine": null}, "model.amazon_selling_partner.stg_amazon_selling_partner__order_item": {"database": "dbt-package-testing", "schema": "asp_tests_amazon_selling_partner_dev", "name": "stg_amazon_selling_partner__order_item", "resource_type": "model", "package_name": "amazon_selling_partner", "path": "staging/stg_amazon_selling_partner__order_item.sql", "original_file_path": "models/staging/stg_amazon_selling_partner__order_item.sql", "unique_id": "model.amazon_selling_partner.stg_amazon_selling_partner__order_item", "fqn": ["amazon_selling_partner", "staging", "stg_amazon_selling_partner__order_item"], "alias": "stg_amazon_selling_partner__order_item", "checksum": {"name": "sha256", "checksum": "79fca5dd7f0fefc2eb7a56ce4ab95be5d16e06ec19fb1cd825acaeb7b545073b"}, "config": {"enabled": true, "alias": null, "schema": "amazon_selling_partner_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "A single order item.", "columns": {"source_relation": {"name": "source_relation", "description": "The `<database>`.`<schema>` this record came from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_item_id": {"name": "order_item_id", "description": "An Amazon-defined item identifier for the associated item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "amazon_order_id": {"name": "amazon_order_id", "description": "An Amazon-defined order identifier, in 3-7-7 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_gift": {"name": "is_gift", "description": "Boolean that tndicates whether the item is a gift.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_transparency": {"name": "is_transparency", "description": "When true, the ASIN is enrolled in Transparency. The Transparency serial number that you must submit is determined by:\n\n- 1D or 2D Barcode: This has a T logo. Submit either the 29-character alpha-numeric identifier beginning with AZ or ZA, or the 38-character Serialized Global Trade Item Number (SGTIN).\n- 2D Barcode SN: Submit the 7- to 20-character serial number barcode, which likely has the prefix SN. The serial number is applied to the same side of the packaging as the GTIN (UPC/EAN/ISBN) barcode.\n- QR code SN: Submit the URL that the QR code generates.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "asin": {"name": "asin", "description": "The item's Amazon Standard Identification Number (ASIN).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_buyer_requested_cancel": {"name": "is_buyer_requested_cancel", "description": "Boolean indicating whether the buyer has requested cancellation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "buyer_requested_cancel_reason": {"name": "buyer_requested_cancel_reason", "description": "The reason that the buyer requested cancellation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "condition_id": {"name": "condition_id", "description": "The condition of the item. Possible values: New, Used, Collectible, Refurbished, Preorder, and Club.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "condition_note": {"name": "condition_note", "description": "The condition of the item, as described by the seller.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "condition_subtype_id": {"name": "condition_subtype_id", "description": "The subcondition of the item.\n\nPossible values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, Any, and Other.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "deemed_reseller_category": {"name": "deemed_reseller_category", "description": "The category of deemed reseller. This applies to selling partners that are not based in the EU and is used to help them meet the VAT Deemed Reseller tax laws in the EU and UK. \nEither `IOSS` (Import one stop shop. The item being purchased is not held in the EU for shipment) or `UOSS` (Union one stop shop. The item being purchased is held in the EU for shipment).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ioss_number": {"name": "ioss_number", "description": "The IOSS number of the marketplace. Sellers shipping to the EU from outside the EU must provide this IOSS number to their carrier when Amazon has collected the VAT on the sale.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_price_amount": {"name": "item_price_amount", "description": "The selling price of the order item. Note that an order item is an item and a quantity. This means that the value of ItemPrice is equal to the selling price of the item multiplied by the quantity ordered. ItemPrice excludes ShippingPrice and GiftWrapPrice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_price_currency_code": {"name": "item_price_currency_code", "description": "The three-digit currency code that the `item_price_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_tax_amount": {"name": "item_tax_amount", "description": "The tax on the item price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_tax_currency_code": {"name": "item_tax_currency_code", "description": "The three-digit currency code that the `item_tax_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_info_detail_number_of_items": {"name": "product_info_detail_number_of_items", "description": "The total number of items that are included in the ASIN.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "promotion_discount_amount": {"name": "promotion_discount_amount", "description": "The total of all promotional discounts in the offer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "promotion_discount_currency_code": {"name": "promotion_discount_currency_code", "description": "The three-digit currency code that the `promotion_discount_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "promotion_discount_tax_currency_code": {"name": "promotion_discount_tax_currency_code", "description": "The three-digit currency code that the `promotion_discount_tax_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "promotion_discount_tax_amount": {"name": "promotion_discount_tax_amount", "description": "The tax on the total of all promotional discounts in the offer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "quantity_ordered": {"name": "quantity_ordered", "description": "The number of items in the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "quantity_shipped": {"name": "quantity_shipped", "description": "The number of items shipped.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "scheduled_delivery_end_date": {"name": "scheduled_delivery_end_date", "description": "The end date of the scheduled delivery window in the time zone for the order destination. In ISO 8601 date time format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "scheduled_delivery_start_date": {"name": "scheduled_delivery_start_date", "description": "The start date of the scheduled delivery window in the time zone for the order destination. In ISO 8601 date time format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "seller_sku": {"name": "seller_sku", "description": "The item's seller stock keeping unit (SKU).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_serial_number_required": {"name": "is_serial_number_required", "description": "When true, the product type for this item has a serial number. Only returned for Amazon Easy Ship orders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_discount_amount": {"name": "shipping_discount_amount", "description": "The discount on the shipping price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_discount_currency_code": {"name": "shipping_discount_currency_code", "description": "The three-digit currency code that the `shipping_discount_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_discount_tax_amount": {"name": "shipping_discount_tax_amount", "description": "The tax on the discount on the shipping price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_discount_tax_currency_code": {"name": "shipping_discount_tax_currency_code", "description": "The three-digit currency code that the `shipping_discount_tax_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_price_amount": {"name": "shipping_price_amount", "description": "The item's shipping price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_price_currency_code": {"name": "shipping_price_currency_code", "description": "The three-digit currency code that the `shipping_price_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_tax_amount": {"name": "shipping_tax_amount", "description": "The tax on the shipping price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_tax_currency_code": {"name": "shipping_tax_currency_code", "description": "The three-digit currency code that the `shipping_tax_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "store_chain_store_id": {"name": "store_chain_store_id", "description": "The store chain store identifier. Linked to a specific store in a store chain.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tax_collection_model": {"name": "tax_collection_model", "description": "The tax collection model applied to the item. Possible value(s) can be found [here](https://developer-docs.amazon.com/sp-api/docs/orders-api-v0-reference#model).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tax_collection_responsible_party": {"name": "tax_collection_responsible_party", "description": "The party responsible for withholding the taxes and remitting them to the taxing authority. Possible value(s) can be found [here](https://developer-docs.amazon.com/sp-api/docs/orders-api-v0-reference#responsibleparty).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "The item's title.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "amazon_selling_partner://models/staging/stg_amazon_selling_partner.yml", "build_path": null, "unrendered_config": {"schema": "amazon_selling_partner_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1743628945.6387389, "relation_name": "`dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__order_item`", "raw_code": "{{ config(enabled=var('amazon_selling_partner__using_orders_module', true)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_amazon_selling_partner__order_item_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_amazon_selling_partner__order_item_base')),\n                staging_columns=get_order_item_columns()\n            )\n        }}\n        \n        {{ amazon_selling_partner_apply_source_relation() }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        amazon_order_id,\n        order_item_id,\n        asin,\n        seller_sku,\n        title,\n        product_info_detail_number_of_items,\n        scheduled_delivery_start_date,\n        scheduled_delivery_end_date,\n        quantity_ordered,\n        quantity_shipped,\n        {{ amazon_selling_partner.convert_string_to_numeric('item_price_amount') }} as item_price_amount,\n        item_price_currency_code,\n        {{ amazon_selling_partner.convert_string_to_numeric('item_tax_amount') }} as item_tax_amount,\n        item_tax_currency_code,\n        {{ amazon_selling_partner.convert_string_to_numeric('shipping_discount_amount') }} as shipping_discount_amount,\n        shipping_discount_currency_code,\n        {{ amazon_selling_partner.convert_string_to_numeric('shipping_discount_tax_amount') }} as shipping_discount_tax_amount,\n        shipping_discount_tax_currency_code,\n        {{ amazon_selling_partner.convert_string_to_numeric('shipping_price_amount') }} as shipping_price_amount,\n        shipping_price_currency_code,\n        {{ amazon_selling_partner.convert_string_to_numeric('shipping_tax_amount') }} as shipping_tax_amount,\n        shipping_tax_currency_code,\n        {{ amazon_selling_partner.convert_string_to_numeric('promotion_discount_amount') }} as promotion_discount_amount,\n        promotion_discount_currency_code,\n        {{ amazon_selling_partner.convert_string_to_numeric('promotion_discount_tax_amount') }} as promotion_discount_tax_amount,\n        promotion_discount_tax_currency_code,\n        condition_id,\n        condition_note,\n        condition_subtype_id,\n        buyer_requested_cancel_buyer_cancel_reason as buyer_requested_cancel_reason,\n        buyer_requested_cancel_is_buyer_requested_cancel as is_buyer_requested_cancel,\n        deemed_reseller_category,\n        ioss_number,\n        is_gift,\n        is_transparency,\n        serial_number_required as is_serial_number_required, -- only populated for Easy Ship orders\n        store_chain_store_id,\n        tax_collection_model, -- always MarketplaceFacilitator in US\n        tax_collection_responsible_party -- always Amazon Web Services in US\n        \n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_amazon_selling_partner__order_item_base", "package": null, "version": null}, {"name": "stg_amazon_selling_partner__order_item_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.amazon_selling_partner.get_order_item_columns", "macro.fivetran_utils.fill_staging_columns", "macro.amazon_selling_partner.amazon_selling_partner_apply_source_relation", "macro.amazon_selling_partner.convert_string_to_numeric"], "nodes": ["model.amazon_selling_partner.stg_amazon_selling_partner__order_item_base"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/stg_amazon_selling_partner__order_item.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__order_item_base`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    amazon_order_id\n    \n as \n    \n    amazon_order_id\n    \n, \n    \n    \n    asin\n    \n as \n    \n    asin\n    \n, \n    \n    \n    buyer_requested_cancel_buyer_cancel_reason\n    \n as \n    \n    buyer_requested_cancel_buyer_cancel_reason\n    \n, \n    \n    \n    buyer_requested_cancel_is_buyer_requested_cancel\n    \n as \n    \n    buyer_requested_cancel_is_buyer_requested_cancel\n    \n, \n    \n    \n    condition_id\n    \n as \n    \n    condition_id\n    \n, \n    \n    \n    condition_note\n    \n as \n    \n    condition_note\n    \n, \n    \n    \n    condition_subtype_id\n    \n as \n    \n    condition_subtype_id\n    \n, \n    \n    \n    deemed_reseller_category\n    \n as \n    \n    deemed_reseller_category\n    \n, \n    \n    \n    ioss_number\n    \n as \n    \n    ioss_number\n    \n, \n    \n    \n    is_gift\n    \n as \n    \n    is_gift\n    \n, \n    \n    \n    is_transparency\n    \n as \n    \n    is_transparency\n    \n, \n    \n    \n    item_price_amount\n    \n as \n    \n    item_price_amount\n    \n, \n    \n    \n    item_price_currency_code\n    \n as \n    \n    item_price_currency_code\n    \n, \n    \n    \n    item_tax_amount\n    \n as \n    \n    item_tax_amount\n    \n, \n    cast(null as string) as \n    \n    item_tax_currency_code\n    \n , \n    \n    \n    order_item_id\n    \n as \n    \n    order_item_id\n    \n, \n    \n    \n    product_info_detail_number_of_items\n    \n as \n    \n    product_info_detail_number_of_items\n    \n, \n    \n    \n    promotion_discount_amount\n    \n as \n    \n    promotion_discount_amount\n    \n, \n    \n    \n    promotion_discount_currency_code\n    \n as \n    \n    promotion_discount_currency_code\n    \n, \n    \n    \n    promotion_discount_tax_amount\n    \n as \n    \n    promotion_discount_tax_amount\n    \n, \n    \n    \n    promotion_discount_tax_currency_code\n    \n as \n    \n    promotion_discount_tax_currency_code\n    \n, \n    \n    \n    quantity_ordered\n    \n as \n    \n    quantity_ordered\n    \n, \n    \n    \n    quantity_shipped\n    \n as \n    \n    quantity_shipped\n    \n, \n    \n    \n    scheduled_delivery_end_date\n    \n as \n    \n    scheduled_delivery_end_date\n    \n, \n    \n    \n    scheduled_delivery_start_date\n    \n as \n    \n    scheduled_delivery_start_date\n    \n, \n    \n    \n    seller_sku\n    \n as \n    \n    seller_sku\n    \n, \n    \n    \n    serial_number_required\n    \n as \n    \n    serial_number_required\n    \n, \n    \n    \n    shipping_discount_amount\n    \n as \n    \n    shipping_discount_amount\n    \n, \n    \n    \n    shipping_discount_currency_code\n    \n as \n    \n    shipping_discount_currency_code\n    \n, \n    \n    \n    shipping_discount_tax_amount\n    \n as \n    \n    shipping_discount_tax_amount\n    \n, \n    \n    \n    shipping_discount_tax_currency_code\n    \n as \n    \n    shipping_discount_tax_currency_code\n    \n, \n    \n    \n    shipping_price_amount\n    \n as \n    \n    shipping_price_amount\n    \n, \n    \n    \n    shipping_price_currency_code\n    \n as \n    \n    shipping_price_currency_code\n    \n, \n    \n    \n    shipping_tax_amount\n    \n as \n    \n    shipping_tax_amount\n    \n, \n    \n    \n    shipping_tax_currency_code\n    \n as \n    \n    shipping_tax_currency_code\n    \n, \n    \n    \n    store_chain_store_id\n    \n as \n    \n    store_chain_store_id\n    \n, \n    \n    \n    tax_collection_model\n    \n as \n    \n    tax_collection_model\n    \n, \n    \n    \n    tax_collection_responsible_party\n    \n as \n    \n    tax_collection_responsible_party\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n\n\n\n        \n        \n, 'dbt-package-testing' || '.'|| 'asp_tests' as source_relation\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        amazon_order_id,\n        order_item_id,\n        asin,\n        seller_sku,\n        title,\n        product_info_detail_number_of_items,\n        scheduled_delivery_start_date,\n        scheduled_delivery_end_date,\n        quantity_ordered,\n        quantity_shipped,\n        cast(REGEXP_EXTRACT(REPLACE(item_price_amount, ',', ''), r'-?\\d+(?:\\.\\d+)?') as numeric) as item_price_amount,\n        item_price_currency_code,\n        cast(REGEXP_EXTRACT(REPLACE(item_tax_amount, ',', ''), r'-?\\d+(?:\\.\\d+)?') as numeric) as item_tax_amount,\n        item_tax_currency_code,\n        cast(REGEXP_EXTRACT(REPLACE(shipping_discount_amount, ',', ''), r'-?\\d+(?:\\.\\d+)?') as numeric) as shipping_discount_amount,\n        shipping_discount_currency_code,\n        cast(REGEXP_EXTRACT(REPLACE(shipping_discount_tax_amount, ',', ''), r'-?\\d+(?:\\.\\d+)?') as numeric) as shipping_discount_tax_amount,\n        shipping_discount_tax_currency_code,\n        cast(REGEXP_EXTRACT(REPLACE(shipping_price_amount, ',', ''), r'-?\\d+(?:\\.\\d+)?') as numeric) as shipping_price_amount,\n        shipping_price_currency_code,\n        cast(REGEXP_EXTRACT(REPLACE(shipping_tax_amount, ',', ''), r'-?\\d+(?:\\.\\d+)?') as numeric) as shipping_tax_amount,\n        shipping_tax_currency_code,\n        cast(REGEXP_EXTRACT(REPLACE(promotion_discount_amount, ',', ''), r'-?\\d+(?:\\.\\d+)?') as numeric) as promotion_discount_amount,\n        promotion_discount_currency_code,\n        cast(REGEXP_EXTRACT(REPLACE(promotion_discount_tax_amount, ',', ''), r'-?\\d+(?:\\.\\d+)?') as numeric) as promotion_discount_tax_amount,\n        promotion_discount_tax_currency_code,\n        condition_id,\n        condition_note,\n        condition_subtype_id,\n        buyer_requested_cancel_buyer_cancel_reason as buyer_requested_cancel_reason,\n        buyer_requested_cancel_is_buyer_requested_cancel as is_buyer_requested_cancel,\n        deemed_reseller_category,\n        ioss_number,\n        is_gift,\n        is_transparency,\n        serial_number_required as is_serial_number_required, -- only populated for Easy Ship orders\n        store_chain_store_id,\n        tax_collection_model, -- always MarketplaceFacilitator in US\n        tax_collection_responsible_party -- always Amazon Web Services in US\n        \n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["amazon_order_id", "order_item_id", "source_relation"], "time_spine": null}, "model.amazon_selling_partner.stg_amazon_selling_partner__item_dimension": {"database": "dbt-package-testing", "schema": "asp_tests_amazon_selling_partner_dev", "name": "stg_amazon_selling_partner__item_dimension", "resource_type": "model", "package_name": "amazon_selling_partner", "path": "staging/stg_amazon_selling_partner__item_dimension.sql", "original_file_path": "models/staging/stg_amazon_selling_partner__item_dimension.sql", "unique_id": "model.amazon_selling_partner.stg_amazon_selling_partner__item_dimension", "fqn": ["amazon_selling_partner", "staging", "stg_amazon_selling_partner__item_dimension"], "alias": "stg_amazon_selling_partner__item_dimension", "checksum": {"name": "sha256", "checksum": "234e88ebd25b4b13f6224f44fdaeb4aae5470511a17cdb2bdc572d3830d672e5"}, "config": {"enabled": true, "alias": null, "schema": "amazon_selling_partner_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Dimensions of an Amazon catalog item or item in its packaging.", "columns": {"source_relation": {"name": "source_relation", "description": "The `<database>`.`<schema>` this record came from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "asin": {"name": "asin", "description": "The item's Amazon Standard Identification Number (ASIN).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketplace_id": {"name": "marketplace_id", "description": "The unobfuscated marketplace identifier. Different marketplace values can be found [here](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_height_unit": {"name": "item_height_unit", "description": "Measurement unit of the dimension value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_height_value": {"name": "item_height_value", "description": "Height of an item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_length_unit": {"name": "item_length_unit", "description": "Measurement unit of the dimension value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_length_value": {"name": "item_length_value", "description": "Length of an item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_weight_unit": {"name": "item_weight_unit", "description": "Measurement unit of the dimension value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_weight_value": {"name": "item_weight_value", "description": "Weight of an item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_width_unit": {"name": "item_width_unit", "description": "Measurement unit of the dimension value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_width_value": {"name": "item_width_value", "description": "Width of an item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "package_height_unit": {"name": "package_height_unit", "description": "Measurement unit of the dimension value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "package_height_value": {"name": "package_height_value", "description": "Height of an item package.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "package_length_unit": {"name": "package_length_unit", "description": "Measurement unit of the dimension value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "package_length_value": {"name": "package_length_value", "description": "Length of an item package.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "package_weight_unit": {"name": "package_weight_unit", "description": "Measurement unit of the dimension value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "package_weight_value": {"name": "package_weight_value", "description": "Weight of an item package.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "package_width_unit": {"name": "package_width_unit", "description": "Measurement unit of the dimension value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "package_width_value": {"name": "package_width_value", "description": "Width of an item package.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "UTC timestamp of when the row was last successfully synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "amazon_selling_partner://models/staging/stg_amazon_selling_partner.yml", "build_path": null, "unrendered_config": {"schema": "amazon_selling_partner_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1743628945.640544, "relation_name": "`dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_dimension`", "raw_code": "{{ config(enabled=var('amazon_selling_partner__using_catalog_module', true)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_amazon_selling_partner__item_dimension_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_amazon_selling_partner__item_dimension_base')),\n                staging_columns=get_item_dimension_columns()\n            )\n        }}\n        \n        {{ amazon_selling_partner_apply_source_relation() }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        _fivetran_synced,\n        asin,\n        marketplace_id,\n        item_height_unit,\n        item_height_value,\n        item_length_unit,\n        item_length_value,\n        item_weight_unit,\n        item_weight_value,\n        item_width_unit,\n        item_width_value,\n        package_height_unit,\n        package_height_value,\n        package_length_unit,\n        package_length_value,\n        package_weight_unit,\n        package_weight_value,\n        package_width_unit,\n        package_width_value\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_amazon_selling_partner__item_dimension_base", "package": null, "version": null}, {"name": "stg_amazon_selling_partner__item_dimension_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.amazon_selling_partner.get_item_dimension_columns", "macro.fivetran_utils.fill_staging_columns", "macro.amazon_selling_partner.amazon_selling_partner_apply_source_relation"], "nodes": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_dimension_base"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/stg_amazon_selling_partner__item_dimension.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_dimension_base`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    asin\n    \n as \n    \n    asin\n    \n, \n    \n    \n    item_height_unit\n    \n as \n    \n    item_height_unit\n    \n, \n    \n    \n    item_height_value\n    \n as \n    \n    item_height_value\n    \n, \n    \n    \n    item_length_unit\n    \n as \n    \n    item_length_unit\n    \n, \n    \n    \n    item_length_value\n    \n as \n    \n    item_length_value\n    \n, \n    \n    \n    item_weight_unit\n    \n as \n    \n    item_weight_unit\n    \n, \n    \n    \n    item_weight_value\n    \n as \n    \n    item_weight_value\n    \n, \n    \n    \n    item_width_unit\n    \n as \n    \n    item_width_unit\n    \n, \n    \n    \n    item_width_value\n    \n as \n    \n    item_width_value\n    \n, \n    \n    \n    marketplace_id\n    \n as \n    \n    marketplace_id\n    \n, \n    \n    \n    package_height_unit\n    \n as \n    \n    package_height_unit\n    \n, \n    \n    \n    package_height_value\n    \n as \n    \n    package_height_value\n    \n, \n    \n    \n    package_length_unit\n    \n as \n    \n    package_length_unit\n    \n, \n    \n    \n    package_length_value\n    \n as \n    \n    package_length_value\n    \n, \n    \n    \n    package_weight_unit\n    \n as \n    \n    package_weight_unit\n    \n, \n    \n    \n    package_weight_value\n    \n as \n    \n    package_weight_value\n    \n, \n    \n    \n    package_width_unit\n    \n as \n    \n    package_width_unit\n    \n, \n    \n    \n    package_width_value\n    \n as \n    \n    package_width_value\n    \n\n\n\n        \n        \n, 'dbt-package-testing' || '.'|| 'asp_tests' as source_relation\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        _fivetran_synced,\n        asin,\n        marketplace_id,\n        item_height_unit,\n        item_height_value,\n        item_length_unit,\n        item_length_value,\n        item_weight_unit,\n        item_weight_value,\n        item_width_unit,\n        item_width_value,\n        package_height_unit,\n        package_height_value,\n        package_length_unit,\n        package_length_value,\n        package_weight_unit,\n        package_weight_value,\n        package_width_unit,\n        package_width_value\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["asin", "marketplace_id", "source_relation"], "time_spine": null}, "model.amazon_selling_partner.stg_amazon_selling_partner__orders": {"database": "dbt-package-testing", "schema": "asp_tests_amazon_selling_partner_dev", "name": "stg_amazon_selling_partner__orders", "resource_type": "model", "package_name": "amazon_selling_partner", "path": "staging/stg_amazon_selling_partner__orders.sql", "original_file_path": "models/staging/stg_amazon_selling_partner__orders.sql", "unique_id": "model.amazon_selling_partner.stg_amazon_selling_partner__orders", "fqn": ["amazon_selling_partner", "staging", "stg_amazon_selling_partner__orders"], "alias": "stg_amazon_selling_partner__orders", "checksum": {"name": "sha256", "checksum": "54318489fa7633c8a31f26d77709fc29715986e934df3cf7e18d9dc8d38ac512"}, "config": {"enabled": true, "alias": null, "schema": "amazon_selling_partner_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Orders placed in Amazon.", "columns": {"source_relation": {"name": "source_relation", "description": "The `<database>`.`<schema>` this record came from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "amazon_order_id": {"name": "amazon_order_id", "description": "An Amazon-defined order identifier, in 3-7-7 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "automated_shipping_setting_automated_carrier": {"name": "automated_shipping_setting_automated_carrier", "description": "Auto-generated carrier for SSA orders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "automated_shipping_setting_automated_ship_method": {"name": "automated_shipping_setting_automated_ship_method", "description": "Auto-generated ship method for SSA orders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "automated_shipping_setting_has_automated_shipping_settings": {"name": "automated_shipping_setting_has_automated_shipping_settings", "description": "When true, this order has automated shipping settings generated by Amazon. This order could be identified as an SSA order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "buyer_info_purchase_order_number": {"name": "buyer_info_purchase_order_number", "description": "The purchase order (PO) number entered by the buyer at checkout. Only returned for orders where the buyer entered a PO number at checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "earliest_delivery_date": {"name": "earliest_delivery_date", "description": "The start of the time period within which you have committed to fulfill the order. In ISO 8601 date time format. Only returned for seller-fulfilled orders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "earliest_ship_date": {"name": "earliest_ship_date", "description": "The start of the time period within which you have committed to ship the order. In ISO 8601 date time format. Only returned for seller-fulfilled orders. Note: EarliestShipDate might not be returned for orders placed before February 1, 2013.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "easy_ship_shipment_status": {"name": "easy_ship_shipment_status", "description": "The status of the Amazon Easy Ship order. This property is only included for Amazon Easy Ship orders. Possible values can be found [here](https://developer-docs.amazon.com/sp-api/docs/orders-api-v0-reference#easyshipshipmentstatus).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "electronic_invoice_status": {"name": "electronic_invoice_status", "description": "The status of the electronic invoice. Only available for Easy Ship orders and orders in the BR marketplace. Possible values can be found [here](https://developer-docs.amazon.com/sp-api/docs/orders-api-v0-reference#electronicinvoicestatus).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fulfillment_channel": {"name": "fulfillment_channel", "description": "Whether the order was fulfilled by Amazon (AFN) or by the seller (MFN).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fulfillment_supply_source_id": {"name": "fulfillment_supply_source_id", "description": "The sourceId of the location from where you want the order fulfilled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "has_regulated_items": {"name": "has_regulated_items", "description": "Whether the order contains regulated items which may require additional approval steps before being fulfilled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_access_point_order": {"name": "is_access_point_order", "description": "When true, this order is marked to be delivered to an Access Point. The access location is chosen by the customer. Access Points include Amazon Hub Lockers, Amazon Hub Counters, and pickup points operated by carriers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_business_order": {"name": "is_business_order", "description": "When true, the order is an Amazon Business order. An Amazon Business order is an order where the buyer is a Verified Business Buyer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_estimated_ship_date_set": {"name": "is_estimated_ship_date_set", "description": "When true, the estimated ship date is set for the order. Only returned for Sourcing on Demand orders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_global_express_enabled": {"name": "is_global_express_enabled", "description": "When true, the order is a GlobalExpress order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_iba": {"name": "is_iba", "description": "When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_ispu": {"name": "is_ispu", "description": "When true, this order is marked to be picked up from a store rather than delivered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_premium_order": {"name": "is_premium_order", "description": "When true, the order has a Premium Shipping Service Level Agreement. For more information about Premium Shipping orders, refer to \"Premium Shipping Options\" in the Seller Central Help for your marketplace.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_prime": {"name": "is_prime", "description": "When true, the order is a seller-fulfilled Amazon Prime order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_replacement_order": {"name": "is_replacement_order", "description": "When true, this is a replacement order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_sold_by_ab": {"name": "is_sold_by_ab", "description": "When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "last_update_date": {"name": "last_update_date", "description": "The date when the order was last updated. Note: LastUpdateDate is returned with an incorrect date for orders that were last updated before 2009-04-01.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "latest_delivery_date": {"name": "latest_delivery_date", "description": "The end of the time period within which you have committed to fulfill the order. In ISO 8601 date time format. Only returned for seller-fulfilled orders that do not have a PendingAvailability, Pending, or Canceled status.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "latest_ship_date": {"name": "latest_ship_date", "description": "The end of the time period within which you have committed to ship the order. In ISO 8601 date time format. Only returned for seller-fulfilled orders. Note: LatestShipDate might not be returned for orders placed before February 1, 2013.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketplace_id": {"name": "marketplace_id", "description": "The unobfuscated marketplace identifier. Different marketplace values can be found [here](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "number_of_items_shipped": {"name": "number_of_items_shipped", "description": "The number of items shipped for the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "number_of_items_unshipped": {"name": "number_of_items_unshipped", "description": "The number of items unshipped for the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_channel": {"name": "order_channel", "description": "The order channel for the first item in the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_status": {"name": "order_status", "description": "The current order status. Possible values can be found [here](https://developer-docs.amazon.com/sp-api/docs/orders-api-v0-reference#orderstatus).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_total_amount": {"name": "order_total_amount", "description": "The total charge for this order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_total_currency_code": {"name": "order_total_currency_code", "description": "The three-digit currency code in which the order total is measured. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_type": {"name": "order_type", "description": "The order's type. Possible values can be found [here](https://developer-docs.amazon.com/sp-api/docs/orders-api-v0-reference#ordertype).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "payment_method": {"name": "payment_method", "description": "The payment method for the order. This property is limited to COD and CVS payment methods. Unless you need the specific COD payment information provided by the PaymentExecutionDetailItem object, Amazon recommends using the PaymentMethodDetails table to get payment method information.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "promise_response_due_date": {"name": "promise_response_due_date", "description": "Indicates the date by which the seller must respond to the buyer with an estimated ship date. Only returned for Sourcing on Demand orders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "purchase_date": {"name": "purchase_date", "description": "The date when the order was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "replaced_order_id": {"name": "replaced_order_id", "description": "The order ID value for the order that is being replaced. Returned only if IsReplacementOrder = true.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sales_channel": {"name": "sales_channel", "description": "The sales channel for the first item in the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "seller_order_id": {"name": "seller_order_id", "description": "An order identifier that is specified by the seller. Used to select only the orders that match the order identifier. If SellerOrderId is specified, then FulfillmentChannels, OrderStatuses, PaymentMethod, LastUpdatedAfter, LastUpdatedBefore, and BuyerEmail cannot be specified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ship_service_level": {"name": "ship_service_level", "description": "The order's shipment service level.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipment_service_level_category": {"name": "shipment_service_level_category", "description": "The shipment service level category for the order. Possible values: Expedited, FreeEconomy, NextDay, Priority, SameDay, SecondDay, Scheduled, and Standard.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_address_line_1": {"name": "default_ship_from_location_address_line_1", "description": "Street address of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_address_line_2": {"name": "default_ship_from_location_address_line_2", "description": "Additional street address information of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_address_line_3": {"name": "default_ship_from_location_address_line_3", "description": "Additional street address informatio of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_address_type": {"name": "default_ship_from_location_address_type", "description": "Address type of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_city": {"name": "default_ship_from_location_city", "description": "City of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_country_code": {"name": "default_ship_from_location_country_code", "description": "Country code (two-character country code, in ISO 3166-1 alpha-2 format.) of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_county": {"name": "default_ship_from_location_county", "description": "County of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_district": {"name": "default_ship_from_location_district", "description": "District of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_municipality": {"name": "default_ship_from_location_municipality", "description": "Municipality of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_name": {"name": "default_ship_from_location_name", "description": "Name of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_phone": {"name": "default_ship_from_location_phone", "description": "Associated phone number of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.\n\nNote: In some cases, the buyer phone number is suppressed:\na. Phone is suppressed for all AFN (fulfilled by Amazon) orders.\nb. Phone is suppressed for the shipped MFN (fulfilled by seller) order when the current date is past the Latest Delivery Date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_postal_code": {"name": "default_ship_from_location_postal_code", "description": "Postal code of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_state_or_region": {"name": "default_ship_from_location_state_or_region", "description": "State or region of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_address_type": {"name": "shipping_address_address_type", "description": "Address type of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_city": {"name": "shipping_address_city", "description": "City of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_country_code": {"name": "shipping_address_country_code", "description": "Country code (two-character country code, in ISO 3166-1 alpha-2 format) of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_county": {"name": "shipping_address_county", "description": "County of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_district": {"name": "shipping_address_district", "description": "District of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_municipality": {"name": "shipping_address_municipality", "description": "Municipality of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_postal_code": {"name": "shipping_address_postal_code", "description": "Postal code of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_state_or_region": {"name": "shipping_address_state_or_region", "description": "State or region of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "amazon_selling_partner://models/staging/stg_amazon_selling_partner.yml", "build_path": null, "unrendered_config": {"schema": "amazon_selling_partner_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1743628945.6375759, "relation_name": "`dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__orders`", "raw_code": "{{ config(enabled=var('amazon_selling_partner__using_orders_module', true)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_amazon_selling_partner__orders_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_amazon_selling_partner__orders_base')),\n                staging_columns=get_orders_columns()\n            )\n        }}\n        \n        {{ amazon_selling_partner_apply_source_relation() }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        amazon_order_id,\n        marketplace_id,\n        replaced_order_id,\n        seller_order_id,\n        buyer_info_purchase_order_number,\n        purchase_date,\n        sales_channel,\n        order_channel,\n        order_type,\n        order_status,\n        payment_method,\n        {{ amazon_selling_partner.convert_string_to_numeric('order_total_amount') }} as order_total_amount,\n        order_total_currency_code,\n        promise_response_due_date,\n        last_update_date,\n        latest_delivery_date,\n        latest_ship_date,\n        number_of_items_shipped,\n        number_of_items_unshipped,\n        earliest_delivery_date,\n        earliest_ship_date,\n        easy_ship_shipment_status,\n        electronic_invoice_status,\n        fulfillment_channel,\n        fulfillment_supply_source_id,\n        has_regulated_items,\n        is_access_point_order,\n        is_business_order,\n        is_estimated_ship_date_set,\n        is_global_express_enabled,\n        is_iba,\n        is_ispu,\n        is_premium_order,\n        is_prime,\n        is_replacement_order,\n        is_sold_by_ab,\n        ship_service_level,\n        shipment_service_level_category,\n        automated_shipping_setting_automated_carrier,\n        automated_shipping_setting_automated_ship_method,\n        automated_shipping_setting_has_automated_shipping_settings,\n        default_ship_from_location_address_line_1,\n        default_ship_from_location_address_line_2,\n        default_ship_from_location_address_line_3,\n        default_ship_from_location_address_type,\n        default_ship_from_location_city,\n        default_ship_from_location_country_code,\n        default_ship_from_location_county,\n        default_ship_from_location_district,\n        default_ship_from_location_municipality,\n        default_ship_from_location_name,\n        default_ship_from_location_phone,\n        default_ship_from_location_postal_code,\n        default_ship_from_location_state_or_region,\n        \n        {# Shipping address lines 1-3 are restricted by Amazon due to being PII #}\n        shipping_address_address_type,\n        shipping_address_city,\n        shipping_address_country_code,\n        shipping_address_county,\n        shipping_address_district,\n        shipping_address_municipality,\n        shipping_address_postal_code,\n        shipping_address_state_or_region\n\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_amazon_selling_partner__orders_base", "package": null, "version": null}, {"name": "stg_amazon_selling_partner__orders_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.amazon_selling_partner.get_orders_columns", "macro.fivetran_utils.fill_staging_columns", "macro.amazon_selling_partner.amazon_selling_partner_apply_source_relation", "macro.amazon_selling_partner.convert_string_to_numeric"], "nodes": ["model.amazon_selling_partner.stg_amazon_selling_partner__orders_base"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/stg_amazon_selling_partner__orders.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__orders_base`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    amazon_order_id\n    \n as \n    \n    amazon_order_id\n    \n, \n    \n    \n    automated_shipping_setting_automated_carrier\n    \n as \n    \n    automated_shipping_setting_automated_carrier\n    \n, \n    \n    \n    automated_shipping_setting_automated_ship_method\n    \n as \n    \n    automated_shipping_setting_automated_ship_method\n    \n, \n    \n    \n    automated_shipping_setting_has_automated_shipping_settings\n    \n as \n    \n    automated_shipping_setting_has_automated_shipping_settings\n    \n, \n    \n    \n    buyer_info_buyer_email\n    \n as \n    \n    buyer_info_buyer_email\n    \n, \n    \n    \n    buyer_info_buyer_name\n    \n as \n    \n    buyer_info_buyer_name\n    \n, \n    \n    \n    buyer_info_purchase_order_number\n    \n as \n    \n    buyer_info_purchase_order_number\n    \n, \n    \n    \n    default_ship_from_location_address_line_1\n    \n as \n    \n    default_ship_from_location_address_line_1\n    \n, \n    \n    \n    default_ship_from_location_address_line_2\n    \n as \n    \n    default_ship_from_location_address_line_2\n    \n, \n    \n    \n    default_ship_from_location_address_line_3\n    \n as \n    \n    default_ship_from_location_address_line_3\n    \n, \n    \n    \n    default_ship_from_location_address_type\n    \n as \n    \n    default_ship_from_location_address_type\n    \n, \n    \n    \n    default_ship_from_location_city\n    \n as \n    \n    default_ship_from_location_city\n    \n, \n    \n    \n    default_ship_from_location_country_code\n    \n as \n    \n    default_ship_from_location_country_code\n    \n, \n    \n    \n    default_ship_from_location_county\n    \n as \n    \n    default_ship_from_location_county\n    \n, \n    \n    \n    default_ship_from_location_district\n    \n as \n    \n    default_ship_from_location_district\n    \n, \n    \n    \n    default_ship_from_location_municipality\n    \n as \n    \n    default_ship_from_location_municipality\n    \n, \n    \n    \n    default_ship_from_location_name\n    \n as \n    \n    default_ship_from_location_name\n    \n, \n    \n    \n    default_ship_from_location_phone\n    \n as \n    \n    default_ship_from_location_phone\n    \n, \n    \n    \n    default_ship_from_location_postal_code\n    \n as \n    \n    default_ship_from_location_postal_code\n    \n, \n    \n    \n    default_ship_from_location_state_or_region\n    \n as \n    \n    default_ship_from_location_state_or_region\n    \n, \n    \n    \n    earliest_delivery_date\n    \n as \n    \n    earliest_delivery_date\n    \n, \n    \n    \n    earliest_ship_date\n    \n as \n    \n    earliest_ship_date\n    \n, \n    \n    \n    easy_ship_shipment_status\n    \n as \n    \n    easy_ship_shipment_status\n    \n, \n    \n    \n    electronic_invoice_status\n    \n as \n    \n    electronic_invoice_status\n    \n, \n    \n    \n    fulfillment_channel\n    \n as \n    \n    fulfillment_channel\n    \n, \n    \n    \n    fulfillment_supply_source_id\n    \n as \n    \n    fulfillment_supply_source_id\n    \n, \n    \n    \n    has_regulated_items\n    \n as \n    \n    has_regulated_items\n    \n, \n    \n    \n    is_access_point_order\n    \n as \n    \n    is_access_point_order\n    \n, \n    \n    \n    is_business_order\n    \n as \n    \n    is_business_order\n    \n, \n    \n    \n    is_estimated_ship_date_set\n    \n as \n    \n    is_estimated_ship_date_set\n    \n, \n    \n    \n    is_global_express_enabled\n    \n as \n    \n    is_global_express_enabled\n    \n, \n    \n    \n    is_iba\n    \n as \n    \n    is_iba\n    \n, \n    \n    \n    is_ispu\n    \n as \n    \n    is_ispu\n    \n, \n    \n    \n    is_premium_order\n    \n as \n    \n    is_premium_order\n    \n, \n    \n    \n    is_prime\n    \n as \n    \n    is_prime\n    \n, \n    \n    \n    is_replacement_order\n    \n as \n    \n    is_replacement_order\n    \n, \n    \n    \n    is_sold_by_ab\n    \n as \n    \n    is_sold_by_ab\n    \n, \n    \n    \n    last_update_date\n    \n as \n    \n    last_update_date\n    \n, \n    \n    \n    latest_delivery_date\n    \n as \n    \n    latest_delivery_date\n    \n, \n    \n    \n    latest_ship_date\n    \n as \n    \n    latest_ship_date\n    \n, \n    \n    \n    marketplace_id\n    \n as \n    \n    marketplace_id\n    \n, \n    \n    \n    number_of_items_shipped\n    \n as \n    \n    number_of_items_shipped\n    \n, \n    \n    \n    number_of_items_unshipped\n    \n as \n    \n    number_of_items_unshipped\n    \n, \n    \n    \n    order_channel\n    \n as \n    \n    order_channel\n    \n, \n    \n    \n    order_status\n    \n as \n    \n    order_status\n    \n, \n    \n    \n    order_total_amount\n    \n as \n    \n    order_total_amount\n    \n, \n    \n    \n    order_total_currency_code\n    \n as \n    \n    order_total_currency_code\n    \n, \n    \n    \n    order_type\n    \n as \n    \n    order_type\n    \n, \n    \n    \n    payment_method\n    \n as \n    \n    payment_method\n    \n, \n    \n    \n    promise_response_due_date\n    \n as \n    \n    promise_response_due_date\n    \n, \n    \n    \n    purchase_date\n    \n as \n    \n    purchase_date\n    \n, \n    \n    \n    replaced_order_id\n    \n as \n    \n    replaced_order_id\n    \n, \n    \n    \n    sales_channel\n    \n as \n    \n    sales_channel\n    \n, \n    \n    \n    seller_order_id\n    \n as \n    \n    seller_order_id\n    \n, \n    \n    \n    ship_service_level\n    \n as \n    \n    ship_service_level\n    \n, \n    \n    \n    shipment_service_level_category\n    \n as \n    \n    shipment_service_level_category\n    \n, \n    \n    \n    shipping_address_address_line_1\n    \n as \n    \n    shipping_address_address_line_1\n    \n, \n    \n    \n    shipping_address_address_line_2\n    \n as \n    \n    shipping_address_address_line_2\n    \n, \n    \n    \n    shipping_address_address_line_3\n    \n as \n    \n    shipping_address_address_line_3\n    \n, \n    \n    \n    shipping_address_address_type\n    \n as \n    \n    shipping_address_address_type\n    \n, \n    \n    \n    shipping_address_city\n    \n as \n    \n    shipping_address_city\n    \n, \n    \n    \n    shipping_address_country_code\n    \n as \n    \n    shipping_address_country_code\n    \n, \n    \n    \n    shipping_address_county\n    \n as \n    \n    shipping_address_county\n    \n, \n    \n    \n    shipping_address_district\n    \n as \n    \n    shipping_address_district\n    \n, \n    \n    \n    shipping_address_municipality\n    \n as \n    \n    shipping_address_municipality\n    \n, \n    \n    \n    shipping_address_name\n    \n as \n    \n    shipping_address_name\n    \n, \n    \n    \n    shipping_address_phone\n    \n as \n    \n    shipping_address_phone\n    \n, \n    \n    \n    shipping_address_postal_code\n    \n as \n    \n    shipping_address_postal_code\n    \n, \n    \n    \n    shipping_address_state_or_region\n    \n as \n    \n    shipping_address_state_or_region\n    \n\n\n\n        \n        \n, 'dbt-package-testing' || '.'|| 'asp_tests' as source_relation\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        amazon_order_id,\n        marketplace_id,\n        replaced_order_id,\n        seller_order_id,\n        buyer_info_purchase_order_number,\n        purchase_date,\n        sales_channel,\n        order_channel,\n        order_type,\n        order_status,\n        payment_method,\n        cast(REGEXP_EXTRACT(REPLACE(order_total_amount, ',', ''), r'-?\\d+(?:\\.\\d+)?') as numeric) as order_total_amount,\n        order_total_currency_code,\n        promise_response_due_date,\n        last_update_date,\n        latest_delivery_date,\n        latest_ship_date,\n        number_of_items_shipped,\n        number_of_items_unshipped,\n        earliest_delivery_date,\n        earliest_ship_date,\n        easy_ship_shipment_status,\n        electronic_invoice_status,\n        fulfillment_channel,\n        fulfillment_supply_source_id,\n        has_regulated_items,\n        is_access_point_order,\n        is_business_order,\n        is_estimated_ship_date_set,\n        is_global_express_enabled,\n        is_iba,\n        is_ispu,\n        is_premium_order,\n        is_prime,\n        is_replacement_order,\n        is_sold_by_ab,\n        ship_service_level,\n        shipment_service_level_category,\n        automated_shipping_setting_automated_carrier,\n        automated_shipping_setting_automated_ship_method,\n        automated_shipping_setting_has_automated_shipping_settings,\n        default_ship_from_location_address_line_1,\n        default_ship_from_location_address_line_2,\n        default_ship_from_location_address_line_3,\n        default_ship_from_location_address_type,\n        default_ship_from_location_city,\n        default_ship_from_location_country_code,\n        default_ship_from_location_county,\n        default_ship_from_location_district,\n        default_ship_from_location_municipality,\n        default_ship_from_location_name,\n        default_ship_from_location_phone,\n        default_ship_from_location_postal_code,\n        default_ship_from_location_state_or_region,\n        \n        \n        shipping_address_address_type,\n        shipping_address_city,\n        shipping_address_country_code,\n        shipping_address_county,\n        shipping_address_district,\n        shipping_address_municipality,\n        shipping_address_postal_code,\n        shipping_address_state_or_region\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["amazon_order_id", "source_relation"], "time_spine": null}, "model.amazon_selling_partner.stg_amazon_selling_partner__item_relationship": {"database": "dbt-package-testing", "schema": "asp_tests_amazon_selling_partner_dev", "name": "stg_amazon_selling_partner__item_relationship", "resource_type": "model", "package_name": "amazon_selling_partner", "path": "staging/stg_amazon_selling_partner__item_relationship.sql", "original_file_path": "models/staging/stg_amazon_selling_partner__item_relationship.sql", "unique_id": "model.amazon_selling_partner.stg_amazon_selling_partner__item_relationship", "fqn": ["amazon_selling_partner", "staging", "stg_amazon_selling_partner__item_relationship"], "alias": "stg_amazon_selling_partner__item_relationship", "checksum": {"name": "sha256", "checksum": "6c09698eb442f730e9de39ab99b0375bd40c421f871b3e5907609838ce7afa8a"}, "config": {"enabled": true, "alias": null, "schema": "amazon_selling_partner_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Relationship details for an Amazon catalog item.", "columns": {"source_relation": {"name": "source_relation", "description": "The `<database>`.`<schema>` this record came from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "child_asin": {"name": "child_asin", "description": "Identifiers (ASIN) of the related item that is a child of this item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "parent_asin": {"name": "parent_asin", "description": "Identifiers (ASIN) of the related item that is a parent of this item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "type": {"name": "type", "description": "Type of relationship. [Possible values](https://developer-docs.amazon.com/sp-api/docs/catalog-items-api-v2022-04-01-reference#type) are `VARIATION` (the Amazon catalog item in the request is a variation parent or variation child of the related item(s) indicated by ASIN) or `PACKAGE_HIERARCHY` (the Amazon catalog item in the request is a package container or is contained by the related item(s) indicated by ASIN).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "UTC timestamp of when the row was last successfully synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "amazon_selling_partner://models/staging/stg_amazon_selling_partner.yml", "build_path": null, "unrendered_config": {"schema": "amazon_selling_partner_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1743628945.690502, "relation_name": "`dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_relationship`", "raw_code": "{{ config(enabled=var('amazon_selling_partner__using_catalog_module', true)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_amazon_selling_partner__item_relationship_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_amazon_selling_partner__item_relationship_base')),\n                staging_columns=get_item_relationship_columns()\n            )\n        }}\n        \n        {{ amazon_selling_partner_apply_source_relation() }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        _fivetran_synced,\n        child_asin,\n        parent_asin,\n        upper(type) as type\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_amazon_selling_partner__item_relationship_base", "package": null, "version": null}, {"name": "stg_amazon_selling_partner__item_relationship_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.amazon_selling_partner.get_item_relationship_columns", "macro.fivetran_utils.fill_staging_columns", "macro.amazon_selling_partner.amazon_selling_partner_apply_source_relation"], "nodes": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_relationship_base"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/stg_amazon_selling_partner__item_relationship.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_relationship_base`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    child_asin\n    \n as \n    \n    child_asin\n    \n, \n    \n    \n    parent_asin\n    \n as \n    \n    parent_asin\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n        \n        \n, 'dbt-package-testing' || '.'|| 'asp_tests' as source_relation\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        _fivetran_synced,\n        child_asin,\n        parent_asin,\n        upper(type) as type\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["child_asin", "parent_asin", "source_relation", "type"], "time_spine": null}, "model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_summary": {"database": "dbt-package-testing", "schema": "asp_tests_amazon_selling_partner_dev", "name": "stg_amazon_selling_partner__fba_inventory_summary", "resource_type": "model", "package_name": "amazon_selling_partner", "path": "staging/stg_amazon_selling_partner__fba_inventory_summary.sql", "original_file_path": "models/staging/stg_amazon_selling_partner__fba_inventory_summary.sql", "unique_id": "model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_summary", "fqn": ["amazon_selling_partner", "staging", "stg_amazon_selling_partner__fba_inventory_summary"], "alias": "stg_amazon_selling_partner__fba_inventory_summary", "checksum": {"name": "sha256", "checksum": "6b8c04667d518d1ef04c16979fee701d4d84ce76287bdca977c557760f14decb"}, "config": {"enabled": true, "alias": null, "schema": "amazon_selling_partner_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Inventory summary for a specific item.", "columns": {"source_relation": {"name": "source_relation", "description": "The `<database>`.`<schema>` this record came from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inventory_summary_id": {"name": "inventory_summary_id", "description": "Fivetran-generated Primary Key for inventory summaries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "asin": {"name": "asin", "description": "The item's Amazon Standard Identification Number (ASIN).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "granularity_id": {"name": "granularity_id", "description": "The granularity ID for the specified granularity type. When granularityType is Marketplace, specify the marketplaceId.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "granularity_type": {"name": "granularity_type", "description": "The granularity type for the inventory aggregation level.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "carrier_damaged_quantity": {"name": "carrier_damaged_quantity", "description": "The number of units in carrier damaged disposition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "condition": {"name": "condition", "description": "The condition of the item as described by the seller (for example, New Item).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_damaged_quantity": {"name": "customer_damaged_quantity", "description": "The number of units in customer damaged disposition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "defective_quantity": {"name": "defective_quantity", "description": "The number of units in defective disposition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "distributor_damaged_quantity": {"name": "distributor_damaged_quantity", "description": "The number of units in distributor damaged disposition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "expired_quantity": {"name": "expired_quantity", "description": "The number of units in expired disposition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fc_processing_quantity": {"name": "fc_processing_quantity", "description": "The number of units that have been sidelined at the fulfillment center for additional processing.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fn_sku": {"name": "fn_sku", "description": "Amazon's fulfillment network SKU identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fullfillable_quantity": {"name": "fullfillable_quantity", "description": "The item quantity that can be picked, packed, and shipped.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inblound_shipped_quantity": {"name": "inblound_shipped_quantity", "description": "The number of units in an inbound shipment that you have notified Amazon about and have provided a tracking number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inbound_receiving_quantity": {"name": "inbound_receiving_quantity", "description": "The number of units that have not yet been received at an Amazon fulfillment center for processing, but are part of an inbound shipment with some units that have already been received and processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inbound_working_quantity": {"name": "inbound_working_quantity", "description": "The number of units in an inbound shipment for which you have notified Amazon.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "last_updated_at": {"name": "last_updated_at", "description": "The date and time that any quantity was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pending_customer_order_quantity": {"name": "pending_customer_order_quantity", "description": "The number of units reserved for customer orders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pending_transshipment_quantity": {"name": "pending_transshipment_quantity", "description": "The number of units being transferred from one fulfillment center to another.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_name": {"name": "product_name", "description": "The localized language product title of the item within the specific marketplace.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "seller_sku": {"name": "seller_sku", "description": "The item's seller stock keeping unit (SKU).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_quantity": {"name": "total_quantity", "description": "The total number of units in an inbound shipment or in Amazon fulfillment centers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_researching_quantity": {"name": "total_researching_quantity", "description": "The total number of units in Amazon's fulfillment network that are currently being picked, packed, and shipped; or are sidelined for measurement, sampling, or other internal processes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_reserved_quantity": {"name": "total_reserved_quantity", "description": "The total number of units in Amazon's fulfillment network that are currently being picked, packed, and shipped; or are sidelined for measurement, sampling, or other internal processes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_unfulfillable_quantity": {"name": "total_unfulfillable_quantity", "description": "The total number of units in Amazon's fulfillment network in unsellable condition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "warehouse_damaged_quantity": {"name": "warehouse_damaged_quantity", "description": "The number of units in warehouse damaged disposition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "amazon_selling_partner://models/staging/stg_amazon_selling_partner.yml", "build_path": null, "unrendered_config": {"schema": "amazon_selling_partner_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1743628945.691542, "relation_name": "`dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__fba_inventory_summary`", "raw_code": "{{ config(enabled=var('amazon_selling_partner__using_fba_module', true)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_amazon_selling_partner__fba_inventory_summary_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_amazon_selling_partner__fba_inventory_summary_base')),\n                staging_columns=get_fba_inventory_summary_columns()\n            )\n        }}\n        \n        {{ amazon_selling_partner_apply_source_relation() }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        _fivetran_id as inventory_summary_id,\n        asin,\n        fn_sku,\n        seller_sku,\n        product_name,\n        condition,\n        last_updated_time as last_updated_at,\n        total_quantity,\n        total_researching_quantity,\n        total_reserved_quantity,\n        fullfillable_quantity,\n        total_unfulfillable_quantity,\n        pending_customer_order_quantity,\n        pending_transshipment_quantity,\n        fc_processing_quantity,\n        inblound_shipped_quantity,\n        inbound_receiving_quantity,\n        inbound_working_quantity,\n        warehouse_damaged_quantity,\n        carrier_damaged_quantity,\n        customer_damaged_quantity,\n        defective_quantity,\n        distributor_damaged_quantity,\n        expired_quantity,\n        granularity_id,\n        granularity_type\n\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_amazon_selling_partner__fba_inventory_summary_base", "package": null, "version": null}, {"name": "stg_amazon_selling_partner__fba_inventory_summary_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.amazon_selling_partner.get_fba_inventory_summary_columns", "macro.fivetran_utils.fill_staging_columns", "macro.amazon_selling_partner.amazon_selling_partner_apply_source_relation"], "nodes": ["model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_summary_base"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/stg_amazon_selling_partner__fba_inventory_summary.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__fba_inventory_summary_base`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    asin\n    \n as \n    \n    asin\n    \n, \n    \n    \n    carrier_damaged_quantity\n    \n as \n    \n    carrier_damaged_quantity\n    \n, \n    \n    \n    condition\n    \n as \n    \n    condition\n    \n, \n    \n    \n    customer_damaged_quantity\n    \n as \n    \n    customer_damaged_quantity\n    \n, \n    \n    \n    defective_quantity\n    \n as \n    \n    defective_quantity\n    \n, \n    \n    \n    distributor_damaged_quantity\n    \n as \n    \n    distributor_damaged_quantity\n    \n, \n    \n    \n    expired_quantity\n    \n as \n    \n    expired_quantity\n    \n, \n    \n    \n    fc_processing_quantity\n    \n as \n    \n    fc_processing_quantity\n    \n, \n    \n    \n    fn_sku\n    \n as \n    \n    fn_sku\n    \n, \n    \n    \n    fullfillable_quantity\n    \n as \n    \n    fullfillable_quantity\n    \n, \n    \n    \n    granularity_id\n    \n as \n    \n    granularity_id\n    \n, \n    \n    \n    granularity_type\n    \n as \n    \n    granularity_type\n    \n, \n    \n    \n    inblound_shipped_quantity\n    \n as \n    \n    inblound_shipped_quantity\n    \n, \n    \n    \n    inbound_receiving_quantity\n    \n as \n    \n    inbound_receiving_quantity\n    \n, \n    \n    \n    inbound_working_quantity\n    \n as \n    \n    inbound_working_quantity\n    \n, \n    \n    \n    last_updated_time\n    \n as \n    \n    last_updated_time\n    \n, \n    \n    \n    pending_customer_order_quantity\n    \n as \n    \n    pending_customer_order_quantity\n    \n, \n    \n    \n    pending_transshipment_quantity\n    \n as \n    \n    pending_transshipment_quantity\n    \n, \n    \n    \n    product_name\n    \n as \n    \n    product_name\n    \n, \n    \n    \n    seller_sku\n    \n as \n    \n    seller_sku\n    \n, \n    \n    \n    total_quantity\n    \n as \n    \n    total_quantity\n    \n, \n    \n    \n    total_researching_quantity\n    \n as \n    \n    total_researching_quantity\n    \n, \n    \n    \n    total_reserved_quantity\n    \n as \n    \n    total_reserved_quantity\n    \n, \n    \n    \n    total_unfulfillable_quantity\n    \n as \n    \n    total_unfulfillable_quantity\n    \n, \n    \n    \n    warehouse_damaged_quantity\n    \n as \n    \n    warehouse_damaged_quantity\n    \n\n\n\n        \n        \n, 'dbt-package-testing' || '.'|| 'asp_tests' as source_relation\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        _fivetran_id as inventory_summary_id,\n        asin,\n        fn_sku,\n        seller_sku,\n        product_name,\n        condition,\n        last_updated_time as last_updated_at,\n        total_quantity,\n        total_researching_quantity,\n        total_reserved_quantity,\n        fullfillable_quantity,\n        total_unfulfillable_quantity,\n        pending_customer_order_quantity,\n        pending_transshipment_quantity,\n        fc_processing_quantity,\n        inblound_shipped_quantity,\n        inbound_receiving_quantity,\n        inbound_working_quantity,\n        warehouse_damaged_quantity,\n        carrier_damaged_quantity,\n        customer_damaged_quantity,\n        defective_quantity,\n        distributor_damaged_quantity,\n        expired_quantity,\n        granularity_id,\n        granularity_type\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["inventory_summary_id", "source_relation"], "time_spine": null}, "model.amazon_selling_partner.stg_amazon_selling_partner__item_classification_sales_rank": {"database": "dbt-package-testing", "schema": "asp_tests_amazon_selling_partner_dev", "name": "stg_amazon_selling_partner__item_classification_sales_rank", "resource_type": "model", "package_name": "amazon_selling_partner", "path": "staging/stg_amazon_selling_partner__item_classification_sales_rank.sql", "original_file_path": "models/staging/stg_amazon_selling_partner__item_classification_sales_rank.sql", "unique_id": "model.amazon_selling_partner.stg_amazon_selling_partner__item_classification_sales_rank", "fqn": ["amazon_selling_partner", "staging", "stg_amazon_selling_partner__item_classification_sales_rank"], "alias": "stg_amazon_selling_partner__item_classification_sales_rank", "checksum": {"name": "sha256", "checksum": "8d406cf9563cac284dbad53e23375e21338c9d04ecf2ddaeec99f94d699bffe0"}, "config": {"enabled": true, "alias": null, "schema": "amazon_selling_partner_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Sales rank of an Amazon catalog item by classification.", "columns": {"source_relation": {"name": "source_relation", "description": "The `<database>`.`<schema>` this record came from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "asin": {"name": "asin", "description": "The item's Amazon Standard Identification Number (ASIN).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "classification_id": {"name": "classification_id", "description": "Identifier of the classification associated with the sales rank.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "Title, or name, of the sales rank.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "link": {"name": "link", "description": "Corresponding Amazon retail website link, or URL, for the sales rank.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rank": {"name": "rank", "description": "Sales rank value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "UTC timestamp of when the row was last successfully synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "amazon_selling_partner://models/staging/stg_amazon_selling_partner.yml", "build_path": null, "unrendered_config": {"schema": "amazon_selling_partner_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1743628945.6430469, "relation_name": "`dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_classification_sales_rank`", "raw_code": "{{ config(enabled=var('amazon_selling_partner__using_catalog_module', true)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_amazon_selling_partner__item_classification_sales_rank_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_amazon_selling_partner__item_classification_sales_rank_base')),\n                staging_columns=get_item_classification_sales_rank_columns()\n            )\n        }}\n        \n        {{ amazon_selling_partner_apply_source_relation() }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        _fivetran_synced,\n        asin,\n        classification_id,\n        link,\n        rank,\n        title\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_amazon_selling_partner__item_classification_sales_rank_base", "package": null, "version": null}, {"name": "stg_amazon_selling_partner__item_classification_sales_rank_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.amazon_selling_partner.get_item_classification_sales_rank_columns", "macro.fivetran_utils.fill_staging_columns", "macro.amazon_selling_partner.amazon_selling_partner_apply_source_relation"], "nodes": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_classification_sales_rank_base"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/stg_amazon_selling_partner__item_classification_sales_rank.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_classification_sales_rank_base`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    asin\n    \n as \n    \n    asin\n    \n, \n    \n    \n    classification_id\n    \n as \n    \n    classification_id\n    \n, \n    \n    \n    link\n    \n as \n    \n    link\n    \n, \n    \n    \n    rank\n    \n as \n    \n    rank\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n\n\n\n        \n        \n, 'dbt-package-testing' || '.'|| 'asp_tests' as source_relation\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        _fivetran_synced,\n        asin,\n        classification_id,\n        link,\n        rank,\n        title\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["asin", "classification_id", "source_relation"], "time_spine": null}, "model.amazon_selling_partner.stg_amazon_selling_partner__item_display_group_sales_rank": {"database": "dbt-package-testing", "schema": "asp_tests_amazon_selling_partner_dev", "name": "stg_amazon_selling_partner__item_display_group_sales_rank", "resource_type": "model", "package_name": "amazon_selling_partner", "path": "staging/stg_amazon_selling_partner__item_display_group_sales_rank.sql", "original_file_path": "models/staging/stg_amazon_selling_partner__item_display_group_sales_rank.sql", "unique_id": "model.amazon_selling_partner.stg_amazon_selling_partner__item_display_group_sales_rank", "fqn": ["amazon_selling_partner", "staging", "stg_amazon_selling_partner__item_display_group_sales_rank"], "alias": "stg_amazon_selling_partner__item_display_group_sales_rank", "checksum": {"name": "sha256", "checksum": "b657bce3fd844e27b5c085c4741bb5d95333073f15deca84c5b538f26b8e743a"}, "config": {"enabled": true, "alias": null, "schema": "amazon_selling_partner_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Sales rank of an Amazon catalog item by website display group.", "columns": {"source_relation": {"name": "source_relation", "description": "The `<database>`.`<schema>` this record came from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "asin": {"name": "asin", "description": "The item's Amazon Standard Identification Number (ASIN).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "website_display_group": {"name": "website_display_group", "description": "Identifier of the website display group associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "Title, or name, of the sales rank.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "link": {"name": "link", "description": "Corresponding Amazon retail website link, or URL, for the sales rank.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rank": {"name": "rank", "description": "Sales rank value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "UTC timestamp of when the row was last successfully synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "amazon_selling_partner://models/staging/stg_amazon_selling_partner.yml", "build_path": null, "unrendered_config": {"schema": "amazon_selling_partner_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1743628945.642634, "relation_name": "`dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_display_group_sales_rank`", "raw_code": "{{ config(enabled=var('amazon_selling_partner__using_catalog_module', true)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_amazon_selling_partner__item_display_group_sales_rank_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_amazon_selling_partner__item_display_group_sales_rank_base')),\n                staging_columns=get_item_display_group_sales_rank_columns()\n            )\n        }}\n        \n        {{ amazon_selling_partner_apply_source_relation() }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        _fivetran_synced,\n        asin,\n        link,\n        rank,\n        title,\n        website_display_group\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_amazon_selling_partner__item_display_group_sales_rank_base", "package": null, "version": null}, {"name": "stg_amazon_selling_partner__item_display_group_sales_rank_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.amazon_selling_partner.get_item_display_group_sales_rank_columns", "macro.fivetran_utils.fill_staging_columns", "macro.amazon_selling_partner.amazon_selling_partner_apply_source_relation"], "nodes": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_display_group_sales_rank_base"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/stg_amazon_selling_partner__item_display_group_sales_rank.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_display_group_sales_rank_base`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    asin\n    \n as \n    \n    asin\n    \n, \n    \n    \n    link\n    \n as \n    \n    link\n    \n, \n    \n    \n    rank\n    \n as \n    \n    rank\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    website_display_group\n    \n as \n    \n    website_display_group\n    \n\n\n\n        \n        \n, 'dbt-package-testing' || '.'|| 'asp_tests' as source_relation\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        _fivetran_synced,\n        asin,\n        link,\n        rank,\n        title,\n        website_display_group\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["asin", "source_relation", "website_display_group"], "time_spine": null}, "model.amazon_selling_partner.stg_amazon_selling_partner__order_item_promotion_id": {"database": "dbt-package-testing", "schema": "asp_tests_amazon_selling_partner_dev", "name": "stg_amazon_selling_partner__order_item_promotion_id", "resource_type": "model", "package_name": "amazon_selling_partner", "path": "staging/stg_amazon_selling_partner__order_item_promotion_id.sql", "original_file_path": "models/staging/stg_amazon_selling_partner__order_item_promotion_id.sql", "unique_id": "model.amazon_selling_partner.stg_amazon_selling_partner__order_item_promotion_id", "fqn": ["amazon_selling_partner", "staging", "stg_amazon_selling_partner__order_item_promotion_id"], "alias": "stg_amazon_selling_partner__order_item_promotion_id", "checksum": {"name": "sha256", "checksum": "9295288cee459a118a534a7eb45341335670528e7a123c224cfe9404821faae7"}, "config": {"enabled": true, "alias": null, "schema": "amazon_selling_partner_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Table associating order items and any promotions used on them.", "columns": {"source_relation": {"name": "source_relation", "description": "The `<database>`.`<schema>` this record came from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "promotion_id": {"name": "promotion_id", "description": "Promotion identifier provided by the seller when the promotion was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "amazon_order_id": {"name": "amazon_order_id", "description": "An Amazon-defined order identifier, in 3-7-7 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_item_id": {"name": "order_item_id", "description": "An Amazon-defined item identifier for the associated item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "amazon_selling_partner://models/staging/stg_amazon_selling_partner.yml", "build_path": null, "unrendered_config": {"schema": "amazon_selling_partner_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1743628945.639143, "relation_name": "`dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__order_item_promotion_id`", "raw_code": "{{ config(enabled=var('amazon_selling_partner__using_orders_module', true)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_amazon_selling_partner__order_item_promotion_id_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_amazon_selling_partner__order_item_promotion_id_base')),\n                staging_columns=get_order_item_promotion_id_columns()\n            )\n        }}\n        \n        {{ amazon_selling_partner_apply_source_relation() }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        amazon_order_id,\n        order_item_id,\n        promotion_id\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_amazon_selling_partner__order_item_promotion_id_base", "package": null, "version": null}, {"name": "stg_amazon_selling_partner__order_item_promotion_id_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.amazon_selling_partner.get_order_item_promotion_id_columns", "macro.fivetran_utils.fill_staging_columns", "macro.amazon_selling_partner.amazon_selling_partner_apply_source_relation"], "nodes": ["model.amazon_selling_partner.stg_amazon_selling_partner__order_item_promotion_id_base"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/stg_amazon_selling_partner__order_item_promotion_id.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__order_item_promotion_id_base`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    amazon_order_id\n    \n as \n    \n    amazon_order_id\n    \n, \n    \n    \n    order_item_id\n    \n as \n    \n    order_item_id\n    \n, \n    \n    \n    promotion_id\n    \n as \n    \n    promotion_id\n    \n\n\n\n        \n        \n, 'dbt-package-testing' || '.'|| 'asp_tests' as source_relation\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        amazon_order_id,\n        order_item_id,\n        promotion_id\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["amazon_order_id", "order_item_id", "promotion_id", "source_relation"], "time_spine": null}, "model.amazon_selling_partner.stg_amazon_selling_partner__item_summary": {"database": "dbt-package-testing", "schema": "asp_tests_amazon_selling_partner_dev", "name": "stg_amazon_selling_partner__item_summary", "resource_type": "model", "package_name": "amazon_selling_partner", "path": "staging/stg_amazon_selling_partner__item_summary.sql", "original_file_path": "models/staging/stg_amazon_selling_partner__item_summary.sql", "unique_id": "model.amazon_selling_partner.stg_amazon_selling_partner__item_summary", "fqn": ["amazon_selling_partner", "staging", "stg_amazon_selling_partner__item_summary"], "alias": "stg_amazon_selling_partner__item_summary", "checksum": {"name": "sha256", "checksum": "756353c035fb4e2a9b4b3d0f2f2e48d88764ec9e544e2f453e088f4b72fa58ad"}, "config": {"enabled": true, "alias": null, "schema": "amazon_selling_partner_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Summary details of an Amazon catalog item for the indicated Amazon marketplace.", "columns": {"source_relation": {"name": "source_relation", "description": "The `<database>`.`<schema>` this record came from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "asin": {"name": "asin", "description": "The item's Amazon Standard Identification Number (ASIN).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketplace_id": {"name": "marketplace_id", "description": "The unobfuscated marketplace identifier. Different marketplace values can be found [here](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_adult_product": {"name": "is_adult_product", "description": "Identifies an Amazon catalog item is intended for an adult audience or is sexual in nature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_autographed": {"name": "is_autographed", "description": "Identifies an Amazon catalog item is autographed by a player or celebrity.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "brand": {"name": "brand", "description": "Name of the brand associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "display_name": {"name": "display_name", "description": "Display name for the classification.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "classification_id": {"name": "classification_id", "description": "Identifier of the classification associated with the sales rank.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "color": {"name": "color", "description": "Name of the color associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "contributors": {"name": "contributors", "description": "Individual contributors to the creation of an item, such as the authors or actors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_classification": {"name": "item_classification", "description": "Classification type associated with the Amazon catalog item. Possible values can be found [here](https://developer-docs.amazon.com/sp-api/docs/catalog-items-api-v2022-04-01-reference#itemclassification).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_name": {"name": "item_name", "description": "Name, or title, associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "manufacturer": {"name": "manufacturer", "description": "Name of the manufacturer associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_memorabilia": {"name": "is_memorabilia", "description": "Identifies an Amazon catalog item is memorabilia valued for its connection with historical events, culture, or entertainment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "model_number": {"name": "model_number", "description": "Model number associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "package_quantity": {"name": "package_quantity", "description": "Quantity of an Amazon catalog item in one package.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "part_number": {"name": "part_number", "description": "Part number associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "release_date": {"name": "release_date", "description": "First date on which an Amazon catalog item is shippable to customers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "size": {"name": "size", "description": "Name of the size associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "style": {"name": "style", "description": "Name of the style associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_trade_in_eligible": {"name": "is_trade_in_eligible", "description": "Identifies an Amazon catalog item is eligible for trade-in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "website_display_group": {"name": "website_display_group", "description": "Identifier of the website display group associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "website_display_group_name": {"name": "website_display_group_name", "description": "Display name of the website display group associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "UTC timestamp of when the row was last successfully synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "amazon_selling_partner://models/staging/stg_amazon_selling_partner.yml", "build_path": null, "unrendered_config": {"schema": "amazon_selling_partner_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1743628945.6422, "relation_name": "`dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_summary`", "raw_code": "{{ config(enabled=var('amazon_selling_partner__using_catalog_module', true)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_amazon_selling_partner__item_summary_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_amazon_selling_partner__item_summary_base')),\n                staging_columns=get_item_summary_columns()\n            )\n        }}\n        \n        {{ amazon_selling_partner_apply_source_relation() }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        _fivetran_synced,\n        adult_product as is_adult_product,\n        asin,\n        autographed as is_autographed,\n        brand,\n        classification_id,\n        color,\n        contributors,\n        display_name,\n        item_classification,\n        item_name,\n        manufacturer,\n        marketplace_id,\n        memorabilia as is_memorabilia,\n        model_number,\n        package_quantity,\n        part_number,\n        release_date,\n        size,\n        style,\n        trade_in_eligible as is_trade_in_eligible,\n        website_display_group,\n        website_display_group_name\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_amazon_selling_partner__item_summary_base", "package": null, "version": null}, {"name": "stg_amazon_selling_partner__item_summary_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.amazon_selling_partner.get_item_summary_columns", "macro.fivetran_utils.fill_staging_columns", "macro.amazon_selling_partner.amazon_selling_partner_apply_source_relation"], "nodes": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_summary_base"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/stg_amazon_selling_partner__item_summary.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_summary_base`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    adult_product\n    \n as \n    \n    adult_product\n    \n, \n    \n    \n    asin\n    \n as \n    \n    asin\n    \n, \n    \n    \n    autographed\n    \n as \n    \n    autographed\n    \n, \n    \n    \n    brand\n    \n as \n    \n    brand\n    \n, \n    \n    \n    classification_id\n    \n as \n    \n    classification_id\n    \n, \n    \n    \n    color\n    \n as \n    \n    color\n    \n, \n    \n    \n    contributors\n    \n as \n    \n    contributors\n    \n, \n    \n    \n    display_name\n    \n as \n    \n    display_name\n    \n, \n    \n    \n    item_classification\n    \n as \n    \n    item_classification\n    \n, \n    \n    \n    item_name\n    \n as \n    \n    item_name\n    \n, \n    \n    \n    manufacturer\n    \n as \n    \n    manufacturer\n    \n, \n    \n    \n    marketplace_id\n    \n as \n    \n    marketplace_id\n    \n, \n    \n    \n    memorabilia\n    \n as \n    \n    memorabilia\n    \n, \n    \n    \n    model_number\n    \n as \n    \n    model_number\n    \n, \n    \n    \n    package_quantity\n    \n as \n    \n    package_quantity\n    \n, \n    \n    \n    part_number\n    \n as \n    \n    part_number\n    \n, \n    \n    \n    release_date\n    \n as \n    \n    release_date\n    \n, \n    \n    \n    size\n    \n as \n    \n    size\n    \n, \n    \n    \n    style\n    \n as \n    \n    style\n    \n, \n    \n    \n    trade_in_eligible\n    \n as \n    \n    trade_in_eligible\n    \n, \n    \n    \n    website_display_group\n    \n as \n    \n    website_display_group\n    \n, \n    \n    \n    website_display_group_name\n    \n as \n    \n    website_display_group_name\n    \n\n\n\n        \n        \n, 'dbt-package-testing' || '.'|| 'asp_tests' as source_relation\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        _fivetran_synced,\n        adult_product as is_adult_product,\n        asin,\n        autographed as is_autographed,\n        brand,\n        classification_id,\n        color,\n        contributors,\n        display_name,\n        item_classification,\n        item_name,\n        manufacturer,\n        marketplace_id,\n        memorabilia as is_memorabilia,\n        model_number,\n        package_quantity,\n        part_number,\n        release_date,\n        size,\n        style,\n        trade_in_eligible as is_trade_in_eligible,\n        website_display_group,\n        website_display_group_name\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["asin", "marketplace_id", "source_relation"], "time_spine": null}, "model.amazon_selling_partner.stg_amazon_selling_partner__item_identifier": {"database": "dbt-package-testing", "schema": "asp_tests_amazon_selling_partner_dev", "name": "stg_amazon_selling_partner__item_identifier", "resource_type": "model", "package_name": "amazon_selling_partner", "path": "staging/stg_amazon_selling_partner__item_identifier.sql", "original_file_path": "models/staging/stg_amazon_selling_partner__item_identifier.sql", "unique_id": "model.amazon_selling_partner.stg_amazon_selling_partner__item_identifier", "fqn": ["amazon_selling_partner", "staging", "stg_amazon_selling_partner__item_identifier"], "alias": "stg_amazon_selling_partner__item_identifier", "checksum": {"name": "sha256", "checksum": "d8a8218cd07ddfa77e39162337e5284250cc4bf9b9120e686f47cf5217d4aa2b"}, "config": {"enabled": true, "alias": null, "schema": "amazon_selling_partner_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Identifier associated with the item in the Amazon catalog, such as a UPC or EAN identifier.", "columns": {"source_relation": {"name": "source_relation", "description": "The `<database>`.`<schema>` this record came from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "asin": {"name": "asin", "description": "The item's Amazon Standard Identification Number (ASIN).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketplace_id": {"name": "marketplace_id", "description": "The unobfuscated marketplace identifier. Different marketplace values can be found [here](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "identifier": {"name": "identifier", "description": "Type of identifier, such as UPC, EAN, or ISBN.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "identifier_type": {"name": "identifier_type", "description": "Type of product identifiers to search the Amazon catalog for. Possible values can be found [here](https://developer-docs.amazon.com/sp-api/docs/catalog-items-api-v2022-04-01-reference#identifierstype)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "UTC timestamp of when the row was last successfully synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "amazon_selling_partner://models/staging/stg_amazon_selling_partner.yml", "build_path": null, "unrendered_config": {"schema": "amazon_selling_partner_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1743628945.6900458, "relation_name": "`dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_identifier`", "raw_code": "{{ config(enabled=var('amazon_selling_partner__using_catalog_module', true)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_amazon_selling_partner__item_identifier_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_amazon_selling_partner__item_identifier_base')),\n                staging_columns=get_item_identifier_columns()\n            )\n        }}\n        \n        {{ amazon_selling_partner_apply_source_relation() }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        _fivetran_synced,\n        asin,\n        identifier,\n        identifier_type,\n        marketplace_id\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_amazon_selling_partner__item_identifier_base", "package": null, "version": null}, {"name": "stg_amazon_selling_partner__item_identifier_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.amazon_selling_partner.get_item_identifier_columns", "macro.fivetran_utils.fill_staging_columns", "macro.amazon_selling_partner.amazon_selling_partner_apply_source_relation"], "nodes": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_identifier_base"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/stg_amazon_selling_partner__item_identifier.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_identifier_base`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    asin\n    \n as \n    \n    asin\n    \n, \n    \n    \n    identifier\n    \n as \n    \n    identifier\n    \n, \n    \n    \n    identifier_type\n    \n as \n    \n    identifier_type\n    \n, \n    \n    \n    marketplace_id\n    \n as \n    \n    marketplace_id\n    \n\n\n\n        \n        \n, 'dbt-package-testing' || '.'|| 'asp_tests' as source_relation\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        _fivetran_synced,\n        asin,\n        identifier,\n        identifier_type,\n        marketplace_id\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["asin", "identifier_type", "marketplace_id", "source_relation"], "time_spine": null}, "model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_summary_base": {"database": "dbt-package-testing", "schema": "asp_tests_amazon_selling_partner_dev", "name": "stg_amazon_selling_partner__fba_inventory_summary_base", "resource_type": "model", "package_name": "amazon_selling_partner", "path": "staging/base/stg_amazon_selling_partner__fba_inventory_summary_base.sql", "original_file_path": "models/staging/base/stg_amazon_selling_partner__fba_inventory_summary_base.sql", "unique_id": "model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_summary_base", "fqn": ["amazon_selling_partner", "staging", "base", "stg_amazon_selling_partner__fba_inventory_summary_base"], "alias": "stg_amazon_selling_partner__fba_inventory_summary_base", "checksum": {"name": "sha256", "checksum": "b54fcd2c4016c29eafad1013bdedb28a8c623233f8c8727980df649e55eff74d"}, "config": {"enabled": true, "alias": null, "schema": "amazon_selling_partner_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "amazon_selling_partner_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1743628945.3614342, "relation_name": "`dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__fba_inventory_summary_base`", "raw_code": "{{ config(enabled=var('amazon_selling_partner__using_fba_module', true)) }}\n-- This model is only necessary when unioning multiple sources and will therefore be disabled when that is not the case\n\n{{\n    amazon_selling_partner.union_amazon_selling_partner_connections(\n        connection_dictionary=var('amazon_selling_partner_sources'), \n        single_source_name='amazon_selling_partner', \n        single_table_name='fba_inventory_summary'\n    )\n}}", "language": "sql", "refs": [], "sources": [["amazon_selling_partner", "fba_inventory_summary"], ["amazon_selling_partner", "fba_inventory_summary"]], "metrics": [], "depends_on": {"macros": ["macro.amazon_selling_partner.union_amazon_selling_partner_connections"], "nodes": ["source.amazon_selling_partner.amazon_selling_partner.fba_inventory_summary"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/base/stg_amazon_selling_partner__fba_inventory_summary_base.sql", "compiled": true, "compiled_code": "\n-- This model is only necessary when unioning multiple sources and will therefore be disabled when that is not the case\n\n\n\n\n\n\n    select\n            `_fivetran_id`,\n  `asin`,\n  `granularity_id`,\n  `granularity_type`,\n  `carrier_damaged_quantity`,\n  `condition`,\n  `customer_damaged_quantity`,\n  `defective_quantity`,\n  `distributor_damaged_quantity`,\n  `expired_quantity`,\n  `fc_processing_quantity`,\n  `fn_sku`,\n  `fullfillable_quantity`,\n  `inblound_shipped_quantity`,\n  `inbound_receiving_quantity`,\n  `inbound_working_quantity`,\n  `last_updated_time`,\n  `pending_customer_order_quantity`,\n  `pending_transshipment_quantity`,\n  `product_name`,\n  `seller_sku`,\n  `total_quantity`,\n  `total_researching_quantity`,\n  `total_reserved_quantity`,\n  `total_unfulfillable_quantity`,\n  `warehouse_damaged_quantity`\n        from `dbt-package-testing`.`asp_tests`.`fba_inventory_summary` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.amazon_selling_partner.stg_amazon_selling_partner__item_display_group_sales_rank_base": {"database": "dbt-package-testing", "schema": "asp_tests_amazon_selling_partner_dev", "name": "stg_amazon_selling_partner__item_display_group_sales_rank_base", "resource_type": "model", "package_name": "amazon_selling_partner", "path": "staging/base/stg_amazon_selling_partner__item_display_group_sales_rank_base.sql", "original_file_path": "models/staging/base/stg_amazon_selling_partner__item_display_group_sales_rank_base.sql", "unique_id": "model.amazon_selling_partner.stg_amazon_selling_partner__item_display_group_sales_rank_base", "fqn": ["amazon_selling_partner", "staging", "base", "stg_amazon_selling_partner__item_display_group_sales_rank_base"], "alias": "stg_amazon_selling_partner__item_display_group_sales_rank_base", "checksum": {"name": "sha256", "checksum": "5e6f873a17fcedcf63d8dbca3c659eac13f8bd0c05d9c78bdaf2ffaf378dd848"}, "config": {"enabled": true, "alias": null, "schema": "amazon_selling_partner_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "amazon_selling_partner_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1743628945.372541, "relation_name": "`dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_display_group_sales_rank_base`", "raw_code": "{{ config(enabled=var('amazon_selling_partner__using_catalog_module', true)) }}\n-- This model is only necessary when unioning multiple sources and will therefore be disabled when that is not the case\n\n{{\n    amazon_selling_partner.union_amazon_selling_partner_connections(\n        connection_dictionary=var('amazon_selling_partner_sources'), \n        single_source_name='amazon_selling_partner', \n        single_table_name='item_display_group_sales_rank'\n    )\n}}", "language": "sql", "refs": [], "sources": [["amazon_selling_partner", "item_display_group_sales_rank"], ["amazon_selling_partner", "item_display_group_sales_rank"]], "metrics": [], "depends_on": {"macros": ["macro.amazon_selling_partner.union_amazon_selling_partner_connections"], "nodes": ["source.amazon_selling_partner.amazon_selling_partner.item_display_group_sales_rank"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/base/stg_amazon_selling_partner__item_display_group_sales_rank_base.sql", "compiled": true, "compiled_code": "\n-- This model is only necessary when unioning multiple sources and will therefore be disabled when that is not the case\n\n\n\n\n\n\n    select\n            `asin`,\n  `website_display_group`,\n  `title`,\n  `link`,\n  `rank`,\n  `_fivetran_synced`\n        from `dbt-package-testing`.`asp_tests`.`item_display_group_sales_rank` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.amazon_selling_partner.stg_amazon_selling_partner__item_dimension_base": {"database": "dbt-package-testing", "schema": "asp_tests_amazon_selling_partner_dev", "name": "stg_amazon_selling_partner__item_dimension_base", "resource_type": "model", "package_name": "amazon_selling_partner", "path": "staging/base/stg_amazon_selling_partner__item_dimension_base.sql", "original_file_path": "models/staging/base/stg_amazon_selling_partner__item_dimension_base.sql", "unique_id": "model.amazon_selling_partner.stg_amazon_selling_partner__item_dimension_base", "fqn": ["amazon_selling_partner", "staging", "base", "stg_amazon_selling_partner__item_dimension_base"], "alias": "stg_amazon_selling_partner__item_dimension_base", "checksum": {"name": "sha256", "checksum": "cbbb55b120d138b92c4e05dedc84df32c8356c673c2dbed0e78bfe97ebcdc995"}, "config": {"enabled": true, "alias": null, "schema": "amazon_selling_partner_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "amazon_selling_partner_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1743628945.376346, "relation_name": "`dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_dimension_base`", "raw_code": "{{ config(enabled=var('amazon_selling_partner__using_catalog_module', true)) }}\n-- This model is only necessary when unioning multiple sources and will therefore be disabled when that is not the case\n\n{{\n    amazon_selling_partner.union_amazon_selling_partner_connections(\n        connection_dictionary=var('amazon_selling_partner_sources'), \n        single_source_name='amazon_selling_partner', \n        single_table_name='item_dimension'\n    )\n}}", "language": "sql", "refs": [], "sources": [["amazon_selling_partner", "item_dimension"], ["amazon_selling_partner", "item_dimension"]], "metrics": [], "depends_on": {"macros": ["macro.amazon_selling_partner.union_amazon_selling_partner_connections"], "nodes": ["source.amazon_selling_partner.amazon_selling_partner.item_dimension"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/base/stg_amazon_selling_partner__item_dimension_base.sql", "compiled": true, "compiled_code": "\n-- This model is only necessary when unioning multiple sources and will therefore be disabled when that is not the case\n\n\n\n\n\n\n    select\n            `asin`,\n  `marketplace_id`,\n  `item_height_unit`,\n  `item_height_value`,\n  `item_length_unit`,\n  `item_length_value`,\n  `item_weight_unit`,\n  `item_weight_value`,\n  `item_width_unit`,\n  `item_width_value`,\n  `package_height_unit`,\n  `package_height_value`,\n  `package_length_unit`,\n  `package_length_value`,\n  `package_weight_unit`,\n  `package_weight_value`,\n  `package_width_unit`,\n  `package_width_value`,\n  `_fivetran_synced`\n        from `dbt-package-testing`.`asp_tests`.`item_dimension` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.amazon_selling_partner.stg_amazon_selling_partner__payment_method_detail_item_base": {"database": "dbt-package-testing", "schema": "asp_tests_amazon_selling_partner_dev", "name": "stg_amazon_selling_partner__payment_method_detail_item_base", "resource_type": "model", "package_name": "amazon_selling_partner", "path": "staging/base/stg_amazon_selling_partner__payment_method_detail_item_base.sql", "original_file_path": "models/staging/base/stg_amazon_selling_partner__payment_method_detail_item_base.sql", "unique_id": "model.amazon_selling_partner.stg_amazon_selling_partner__payment_method_detail_item_base", "fqn": ["amazon_selling_partner", "staging", "base", "stg_amazon_selling_partner__payment_method_detail_item_base"], "alias": "stg_amazon_selling_partner__payment_method_detail_item_base", "checksum": {"name": "sha256", "checksum": "fd5fa096c5fde04edd18a5affe3361825670112c0dc5982d30c4d6573e69d891"}, "config": {"enabled": true, "alias": null, "schema": "amazon_selling_partner_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "amazon_selling_partner_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1743628945.380757, "relation_name": "`dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__payment_method_detail_item_base`", "raw_code": "{{ config(enabled=var('amazon_selling_partner__using_orders_module', true)) }}\n-- This model is only necessary when unioning multiple sources and will therefore be disabled when that is not the case\n\n{{\n    amazon_selling_partner.union_amazon_selling_partner_connections(\n        connection_dictionary=var('amazon_selling_partner_sources'), \n        single_source_name='amazon_selling_partner', \n        single_table_name='payment_method_detail_item'\n    )\n}}", "language": "sql", "refs": [], "sources": [["amazon_selling_partner", "payment_method_detail_item"], ["amazon_selling_partner", "payment_method_detail_item"]], "metrics": [], "depends_on": {"macros": ["macro.amazon_selling_partner.union_amazon_selling_partner_connections"], "nodes": ["source.amazon_selling_partner.amazon_selling_partner.payment_method_detail_item"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/base/stg_amazon_selling_partner__payment_method_detail_item_base.sql", "compiled": true, "compiled_code": "\n-- This model is only necessary when unioning multiple sources and will therefore be disabled when that is not the case\n\n\n\n\n\n\n    select\n            `amazon_order_id`,\n  `method`\n        from `dbt-package-testing`.`asp_tests`.`payment_method_detail_item` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.amazon_selling_partner.stg_amazon_selling_partner__item_product_type_base": {"database": "dbt-package-testing", "schema": "asp_tests_amazon_selling_partner_dev", "name": "stg_amazon_selling_partner__item_product_type_base", "resource_type": "model", "package_name": "amazon_selling_partner", "path": "staging/base/stg_amazon_selling_partner__item_product_type_base.sql", "original_file_path": "models/staging/base/stg_amazon_selling_partner__item_product_type_base.sql", "unique_id": "model.amazon_selling_partner.stg_amazon_selling_partner__item_product_type_base", "fqn": ["amazon_selling_partner", "staging", "base", "stg_amazon_selling_partner__item_product_type_base"], "alias": "stg_amazon_selling_partner__item_product_type_base", "checksum": {"name": "sha256", "checksum": "02913932c41276ca3fbda8a78129b4b5f2cf89a1e10aacb287f650f15e2ceaf9"}, "config": {"enabled": true, "alias": null, "schema": "amazon_selling_partner_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "amazon_selling_partner_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1743628945.384619, "relation_name": "`dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_product_type_base`", "raw_code": "{{ config(enabled=var('amazon_selling_partner__using_catalog_module', true)) }}\n-- This model is only necessary when unioning multiple sources and will therefore be disabled when that is not the case\n\n{{\n    amazon_selling_partner.union_amazon_selling_partner_connections(\n        connection_dictionary=var('amazon_selling_partner_sources'), \n        single_source_name='amazon_selling_partner', \n        single_table_name='item_product_type'\n    )\n}}", "language": "sql", "refs": [], "sources": [["amazon_selling_partner", "item_product_type"], ["amazon_selling_partner", "item_product_type"]], "metrics": [], "depends_on": {"macros": ["macro.amazon_selling_partner.union_amazon_selling_partner_connections"], "nodes": ["source.amazon_selling_partner.amazon_selling_partner.item_product_type"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/base/stg_amazon_selling_partner__item_product_type_base.sql", "compiled": true, "compiled_code": "\n-- This model is only necessary when unioning multiple sources and will therefore be disabled when that is not the case\n\n\n\n\n\n\n    select\n            `asin`,\n  `marketplace_id`,\n  `product_type`,\n  `_fivetran_synced`\n        from `dbt-package-testing`.`asp_tests`.`item_product_type` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.amazon_selling_partner.stg_amazon_selling_partner__orders_base": {"database": "dbt-package-testing", "schema": "asp_tests_amazon_selling_partner_dev", "name": "stg_amazon_selling_partner__orders_base", "resource_type": "model", "package_name": "amazon_selling_partner", "path": "staging/base/stg_amazon_selling_partner__orders_base.sql", "original_file_path": "models/staging/base/stg_amazon_selling_partner__orders_base.sql", "unique_id": "model.amazon_selling_partner.stg_amazon_selling_partner__orders_base", "fqn": ["amazon_selling_partner", "staging", "base", "stg_amazon_selling_partner__orders_base"], "alias": "stg_amazon_selling_partner__orders_base", "checksum": {"name": "sha256", "checksum": "3a4b66a19d16c148b354ae99aefe6e4ed764a1d1bb46140c7fc99567c5b3a26e"}, "config": {"enabled": true, "alias": null, "schema": "amazon_selling_partner_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "amazon_selling_partner_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1743628945.388389, "relation_name": "`dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__orders_base`", "raw_code": "{{ config(enabled=var('amazon_selling_partner__using_orders_module', true)) }}\n-- This model is only necessary when unioning multiple sources and will therefore be disabled when that is not the case\n\n{{\n    amazon_selling_partner.union_amazon_selling_partner_connections(\n        connection_dictionary=var('amazon_selling_partner_sources'), \n        single_source_name='amazon_selling_partner', \n        single_table_name='orders'\n    )\n}}", "language": "sql", "refs": [], "sources": [["amazon_selling_partner", "orders"], ["amazon_selling_partner", "orders"]], "metrics": [], "depends_on": {"macros": ["macro.amazon_selling_partner.union_amazon_selling_partner_connections"], "nodes": ["source.amazon_selling_partner.amazon_selling_partner.orders"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/base/stg_amazon_selling_partner__orders_base.sql", "compiled": true, "compiled_code": "\n-- This model is only necessary when unioning multiple sources and will therefore be disabled when that is not the case\n\n\n\n\n\n\n    select\n            `amazon_order_id`,\n  `automated_shipping_setting_automated_carrier`,\n  `automated_shipping_setting_automated_ship_method`,\n  `automated_shipping_setting_has_automated_shipping_settings`,\n  `buyer_info_buyer_email`,\n  `buyer_info_buyer_county`,\n  `buyer_info_buyer_name`,\n  `buyer_info_purchase_order_number`,\n  `buyer_invoice_preference`,\n  `buyer_tax_info_buyer_business_address`,\n  `buyer_tax_info_buyer_legal_company_name`,\n  `buyer_tax_info_buyer_tax_office`,\n  `buyer_tax_info_buyer_tax_registration_id`,\n  `cba_displayable_shipping_label`,\n  `earliest_delivery_date`,\n  `earliest_ship_date`,\n  `easy_ship_shipment_status`,\n  `electronic_invoice_status`,\n  `fulfillment_channel`,\n  `fulfillment_supply_source_id`,\n  `has_regulated_items`,\n  `is_access_point_order`,\n  `is_business_order`,\n  `is_estimated_ship_date_set`,\n  `is_global_express_enabled`,\n  `is_iba`,\n  `is_ispu`,\n  `is_premium_order`,\n  `is_prime`,\n  `is_replacement_order`,\n  `is_sold_by_ab`,\n  `last_update_date`,\n  `latest_delivery_date`,\n  `latest_ship_date`,\n  `marketplace_id`,\n  `number_of_items_shipped`,\n  `number_of_items_unshipped`,\n  `order_channel`,\n  `order_status`,\n  `order_total_amount`,\n  `order_total_currency_code`,\n  `order_type`,\n  `payment_method`,\n  `promise_response_due_date`,\n  `purchase_date`,\n  `replaced_order_id`,\n  `sales_channel`,\n  `seller_display_name`,\n  `seller_order_id`,\n  `ship_service_level`,\n  `shipment_service_level_category`,\n  `default_ship_from_location_address_line_1`,\n  `default_ship_from_location_address_line_2`,\n  `default_ship_from_location_address_line_3`,\n  `default_ship_from_location_address_type`,\n  `default_ship_from_location_city`,\n  `default_ship_from_location_country_code`,\n  `default_ship_from_location_county`,\n  `default_ship_from_location_district`,\n  `default_ship_from_location_municipality`,\n  `default_ship_from_location_name`,\n  `default_ship_from_location_phone`,\n  `default_ship_from_location_postal_code`,\n  `default_ship_from_location_state_or_region`,\n  `shipping_address_address_line_1`,\n  `shipping_address_address_line_2`,\n  `shipping_address_address_line_3`,\n  `shipping_address_address_type`,\n  `shipping_address_city`,\n  `shipping_address_country_code`,\n  `shipping_address_county`,\n  `shipping_address_district`,\n  `shipping_address_municipality`,\n  `shipping_address_name`,\n  `shipping_address_phone`,\n  `shipping_address_postal_code`,\n  `shipping_address_state_or_region`\n        from `dbt-package-testing`.`asp_tests`.`orders` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.amazon_selling_partner.stg_amazon_selling_partner__item_summary_base": {"database": "dbt-package-testing", "schema": "asp_tests_amazon_selling_partner_dev", "name": "stg_amazon_selling_partner__item_summary_base", "resource_type": "model", "package_name": "amazon_selling_partner", "path": "staging/base/stg_amazon_selling_partner__item_summary_base.sql", "original_file_path": "models/staging/base/stg_amazon_selling_partner__item_summary_base.sql", "unique_id": "model.amazon_selling_partner.stg_amazon_selling_partner__item_summary_base", "fqn": ["amazon_selling_partner", "staging", "base", "stg_amazon_selling_partner__item_summary_base"], "alias": "stg_amazon_selling_partner__item_summary_base", "checksum": {"name": "sha256", "checksum": "887c45a897483f48b7904c40e3bda23dd8869108e6064b846b88361358921450"}, "config": {"enabled": true, "alias": null, "schema": "amazon_selling_partner_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "amazon_selling_partner_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1743628945.392231, "relation_name": "`dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_summary_base`", "raw_code": "{{ config(enabled=var('amazon_selling_partner__using_catalog_module', true)) }}\n-- This model is only necessary when unioning multiple sources and will therefore be disabled when that is not the case\n\n{{\n    amazon_selling_partner.union_amazon_selling_partner_connections(\n        connection_dictionary=var('amazon_selling_partner_sources'), \n        single_source_name='amazon_selling_partner', \n        single_table_name='item_summary'\n    )\n}}", "language": "sql", "refs": [], "sources": [["amazon_selling_partner", "item_summary"], ["amazon_selling_partner", "item_summary"]], "metrics": [], "depends_on": {"macros": ["macro.amazon_selling_partner.union_amazon_selling_partner_connections"], "nodes": ["source.amazon_selling_partner.amazon_selling_partner.item_summary"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/base/stg_amazon_selling_partner__item_summary_base.sql", "compiled": true, "compiled_code": "\n-- This model is only necessary when unioning multiple sources and will therefore be disabled when that is not the case\n\n\n\n\n\n\n    select\n            `asin`,\n  `marketplace_id`,\n  `adult_product`,\n  `autographed`,\n  `brand`,\n  `display_name`,\n  `classification_id`,\n  `color`,\n  `contributors`,\n  `item_classification`,\n  `item_name`,\n  `manufacturer`,\n  `memorabilia`,\n  `model_number`,\n  `package_quantity`,\n  `part_number`,\n  `release_date`,\n  `size`,\n  `style`,\n  `trade_in_eligible`,\n  `website_display_group`,\n  `website_display_group_name`,\n  `_fivetran_synced`\n        from `dbt-package-testing`.`asp_tests`.`item_summary` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.amazon_selling_partner.stg_amazon_selling_partner__order_item_promotion_id_base": {"database": "dbt-package-testing", "schema": "asp_tests_amazon_selling_partner_dev", "name": "stg_amazon_selling_partner__order_item_promotion_id_base", "resource_type": "model", "package_name": "amazon_selling_partner", "path": "staging/base/stg_amazon_selling_partner__order_item_promotion_id_base.sql", "original_file_path": "models/staging/base/stg_amazon_selling_partner__order_item_promotion_id_base.sql", "unique_id": "model.amazon_selling_partner.stg_amazon_selling_partner__order_item_promotion_id_base", "fqn": ["amazon_selling_partner", "staging", "base", "stg_amazon_selling_partner__order_item_promotion_id_base"], "alias": "stg_amazon_selling_partner__order_item_promotion_id_base", "checksum": {"name": "sha256", "checksum": "bfc64a5e97c55e8094e524c39edb3c593fb86af3858a46dbe03b6d8d3c2cc47c"}, "config": {"enabled": true, "alias": null, "schema": "amazon_selling_partner_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "amazon_selling_partner_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1743628945.3961668, "relation_name": "`dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__order_item_promotion_id_base`", "raw_code": "{{ config(enabled=var('amazon_selling_partner__using_orders_module', true)) }}\n-- This model is only necessary when unioning multiple sources and will therefore be disabled when that is not the case\n\n{{\n    amazon_selling_partner.union_amazon_selling_partner_connections(\n        connection_dictionary=var('amazon_selling_partner_sources'), \n        single_source_name='amazon_selling_partner', \n        single_table_name='order_item_promotion_id'\n    )\n}}", "language": "sql", "refs": [], "sources": [["amazon_selling_partner", "order_item_promotion_id"], ["amazon_selling_partner", "order_item_promotion_id"]], "metrics": [], "depends_on": {"macros": ["macro.amazon_selling_partner.union_amazon_selling_partner_connections"], "nodes": ["source.amazon_selling_partner.amazon_selling_partner.order_item_promotion_id"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/base/stg_amazon_selling_partner__order_item_promotion_id_base.sql", "compiled": true, "compiled_code": "\n-- This model is only necessary when unioning multiple sources and will therefore be disabled when that is not the case\n\n\n\n\n\n\n    select\n            `promotion_id`,\n  `amazon_order_id`,\n  `order_item_id`\n        from `dbt-package-testing`.`asp_tests`.`order_item_promotion_id` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.amazon_selling_partner.stg_amazon_selling_partner__order_item_base": {"database": "dbt-package-testing", "schema": "asp_tests_amazon_selling_partner_dev", "name": "stg_amazon_selling_partner__order_item_base", "resource_type": "model", "package_name": "amazon_selling_partner", "path": "staging/base/stg_amazon_selling_partner__order_item_base.sql", "original_file_path": "models/staging/base/stg_amazon_selling_partner__order_item_base.sql", "unique_id": "model.amazon_selling_partner.stg_amazon_selling_partner__order_item_base", "fqn": ["amazon_selling_partner", "staging", "base", "stg_amazon_selling_partner__order_item_base"], "alias": "stg_amazon_selling_partner__order_item_base", "checksum": {"name": "sha256", "checksum": "d3568273f9c0b62dc9fe63ca32c3bec382a6191f21fef5be51683c3c091bf701"}, "config": {"enabled": true, "alias": null, "schema": "amazon_selling_partner_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "amazon_selling_partner_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1743628945.4006999, "relation_name": "`dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__order_item_base`", "raw_code": "{{ config(enabled=var('amazon_selling_partner__using_orders_module', true)) }}\n-- This model is only necessary when unioning multiple sources and will therefore be disabled when that is not the case\n\n{{\n    amazon_selling_partner.union_amazon_selling_partner_connections(\n        connection_dictionary=var('amazon_selling_partner_sources'), \n        single_source_name='amazon_selling_partner', \n        single_table_name='order_item'\n    )\n}}", "language": "sql", "refs": [], "sources": [["amazon_selling_partner", "order_item"], ["amazon_selling_partner", "order_item"]], "metrics": [], "depends_on": {"macros": ["macro.amazon_selling_partner.union_amazon_selling_partner_connections"], "nodes": ["source.amazon_selling_partner.amazon_selling_partner.order_item"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/base/stg_amazon_selling_partner__order_item_base.sql", "compiled": true, "compiled_code": "\n-- This model is only necessary when unioning multiple sources and will therefore be disabled when that is not the case\n\n\n\n\n\n\n    select\n            `order_item_id`,\n  `amazon_order_id`,\n  `is_gift`,\n  `is_transparency`,\n  `asin`,\n  `buyer_requested_cancel_is_buyer_requested_cancel`,\n  `buyer_requested_cancel_buyer_cancel_reason`,\n  `condition_id`,\n  `condition_note`,\n  `condition_subtype_id`,\n  `deemed_reseller_category`,\n  `ioss_number`,\n  `item_approval_context_approval_status`,\n  `item_approval_context_approval_type`,\n  `item_price_amount`,\n  `item_price_currency_code`,\n  `item_tax_amount`,\n  `item_tax_currencycode`,\n  `points_granted_monetary_amount`,\n  `points_granted_monetary_currency_code`,\n  `points_granted_points_number`,\n  `price_designation`,\n  `product_info_detail_number_of_items`,\n  `promotion_discount_amount`,\n  `promotion_discount_currency_code`,\n  `promotion_discount_tax_currency_code`,\n  `promotion_discount_tax_amount`,\n  `quantity_ordered`,\n  `quantity_shipped`,\n  `scheduled_delivery_end_date`,\n  `scheduled_delivery_start_date`,\n  `seller_sku`,\n  `serial_number_required`,\n  `shipping_discount_amount`,\n  `shipping_discount_currency_code`,\n  `shipping_discount_tax_amount`,\n  `shipping_discount_tax_currency_code`,\n  `shipping_price_amount`,\n  `shipping_price_currency_code`,\n  `shipping_tax_amount`,\n  `shipping_tax_currency_code`,\n  `store_chain_store_id`,\n  `tax_collection_model`,\n  `tax_collection_responsible_party`,\n  `title`\n        from `dbt-package-testing`.`asp_tests`.`order_item` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.amazon_selling_partner.stg_amazon_selling_partner__item_identifier_base": {"database": "dbt-package-testing", "schema": "asp_tests_amazon_selling_partner_dev", "name": "stg_amazon_selling_partner__item_identifier_base", "resource_type": "model", "package_name": "amazon_selling_partner", "path": "staging/base/stg_amazon_selling_partner__item_identifier_base.sql", "original_file_path": "models/staging/base/stg_amazon_selling_partner__item_identifier_base.sql", "unique_id": "model.amazon_selling_partner.stg_amazon_selling_partner__item_identifier_base", "fqn": ["amazon_selling_partner", "staging", "base", "stg_amazon_selling_partner__item_identifier_base"], "alias": "stg_amazon_selling_partner__item_identifier_base", "checksum": {"name": "sha256", "checksum": "1b3fc1562e2ca7d3c216e198d2b90a8966e27081bd214539398bf8221b510f7f"}, "config": {"enabled": true, "alias": null, "schema": "amazon_selling_partner_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "amazon_selling_partner_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1743628945.4044778, "relation_name": "`dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_identifier_base`", "raw_code": "{{ config(enabled=var('amazon_selling_partner__using_catalog_module', true)) }}\n-- This model is only necessary when unioning multiple sources and will therefore be disabled when that is not the case\n\n{{\n    amazon_selling_partner.union_amazon_selling_partner_connections(\n        connection_dictionary=var('amazon_selling_partner_sources'), \n        single_source_name='amazon_selling_partner', \n        single_table_name='item_identifier'\n    )\n}}", "language": "sql", "refs": [], "sources": [["amazon_selling_partner", "item_identifier"], ["amazon_selling_partner", "item_identifier"]], "metrics": [], "depends_on": {"macros": ["macro.amazon_selling_partner.union_amazon_selling_partner_connections"], "nodes": ["source.amazon_selling_partner.amazon_selling_partner.item_identifier"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/base/stg_amazon_selling_partner__item_identifier_base.sql", "compiled": true, "compiled_code": "\n-- This model is only necessary when unioning multiple sources and will therefore be disabled when that is not the case\n\n\n\n\n\n\n    select\n            `asin`,\n  `marketplace_id`,\n  `identifier`,\n  `identifier_type`,\n  `_fivetran_synced`\n        from `dbt-package-testing`.`asp_tests`.`item_identifier` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.amazon_selling_partner.stg_amazon_selling_partner__item_classification_sales_rank_base": {"database": "dbt-package-testing", "schema": "asp_tests_amazon_selling_partner_dev", "name": "stg_amazon_selling_partner__item_classification_sales_rank_base", "resource_type": "model", "package_name": "amazon_selling_partner", "path": "staging/base/stg_amazon_selling_partner__item_classification_sales_rank_base.sql", "original_file_path": "models/staging/base/stg_amazon_selling_partner__item_classification_sales_rank_base.sql", "unique_id": "model.amazon_selling_partner.stg_amazon_selling_partner__item_classification_sales_rank_base", "fqn": ["amazon_selling_partner", "staging", "base", "stg_amazon_selling_partner__item_classification_sales_rank_base"], "alias": "stg_amazon_selling_partner__item_classification_sales_rank_base", "checksum": {"name": "sha256", "checksum": "87bf9984394f11b079d0df7f1fb4df9af2acd49cdb4f128ca11731ca765596ce"}, "config": {"enabled": true, "alias": null, "schema": "amazon_selling_partner_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "amazon_selling_partner_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1743628945.408313, "relation_name": "`dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_classification_sales_rank_base`", "raw_code": "{{ config(enabled=var('amazon_selling_partner__using_catalog_module', true)) }}\n-- This model is only necessary when unioning multiple sources and will therefore be disabled when that is not the case\n\n{{\n    amazon_selling_partner.union_amazon_selling_partner_connections(\n        connection_dictionary=var('amazon_selling_partner_sources'), \n        single_source_name='amazon_selling_partner', \n        single_table_name='item_classification_sales_rank'\n    )\n}}", "language": "sql", "refs": [], "sources": [["amazon_selling_partner", "item_classification_sales_rank"], ["amazon_selling_partner", "item_classification_sales_rank"]], "metrics": [], "depends_on": {"macros": ["macro.amazon_selling_partner.union_amazon_selling_partner_connections"], "nodes": ["source.amazon_selling_partner.amazon_selling_partner.item_classification_sales_rank"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/base/stg_amazon_selling_partner__item_classification_sales_rank_base.sql", "compiled": true, "compiled_code": "\n-- This model is only necessary when unioning multiple sources and will therefore be disabled when that is not the case\n\n\n\n\n\n\n    select\n            `asin`,\n  `classification_id`,\n  `title`,\n  `link`,\n  `rank`,\n  `_fivetran_synced`\n        from `dbt-package-testing`.`asp_tests`.`item_classification_sales_rank` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.amazon_selling_partner.stg_amazon_selling_partner__item_relationship_base": {"database": "dbt-package-testing", "schema": "asp_tests_amazon_selling_partner_dev", "name": "stg_amazon_selling_partner__item_relationship_base", "resource_type": "model", "package_name": "amazon_selling_partner", "path": "staging/base/stg_amazon_selling_partner__item_relationship_base.sql", "original_file_path": "models/staging/base/stg_amazon_selling_partner__item_relationship_base.sql", "unique_id": "model.amazon_selling_partner.stg_amazon_selling_partner__item_relationship_base", "fqn": ["amazon_selling_partner", "staging", "base", "stg_amazon_selling_partner__item_relationship_base"], "alias": "stg_amazon_selling_partner__item_relationship_base", "checksum": {"name": "sha256", "checksum": "c9d57ec366bd57e1ee8ec074f53caee714331d7f33f6d86b75e0562f4a6fef4e"}, "config": {"enabled": true, "alias": null, "schema": "amazon_selling_partner_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "amazon_selling_partner_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1743628945.412106, "relation_name": "`dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_relationship_base`", "raw_code": "{{ config(enabled=var('amazon_selling_partner__using_catalog_module', true)) }}\n-- This model is only necessary when unioning multiple sources and will therefore be disabled when that is not the case\n\n{{\n    amazon_selling_partner.union_amazon_selling_partner_connections(\n        connection_dictionary=var('amazon_selling_partner_sources'), \n        single_source_name='amazon_selling_partner', \n        single_table_name='item_relationship'\n    )\n}}", "language": "sql", "refs": [], "sources": [["amazon_selling_partner", "item_relationship"], ["amazon_selling_partner", "item_relationship"]], "metrics": [], "depends_on": {"macros": ["macro.amazon_selling_partner.union_amazon_selling_partner_connections"], "nodes": ["source.amazon_selling_partner.amazon_selling_partner.item_relationship"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/base/stg_amazon_selling_partner__item_relationship_base.sql", "compiled": true, "compiled_code": "\n-- This model is only necessary when unioning multiple sources and will therefore be disabled when that is not the case\n\n\n\n\n\n\n    select\n            `child_asin`,\n  `parent_asin`,\n  `type`,\n  `_fivetran_synced`\n        from `dbt-package-testing`.`asp_tests`.`item_relationship` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.amazon_selling_partner.stg_amazon_selling_partner__item_image_base": {"database": "dbt-package-testing", "schema": "asp_tests_amazon_selling_partner_dev", "name": "stg_amazon_selling_partner__item_image_base", "resource_type": "model", "package_name": "amazon_selling_partner", "path": "staging/base/stg_amazon_selling_partner__item_image_base.sql", "original_file_path": "models/staging/base/stg_amazon_selling_partner__item_image_base.sql", "unique_id": "model.amazon_selling_partner.stg_amazon_selling_partner__item_image_base", "fqn": ["amazon_selling_partner", "staging", "base", "stg_amazon_selling_partner__item_image_base"], "alias": "stg_amazon_selling_partner__item_image_base", "checksum": {"name": "sha256", "checksum": "8db9f92a2606fece9a8521a43d28f3554aa9d4587f97385386a6ce4fa80d5876"}, "config": {"enabled": true, "alias": null, "schema": "amazon_selling_partner_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "amazon_selling_partner_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1743628945.416487, "relation_name": "`dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_image_base`", "raw_code": "{{ config(enabled=var('amazon_selling_partner__using_catalog_module', true)) }}\n-- This model is only necessary when unioning multiple sources and will therefore be disabled when that is not the case\n\n{{\n    amazon_selling_partner.union_amazon_selling_partner_connections(\n        connection_dictionary=var('amazon_selling_partner_sources'), \n        single_source_name='amazon_selling_partner', \n        single_table_name='item_image'\n    )\n}}", "language": "sql", "refs": [], "sources": [["amazon_selling_partner", "item_image"], ["amazon_selling_partner", "item_image"]], "metrics": [], "depends_on": {"macros": ["macro.amazon_selling_partner.union_amazon_selling_partner_connections"], "nodes": ["source.amazon_selling_partner.amazon_selling_partner.item_image"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/base/stg_amazon_selling_partner__item_image_base.sql", "compiled": true, "compiled_code": "\n-- This model is only necessary when unioning multiple sources and will therefore be disabled when that is not the case\n\n\n\n\n\n\n    select\n            `asin`,\n  `marketplace_id`,\n  `link`,\n  `variant`,\n  `height`,\n  `width`,\n  `_fivetran_synced`\n        from `dbt-package-testing`.`asp_tests`.`item_image` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_researching_base": {"database": "dbt-package-testing", "schema": "asp_tests_amazon_selling_partner_dev", "name": "stg_amazon_selling_partner__fba_inventory_researching_base", "resource_type": "model", "package_name": "amazon_selling_partner", "path": "staging/base/stg_amazon_selling_partner__fba_inventory_researching_base.sql", "original_file_path": "models/staging/base/stg_amazon_selling_partner__fba_inventory_researching_base.sql", "unique_id": "model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_researching_base", "fqn": ["amazon_selling_partner", "staging", "base", "stg_amazon_selling_partner__fba_inventory_researching_base"], "alias": "stg_amazon_selling_partner__fba_inventory_researching_base", "checksum": {"name": "sha256", "checksum": "bff8232035089a523d4a30c5848c56ff581952d116018188afcd39ddf9560c0f"}, "config": {"enabled": true, "alias": null, "schema": "amazon_selling_partner_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "amazon_selling_partner_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1743628945.420309, "relation_name": "`dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__fba_inventory_researching_base`", "raw_code": "{{ config(enabled=var('amazon_selling_partner__using_fba_module', true)) }}\n-- This model is only necessary when unioning multiple sources and will therefore be disabled when that is not the case\n\n{{\n    amazon_selling_partner.union_amazon_selling_partner_connections(\n        connection_dictionary=var('amazon_selling_partner_sources'), \n        single_source_name='amazon_selling_partner', \n        single_table_name='fba_inventory_researching_quantity_entry'\n    )\n}}", "language": "sql", "refs": [], "sources": [["amazon_selling_partner", "fba_inventory_researching_quantity_entry"], ["amazon_selling_partner", "fba_inventory_researching_quantity_entry"]], "metrics": [], "depends_on": {"macros": ["macro.amazon_selling_partner.union_amazon_selling_partner_connections"], "nodes": ["source.amazon_selling_partner.amazon_selling_partner.fba_inventory_researching_quantity_entry"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/base/stg_amazon_selling_partner__fba_inventory_researching_base.sql", "compiled": true, "compiled_code": "\n-- This model is only necessary when unioning multiple sources and will therefore be disabled when that is not the case\n\n\n\n\n\n\n    select\n            `inventory_summary_id`,\n  `name`,\n  `quantity`\n        from `dbt-package-testing`.`asp_tests`.`fba_inventory_researching_quantity_entry` as source_table\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.amazon_selling_partner.int_amazon_selling_partner__item": {"database": "dbt-package-testing", "schema": "asp_tests_amazon_selling_partner_dev", "name": "int_amazon_selling_partner__item", "resource_type": "model", "package_name": "amazon_selling_partner", "path": "intermediate/int_amazon_selling_partner__item.sql", "original_file_path": "models/intermediate/int_amazon_selling_partner__item.sql", "unique_id": "model.amazon_selling_partner.int_amazon_selling_partner__item", "fqn": ["amazon_selling_partner", "intermediate", "int_amazon_selling_partner__item"], "alias": "int_amazon_selling_partner__item", "checksum": {"name": "sha256", "checksum": "7c19c55a3e36d8e2c55426eaf94603d7e329168b7bc0d09f2c843d6df6e20661"}, "config": {"enabled": true, "alias": null, "schema": "amazon_selling_partner_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "amazon_selling_partner_{{ var('directed_schema','dev') }}", "materialized": "ephemeral", "enabled": true}, "created_at": 1743628945.4241412, "relation_name": null, "raw_code": "{{ config(enabled=var('amazon_selling_partner__using_catalog_module', true)) }}\n\nwith item_summary as (\n    select *\n    from {{ ref('stg_amazon_selling_partner__item_summary') }}\n),\n\nitem_product_type as (\n\n    select *\n    from {{ ref('stg_amazon_selling_partner__item_product_type') }} \n),\n\nitem_image as (\n\n    select *\n    from {{ ref('stg_amazon_selling_partner__item_image') }}\n),\n\nitem_images as (\n\n    select \n        source_relation,\n        asin,\n        marketplace_id,\n        count(*) as count_images,\n        sum(case when variant = 'SWATCH' then 1 else 0 end) as count_swatch_images\n\n    from item_image \n    group by 1,2,3\n),\n\nitem_display_group_sales_rank as (\n\n    select *\n    from {{ ref('stg_amazon_selling_partner__item_display_group_sales_rank') }} \n),\n\nitem_classification_sales_rank as (\n\n    select *\n    from {{ ref('stg_amazon_selling_partner__item_classification_sales_rank') }} \n),\n\nitem_relationship as (\n\n    select *\n    from {{ ref('stg_amazon_selling_partner__item_relationship') }} \n),\n\nparent_variation_relationship as (\n\n    select *\n    from item_relationship\n    where type = 'VARIATION'\n),\n\npackage_hierarchy_relationship as (\n\n    select *\n    from item_relationship\n    where type = 'PACKAGE_HIERARCHY'\n),\n\nitem_dimension as (\n\n    select *\n    from {{ ref('stg_amazon_selling_partner__item_dimension') }} \n),\n\nitem_identifier as (\n\n    select *\n    from {{ ref('stg_amazon_selling_partner__item_identifier') }} \n),\n\nitem_identifiers as (\n\n    select \n        asin,\n        source_relation,\n        marketplace_id\n        {# iterate over identifier types (from https://developer-docs.amazon.com/sp-api/docs/catalog-items-api-v2022-04-01-reference#identifierstype) that aren't already logged elsewhere (ASIN) #}\n        {% for identifier_type in ['SKU', 'EAN', 'GTIN', 'ISBN', 'JAN', 'MINSAN', 'UPC'] %}\n            , cast(max(case when identifier_type = '{{ identifier_type }}' then identifier end) as {{ dbt.type_string() }}) as {{ identifier_type | lower }}\n        {% endfor %}\n    from item_identifier\n    group by 1,2,3\n),\n\njoined as (\n\n    select \n        item_summary.source_relation,\n        item_summary.marketplace_id,\n        item_summary.asin,\n        item_summary.item_name,\n        item_summary.display_name,\n        item_summary.brand,\n        item_summary.color,\n        item_summary.size,\n        item_summary.style,\n        item_summary.package_quantity,\n        item_summary.manufacturer,\n        item_summary.contributors,\n        item_product_type.product_type,\n        item_summary.item_classification,\n        item_summary.classification_id,\n        item_classification_sales_rank.link as classification_sales_rank_link,\n        item_classification_sales_rank.rank as classification_sales_rank,\n        item_summary.website_display_group,\n        item_summary.website_display_group_name,\n        item_display_group_sales_rank.link as website_display_group_sales_rank_link,\n        item_display_group_sales_rank.rank as website_display_group_sales_rank,\n        item_summary.release_date,\n        item_summary.is_memorabilia,\n        item_summary.is_adult_product,\n        item_summary.is_autographed,\n        item_summary.is_trade_in_eligible,\n\n        item_summary.model_number,\n        item_summary.part_number,\n        parent_variation_relationship.parent_asin as parent_variation_asin,\n        package_hierarchy_relationship.parent_asin as parent_package_container_asin,\n        item_identifiers.sku,\n        item_identifiers.ean,\n        item_identifiers.gtin, \n        item_identifiers.isbn, \n        item_identifiers.jan,\n        item_identifiers.minsan, \n        item_identifiers.upc,\n        \n        item_images.count_images,\n        item_images.count_swatch_images,\n        item_dimension.item_height_unit,\n        item_dimension.item_height_value,\n        item_dimension.item_length_unit,\n        item_dimension.item_length_value,\n        item_dimension.item_weight_unit,\n        item_dimension.item_weight_value,\n        item_dimension.item_width_unit,\n        item_dimension.item_width_value,\n        item_dimension.package_height_unit,\n        item_dimension.package_height_value,\n        item_dimension.package_length_unit,\n        item_dimension.package_length_value,\n        item_dimension.package_weight_unit,\n        item_dimension.package_weight_value,\n        item_dimension.package_width_unit,\n        item_dimension.package_width_value\n\n    from item_summary\n    left join item_product_type\n        on item_summary.asin = item_product_type.asin \n        and item_summary.marketplace_id = item_product_type.marketplace_id\n        and item_summary.source_relation = item_product_type.source_relation\n    left join item_images\n        on item_summary.asin = item_images.asin \n        and item_summary.marketplace_id = item_images.marketplace_id\n        and item_summary.source_relation = item_images.source_relation\n    left join item_display_group_sales_rank\n        on item_summary.asin = item_display_group_sales_rank.asin \n        and item_summary.website_display_group = item_display_group_sales_rank.website_display_group\n        and item_summary.source_relation = item_display_group_sales_rank.source_relation\n    left join item_classification_sales_rank\n        on item_summary.asin = item_classification_sales_rank.asin \n        and item_summary.classification_id = item_classification_sales_rank.classification_id\n        and item_summary.source_relation = item_classification_sales_rank.source_relation\n    left join parent_variation_relationship\n        on item_summary.asin = parent_variation_relationship.child_asin\n        and item_summary.source_relation = parent_variation_relationship.source_relation\n    left join package_hierarchy_relationship\n        on item_summary.asin = package_hierarchy_relationship.child_asin\n        and item_summary.source_relation = package_hierarchy_relationship.source_relation\n    left join item_identifiers\n        on item_summary.asin = item_identifiers.asin \n        and item_summary.marketplace_id = item_identifiers.marketplace_id\n        and item_summary.source_relation = item_identifiers.source_relation\n    left join item_dimension \n        on item_summary.asin = item_dimension.asin \n        and item_summary.marketplace_id = item_dimension.marketplace_id\n        and item_summary.source_relation = item_dimension.source_relation\n)\n\nselect *\nfrom joined", "language": "sql", "refs": [{"name": "stg_amazon_selling_partner__item_summary", "package": null, "version": null}, {"name": "stg_amazon_selling_partner__item_product_type", "package": null, "version": null}, {"name": "stg_amazon_selling_partner__item_image", "package": null, "version": null}, {"name": "stg_amazon_selling_partner__item_display_group_sales_rank", "package": null, "version": null}, {"name": "stg_amazon_selling_partner__item_classification_sales_rank", "package": null, "version": null}, {"name": "stg_amazon_selling_partner__item_relationship", "package": null, "version": null}, {"name": "stg_amazon_selling_partner__item_dimension", "package": null, "version": null}, {"name": "stg_amazon_selling_partner__item_identifier", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_summary", "model.amazon_selling_partner.stg_amazon_selling_partner__item_product_type", "model.amazon_selling_partner.stg_amazon_selling_partner__item_image", "model.amazon_selling_partner.stg_amazon_selling_partner__item_display_group_sales_rank", "model.amazon_selling_partner.stg_amazon_selling_partner__item_classification_sales_rank", "model.amazon_selling_partner.stg_amazon_selling_partner__item_relationship", "model.amazon_selling_partner.stg_amazon_selling_partner__item_dimension", "model.amazon_selling_partner.stg_amazon_selling_partner__item_identifier"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/intermediate/int_amazon_selling_partner__item.sql", "compiled": true, "compiled_code": "\n\nwith item_summary as (\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_summary`\n),\n\nitem_product_type as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_product_type` \n),\n\nitem_image as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_image`\n),\n\nitem_images as (\n\n    select \n        source_relation,\n        asin,\n        marketplace_id,\n        count(*) as count_images,\n        sum(case when variant = 'SWATCH' then 1 else 0 end) as count_swatch_images\n\n    from item_image \n    group by 1,2,3\n),\n\nitem_display_group_sales_rank as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_display_group_sales_rank` \n),\n\nitem_classification_sales_rank as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_classification_sales_rank` \n),\n\nitem_relationship as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_relationship` \n),\n\nparent_variation_relationship as (\n\n    select *\n    from item_relationship\n    where type = 'VARIATION'\n),\n\npackage_hierarchy_relationship as (\n\n    select *\n    from item_relationship\n    where type = 'PACKAGE_HIERARCHY'\n),\n\nitem_dimension as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_dimension` \n),\n\nitem_identifier as (\n\n    select *\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_identifier` \n),\n\nitem_identifiers as (\n\n    select \n        asin,\n        source_relation,\n        marketplace_id\n        \n        \n            , cast(max(case when identifier_type = 'SKU' then identifier end) as string) as sku\n        \n            , cast(max(case when identifier_type = 'EAN' then identifier end) as string) as ean\n        \n            , cast(max(case when identifier_type = 'GTIN' then identifier end) as string) as gtin\n        \n            , cast(max(case when identifier_type = 'ISBN' then identifier end) as string) as isbn\n        \n            , cast(max(case when identifier_type = 'JAN' then identifier end) as string) as jan\n        \n            , cast(max(case when identifier_type = 'MINSAN' then identifier end) as string) as minsan\n        \n            , cast(max(case when identifier_type = 'UPC' then identifier end) as string) as upc\n        \n    from item_identifier\n    group by 1,2,3\n),\n\njoined as (\n\n    select \n        item_summary.source_relation,\n        item_summary.marketplace_id,\n        item_summary.asin,\n        item_summary.item_name,\n        item_summary.display_name,\n        item_summary.brand,\n        item_summary.color,\n        item_summary.size,\n        item_summary.style,\n        item_summary.package_quantity,\n        item_summary.manufacturer,\n        item_summary.contributors,\n        item_product_type.product_type,\n        item_summary.item_classification,\n        item_summary.classification_id,\n        item_classification_sales_rank.link as classification_sales_rank_link,\n        item_classification_sales_rank.rank as classification_sales_rank,\n        item_summary.website_display_group,\n        item_summary.website_display_group_name,\n        item_display_group_sales_rank.link as website_display_group_sales_rank_link,\n        item_display_group_sales_rank.rank as website_display_group_sales_rank,\n        item_summary.release_date,\n        item_summary.is_memorabilia,\n        item_summary.is_adult_product,\n        item_summary.is_autographed,\n        item_summary.is_trade_in_eligible,\n\n        item_summary.model_number,\n        item_summary.part_number,\n        parent_variation_relationship.parent_asin as parent_variation_asin,\n        package_hierarchy_relationship.parent_asin as parent_package_container_asin,\n        item_identifiers.sku,\n        item_identifiers.ean,\n        item_identifiers.gtin, \n        item_identifiers.isbn, \n        item_identifiers.jan,\n        item_identifiers.minsan, \n        item_identifiers.upc,\n        \n        item_images.count_images,\n        item_images.count_swatch_images,\n        item_dimension.item_height_unit,\n        item_dimension.item_height_value,\n        item_dimension.item_length_unit,\n        item_dimension.item_length_value,\n        item_dimension.item_weight_unit,\n        item_dimension.item_weight_value,\n        item_dimension.item_width_unit,\n        item_dimension.item_width_value,\n        item_dimension.package_height_unit,\n        item_dimension.package_height_value,\n        item_dimension.package_length_unit,\n        item_dimension.package_length_value,\n        item_dimension.package_weight_unit,\n        item_dimension.package_weight_value,\n        item_dimension.package_width_unit,\n        item_dimension.package_width_value\n\n    from item_summary\n    left join item_product_type\n        on item_summary.asin = item_product_type.asin \n        and item_summary.marketplace_id = item_product_type.marketplace_id\n        and item_summary.source_relation = item_product_type.source_relation\n    left join item_images\n        on item_summary.asin = item_images.asin \n        and item_summary.marketplace_id = item_images.marketplace_id\n        and item_summary.source_relation = item_images.source_relation\n    left join item_display_group_sales_rank\n        on item_summary.asin = item_display_group_sales_rank.asin \n        and item_summary.website_display_group = item_display_group_sales_rank.website_display_group\n        and item_summary.source_relation = item_display_group_sales_rank.source_relation\n    left join item_classification_sales_rank\n        on item_summary.asin = item_classification_sales_rank.asin \n        and item_summary.classification_id = item_classification_sales_rank.classification_id\n        and item_summary.source_relation = item_classification_sales_rank.source_relation\n    left join parent_variation_relationship\n        on item_summary.asin = parent_variation_relationship.child_asin\n        and item_summary.source_relation = parent_variation_relationship.source_relation\n    left join package_hierarchy_relationship\n        on item_summary.asin = package_hierarchy_relationship.child_asin\n        and item_summary.source_relation = package_hierarchy_relationship.source_relation\n    left join item_identifiers\n        on item_summary.asin = item_identifiers.asin \n        and item_summary.marketplace_id = item_identifiers.marketplace_id\n        and item_summary.source_relation = item_identifiers.source_relation\n    left join item_dimension \n        on item_summary.asin = item_dimension.asin \n        and item_summary.marketplace_id = item_dimension.marketplace_id\n        and item_summary.source_relation = item_dimension.source_relation\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_amazon_selling_partner__orders_source_relation__amazon_order_id.eadaa050f9": {"database": "dbt-package-testing", "schema": "asp_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_amazon_selling_partner__orders_source_relation__amazon_order_id", "resource_type": "test", "package_name": "amazon_selling_partner", "path": "dbt_utils_unique_combination_o_e4fdd85630a29fff435312f4be06bc6c.sql", "original_file_path": "models/amazon_selling_partner.yml", "unique_id": "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_amazon_selling_partner__orders_source_relation__amazon_order_id.eadaa050f9", "fqn": ["amazon_selling_partner", "dbt_utils_unique_combination_of_columns_amazon_selling_partner__orders_source_relation__amazon_order_id"], "alias": "dbt_utils_unique_combination_o_e4fdd85630a29fff435312f4be06bc6c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e4fdd85630a29fff435312f4be06bc6c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e4fdd85630a29fff435312f4be06bc6c"}, "created_at": 1743628945.551578, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e4fdd85630a29fff435312f4be06bc6c\") }}", "language": "sql", "refs": [{"name": "amazon_selling_partner__orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.amazon_selling_partner.amazon_selling_partner__orders"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/amazon_selling_partner.yml/dbt_utils_unique_combination_o_e4fdd85630a29fff435312f4be06bc6c.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, amazon_order_id\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`amazon_selling_partner__orders`\n    group by source_relation, amazon_order_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.amazon_selling_partner__orders", "attached_node": "model.amazon_selling_partner.amazon_selling_partner__orders", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "amazon_order_id"], "model": "{{ get_where_subquery(ref('amazon_selling_partner__orders')) }}"}, "namespace": "dbt_utils"}}, "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_amazon_selling_partner__order_items_source_relation__amazon_order_id__order_item_id.e2e3803230": {"database": "dbt-package-testing", "schema": "asp_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_amazon_selling_partner__order_items_source_relation__amazon_order_id__order_item_id", "resource_type": "test", "package_name": "amazon_selling_partner", "path": "dbt_utils_unique_combination_o_9284ac9402782ba1d6201a53c2869611.sql", "original_file_path": "models/amazon_selling_partner.yml", "unique_id": "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_amazon_selling_partner__order_items_source_relation__amazon_order_id__order_item_id.e2e3803230", "fqn": ["amazon_selling_partner", "dbt_utils_unique_combination_of_columns_amazon_selling_partner__order_items_source_relation__amazon_order_id__order_item_id"], "alias": "dbt_utils_unique_combination_o_9284ac9402782ba1d6201a53c2869611", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_9284ac9402782ba1d6201a53c2869611", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_9284ac9402782ba1d6201a53c2869611"}, "created_at": 1743628945.563924, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_9284ac9402782ba1d6201a53c2869611\") }}", "language": "sql", "refs": [{"name": "amazon_selling_partner__order_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.amazon_selling_partner.amazon_selling_partner__order_items"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/amazon_selling_partner.yml/dbt_utils_unique_combination_o_9284ac9402782ba1d6201a53c2869611.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, amazon_order_id, order_item_id\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`amazon_selling_partner__order_items`\n    group by source_relation, amazon_order_id, order_item_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.amazon_selling_partner__order_items", "attached_node": "model.amazon_selling_partner.amazon_selling_partner__order_items", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "amazon_order_id", "order_item_id"], "model": "{{ get_where_subquery(ref('amazon_selling_partner__order_items')) }}"}, "namespace": "dbt_utils"}}, "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_amazon_selling_partner__item_inventory_source_relation__asin__marketplace_id.862270d9c2": {"database": "dbt-package-testing", "schema": "asp_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_amazon_selling_partner__item_inventory_source_relation__asin__marketplace_id", "resource_type": "test", "package_name": "amazon_selling_partner", "path": "dbt_utils_unique_combination_o_b1caf0ce8d5893160a18883960ba8423.sql", "original_file_path": "models/amazon_selling_partner.yml", "unique_id": "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_amazon_selling_partner__item_inventory_source_relation__asin__marketplace_id.862270d9c2", "fqn": ["amazon_selling_partner", "dbt_utils_unique_combination_of_columns_amazon_selling_partner__item_inventory_source_relation__asin__marketplace_id"], "alias": "dbt_utils_unique_combination_o_b1caf0ce8d5893160a18883960ba8423", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b1caf0ce8d5893160a18883960ba8423", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b1caf0ce8d5893160a18883960ba8423"}, "created_at": 1743628945.5664818, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b1caf0ce8d5893160a18883960ba8423\") }}", "language": "sql", "refs": [{"name": "amazon_selling_partner__item_inventory", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.amazon_selling_partner.amazon_selling_partner__item_inventory"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/amazon_selling_partner.yml/dbt_utils_unique_combination_o_b1caf0ce8d5893160a18883960ba8423.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, asin, marketplace_id\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`amazon_selling_partner__item_inventory`\n    group by source_relation, asin, marketplace_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.amazon_selling_partner__item_inventory", "attached_node": "model.amazon_selling_partner.amazon_selling_partner__item_inventory", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "asin", "marketplace_id"], "model": "{{ get_where_subquery(ref('amazon_selling_partner__item_inventory')) }}"}, "namespace": "dbt_utils"}}, "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__orders_source_relation__amazon_order_id.220aebdd30": {"database": "dbt-package-testing", "schema": "asp_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__orders_source_relation__amazon_order_id", "resource_type": "test", "package_name": "amazon_selling_partner", "path": "dbt_utils_unique_combination_o_b6dab52a8f0f99a2ff473f4a3ca5f9f0.sql", "original_file_path": "models/staging/stg_amazon_selling_partner.yml", "unique_id": "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__orders_source_relation__amazon_order_id.220aebdd30", "fqn": ["amazon_selling_partner", "staging", "dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__orders_source_relation__amazon_order_id"], "alias": "dbt_utils_unique_combination_o_b6dab52a8f0f99a2ff473f4a3ca5f9f0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b6dab52a8f0f99a2ff473f4a3ca5f9f0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b6dab52a8f0f99a2ff473f4a3ca5f9f0"}, "created_at": 1743628945.692586, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b6dab52a8f0f99a2ff473f4a3ca5f9f0\") }}", "language": "sql", "refs": [{"name": "stg_amazon_selling_partner__orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.amazon_selling_partner.stg_amazon_selling_partner__orders"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/stg_amazon_selling_partner.yml/dbt_utils_unique_combination_o_b6dab52a8f0f99a2ff473f4a3ca5f9f0.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, amazon_order_id\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__orders`\n    group by source_relation, amazon_order_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_amazon_selling_partner__orders", "attached_node": "model.amazon_selling_partner.stg_amazon_selling_partner__orders", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "amazon_order_id"], "model": "{{ get_where_subquery(ref('stg_amazon_selling_partner__orders')) }}"}, "namespace": "dbt_utils"}}, "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__order_item_source_relation__amazon_order_id__order_item_id.14745b83f3": {"database": "dbt-package-testing", "schema": "asp_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__order_item_source_relation__amazon_order_id__order_item_id", "resource_type": "test", "package_name": "amazon_selling_partner", "path": "dbt_utils_unique_combination_o_d8c783f4c0641045127628c9f6021f99.sql", "original_file_path": "models/staging/stg_amazon_selling_partner.yml", "unique_id": "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__order_item_source_relation__amazon_order_id__order_item_id.14745b83f3", "fqn": ["amazon_selling_partner", "staging", "dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__order_item_source_relation__amazon_order_id__order_item_id"], "alias": "dbt_utils_unique_combination_o_d8c783f4c0641045127628c9f6021f99", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d8c783f4c0641045127628c9f6021f99", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d8c783f4c0641045127628c9f6021f99"}, "created_at": 1743628945.695323, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d8c783f4c0641045127628c9f6021f99\") }}", "language": "sql", "refs": [{"name": "stg_amazon_selling_partner__order_item", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.amazon_selling_partner.stg_amazon_selling_partner__order_item"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/stg_amazon_selling_partner.yml/dbt_utils_unique_combination_o_d8c783f4c0641045127628c9f6021f99.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, amazon_order_id, order_item_id\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__order_item`\n    group by source_relation, amazon_order_id, order_item_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_amazon_selling_partner__order_item", "attached_node": "model.amazon_selling_partner.stg_amazon_selling_partner__order_item", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "amazon_order_id", "order_item_id"], "model": "{{ get_where_subquery(ref('stg_amazon_selling_partner__order_item')) }}"}, "namespace": "dbt_utils"}}, "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__order_item_promotion_id_source_relation__amazon_order_id__promotion_id__order_item_id.045cc9551d": {"database": "dbt-package-testing", "schema": "asp_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__order_item_promotion_id_source_relation__amazon_order_id__promotion_id__order_item_id", "resource_type": "test", "package_name": "amazon_selling_partner", "path": "dbt_utils_unique_combination_o_2fb84d60e7eb21c942698f5426c5078b.sql", "original_file_path": "models/staging/stg_amazon_selling_partner.yml", "unique_id": "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__order_item_promotion_id_source_relation__amazon_order_id__promotion_id__order_item_id.045cc9551d", "fqn": ["amazon_selling_partner", "staging", "dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__order_item_promotion_id_source_relation__amazon_order_id__promotion_id__order_item_id"], "alias": "dbt_utils_unique_combination_o_2fb84d60e7eb21c942698f5426c5078b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_2fb84d60e7eb21c942698f5426c5078b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_2fb84d60e7eb21c942698f5426c5078b"}, "created_at": 1743628945.697781, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_2fb84d60e7eb21c942698f5426c5078b\") }}", "language": "sql", "refs": [{"name": "stg_amazon_selling_partner__order_item_promotion_id", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.amazon_selling_partner.stg_amazon_selling_partner__order_item_promotion_id"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/stg_amazon_selling_partner.yml/dbt_utils_unique_combination_o_2fb84d60e7eb21c942698f5426c5078b.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, amazon_order_id, promotion_id, order_item_id\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__order_item_promotion_id`\n    group by source_relation, amazon_order_id, promotion_id, order_item_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_amazon_selling_partner__order_item_promotion_id", "attached_node": "model.amazon_selling_partner.stg_amazon_selling_partner__order_item_promotion_id", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "amazon_order_id", "promotion_id", "order_item_id"], "model": "{{ get_where_subquery(ref('stg_amazon_selling_partner__order_item_promotion_id')) }}"}, "namespace": "dbt_utils"}}, "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__payment_method_detail_item_source_relation__amazon_order_id__method.0517594b48": {"database": "dbt-package-testing", "schema": "asp_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__payment_method_detail_item_source_relation__amazon_order_id__method", "resource_type": "test", "package_name": "amazon_selling_partner", "path": "dbt_utils_unique_combination_o_5d829e488a9b6e2b6a2bbeb66fe3688f.sql", "original_file_path": "models/staging/stg_amazon_selling_partner.yml", "unique_id": "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__payment_method_detail_item_source_relation__amazon_order_id__method.0517594b48", "fqn": ["amazon_selling_partner", "staging", "dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__payment_method_detail_item_source_relation__amazon_order_id__method"], "alias": "dbt_utils_unique_combination_o_5d829e488a9b6e2b6a2bbeb66fe3688f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_5d829e488a9b6e2b6a2bbeb66fe3688f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_5d829e488a9b6e2b6a2bbeb66fe3688f"}, "created_at": 1743628945.700269, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_5d829e488a9b6e2b6a2bbeb66fe3688f\") }}", "language": "sql", "refs": [{"name": "stg_amazon_selling_partner__payment_method_detail_item", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.amazon_selling_partner.stg_amazon_selling_partner__payment_method_detail_item"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/stg_amazon_selling_partner.yml/dbt_utils_unique_combination_o_5d829e488a9b6e2b6a2bbeb66fe3688f.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, amazon_order_id, method\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__payment_method_detail_item`\n    group by source_relation, amazon_order_id, method\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_amazon_selling_partner__payment_method_detail_item", "attached_node": "model.amazon_selling_partner.stg_amazon_selling_partner__payment_method_detail_item", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "amazon_order_id", "method"], "model": "{{ get_where_subquery(ref('stg_amazon_selling_partner__payment_method_detail_item')) }}"}, "namespace": "dbt_utils"}}, "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_product_type_source_relation__asin__marketplace_id.e7ae21c2ed": {"database": "dbt-package-testing", "schema": "asp_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_product_type_source_relation__asin__marketplace_id", "resource_type": "test", "package_name": "amazon_selling_partner", "path": "dbt_utils_unique_combination_o_61081fac7f8022680e5aee95d45bd49f.sql", "original_file_path": "models/staging/stg_amazon_selling_partner.yml", "unique_id": "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_product_type_source_relation__asin__marketplace_id.e7ae21c2ed", "fqn": ["amazon_selling_partner", "staging", "dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_product_type_source_relation__asin__marketplace_id"], "alias": "dbt_utils_unique_combination_o_61081fac7f8022680e5aee95d45bd49f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_61081fac7f8022680e5aee95d45bd49f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_61081fac7f8022680e5aee95d45bd49f"}, "created_at": 1743628945.7027452, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_61081fac7f8022680e5aee95d45bd49f\") }}", "language": "sql", "refs": [{"name": "stg_amazon_selling_partner__item_product_type", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_product_type"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/stg_amazon_selling_partner.yml/dbt_utils_unique_combination_o_61081fac7f8022680e5aee95d45bd49f.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, asin, marketplace_id\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_product_type`\n    group by source_relation, asin, marketplace_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_amazon_selling_partner__item_product_type", "attached_node": "model.amazon_selling_partner.stg_amazon_selling_partner__item_product_type", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "asin", "marketplace_id"], "model": "{{ get_where_subquery(ref('stg_amazon_selling_partner__item_product_type')) }}"}, "namespace": "dbt_utils"}}, "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_dimension_source_relation__asin__marketplace_id.0905407d73": {"database": "dbt-package-testing", "schema": "asp_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_dimension_source_relation__asin__marketplace_id", "resource_type": "test", "package_name": "amazon_selling_partner", "path": "dbt_utils_unique_combination_o_0dafe2d09a29e7d199de4a24982342c4.sql", "original_file_path": "models/staging/stg_amazon_selling_partner.yml", "unique_id": "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_dimension_source_relation__asin__marketplace_id.0905407d73", "fqn": ["amazon_selling_partner", "staging", "dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_dimension_source_relation__asin__marketplace_id"], "alias": "dbt_utils_unique_combination_o_0dafe2d09a29e7d199de4a24982342c4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0dafe2d09a29e7d199de4a24982342c4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_0dafe2d09a29e7d199de4a24982342c4"}, "created_at": 1743628945.705236, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0dafe2d09a29e7d199de4a24982342c4\") }}", "language": "sql", "refs": [{"name": "stg_amazon_selling_partner__item_dimension", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_dimension"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/stg_amazon_selling_partner.yml/dbt_utils_unique_combination_o_0dafe2d09a29e7d199de4a24982342c4.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, asin, marketplace_id\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_dimension`\n    group by source_relation, asin, marketplace_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_amazon_selling_partner__item_dimension", "attached_node": "model.amazon_selling_partner.stg_amazon_selling_partner__item_dimension", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "asin", "marketplace_id"], "model": "{{ get_where_subquery(ref('stg_amazon_selling_partner__item_dimension')) }}"}, "namespace": "dbt_utils"}}, "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_image_source_relation__asin__marketplace_id__variant.f20b0b4dfa": {"database": "dbt-package-testing", "schema": "asp_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_image_source_relation__asin__marketplace_id__variant", "resource_type": "test", "package_name": "amazon_selling_partner", "path": "dbt_utils_unique_combination_o_2cb35634e1577fd9cf9e17d60341de2d.sql", "original_file_path": "models/staging/stg_amazon_selling_partner.yml", "unique_id": "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_image_source_relation__asin__marketplace_id__variant.f20b0b4dfa", "fqn": ["amazon_selling_partner", "staging", "dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_image_source_relation__asin__marketplace_id__variant"], "alias": "dbt_utils_unique_combination_o_2cb35634e1577fd9cf9e17d60341de2d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_2cb35634e1577fd9cf9e17d60341de2d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_2cb35634e1577fd9cf9e17d60341de2d"}, "created_at": 1743628945.7076328, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_2cb35634e1577fd9cf9e17d60341de2d\") }}", "language": "sql", "refs": [{"name": "stg_amazon_selling_partner__item_image", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_image"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/stg_amazon_selling_partner.yml/dbt_utils_unique_combination_o_2cb35634e1577fd9cf9e17d60341de2d.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, asin, marketplace_id, variant\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_image`\n    group by source_relation, asin, marketplace_id, variant\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_amazon_selling_partner__item_image", "attached_node": "model.amazon_selling_partner.stg_amazon_selling_partner__item_image", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "asin", "marketplace_id", "variant"], "model": "{{ get_where_subquery(ref('stg_amazon_selling_partner__item_image')) }}"}, "namespace": "dbt_utils"}}, "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_summary_source_relation__asin__marketplace_id.e7e483fbaf": {"database": "dbt-package-testing", "schema": "asp_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_summary_source_relation__asin__marketplace_id", "resource_type": "test", "package_name": "amazon_selling_partner", "path": "dbt_utils_unique_combination_o_2e969f6338b7cc4d82ae784eeeffae42.sql", "original_file_path": "models/staging/stg_amazon_selling_partner.yml", "unique_id": "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_summary_source_relation__asin__marketplace_id.e7e483fbaf", "fqn": ["amazon_selling_partner", "staging", "dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_summary_source_relation__asin__marketplace_id"], "alias": "dbt_utils_unique_combination_o_2e969f6338b7cc4d82ae784eeeffae42", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_2e969f6338b7cc4d82ae784eeeffae42", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_2e969f6338b7cc4d82ae784eeeffae42"}, "created_at": 1743628945.710111, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_2e969f6338b7cc4d82ae784eeeffae42\") }}", "language": "sql", "refs": [{"name": "stg_amazon_selling_partner__item_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_summary"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/stg_amazon_selling_partner.yml/dbt_utils_unique_combination_o_2e969f6338b7cc4d82ae784eeeffae42.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, asin, marketplace_id\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_summary`\n    group by source_relation, asin, marketplace_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_amazon_selling_partner__item_summary", "attached_node": "model.amazon_selling_partner.stg_amazon_selling_partner__item_summary", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "asin", "marketplace_id"], "model": "{{ get_where_subquery(ref('stg_amazon_selling_partner__item_summary')) }}"}, "namespace": "dbt_utils"}}, "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_display_group_sales_rank_source_relation__asin__website_display_group.8aecef26ca": {"database": "dbt-package-testing", "schema": "asp_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_display_group_sales_rank_source_relation__asin__website_display_group", "resource_type": "test", "package_name": "amazon_selling_partner", "path": "dbt_utils_unique_combination_o_06f1bd899cbd84203ab4c62300b5e2da.sql", "original_file_path": "models/staging/stg_amazon_selling_partner.yml", "unique_id": "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_display_group_sales_rank_source_relation__asin__website_display_group.8aecef26ca", "fqn": ["amazon_selling_partner", "staging", "dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_display_group_sales_rank_source_relation__asin__website_display_group"], "alias": "dbt_utils_unique_combination_o_06f1bd899cbd84203ab4c62300b5e2da", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_06f1bd899cbd84203ab4c62300b5e2da", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_06f1bd899cbd84203ab4c62300b5e2da"}, "created_at": 1743628945.712574, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_06f1bd899cbd84203ab4c62300b5e2da\") }}", "language": "sql", "refs": [{"name": "stg_amazon_selling_partner__item_display_group_sales_rank", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_display_group_sales_rank"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/stg_amazon_selling_partner.yml/dbt_utils_unique_combination_o_06f1bd899cbd84203ab4c62300b5e2da.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, asin, website_display_group\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_display_group_sales_rank`\n    group by source_relation, asin, website_display_group\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_amazon_selling_partner__item_display_group_sales_rank", "attached_node": "model.amazon_selling_partner.stg_amazon_selling_partner__item_display_group_sales_rank", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "asin", "website_display_group"], "model": "{{ get_where_subquery(ref('stg_amazon_selling_partner__item_display_group_sales_rank')) }}"}, "namespace": "dbt_utils"}}, "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_classification_sales_rank_source_relation__asin__classification_id.70fa6e66ad": {"database": "dbt-package-testing", "schema": "asp_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_classification_sales_rank_source_relation__asin__classification_id", "resource_type": "test", "package_name": "amazon_selling_partner", "path": "dbt_utils_unique_combination_o_53035f3acc91c9e851554a1a5f60ed80.sql", "original_file_path": "models/staging/stg_amazon_selling_partner.yml", "unique_id": "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_classification_sales_rank_source_relation__asin__classification_id.70fa6e66ad", "fqn": ["amazon_selling_partner", "staging", "dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_classification_sales_rank_source_relation__asin__classification_id"], "alias": "dbt_utils_unique_combination_o_53035f3acc91c9e851554a1a5f60ed80", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_53035f3acc91c9e851554a1a5f60ed80", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_53035f3acc91c9e851554a1a5f60ed80"}, "created_at": 1743628945.7150311, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_53035f3acc91c9e851554a1a5f60ed80\") }}", "language": "sql", "refs": [{"name": "stg_amazon_selling_partner__item_classification_sales_rank", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_classification_sales_rank"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/stg_amazon_selling_partner.yml/dbt_utils_unique_combination_o_53035f3acc91c9e851554a1a5f60ed80.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, asin, classification_id\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_classification_sales_rank`\n    group by source_relation, asin, classification_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_amazon_selling_partner__item_classification_sales_rank", "attached_node": "model.amazon_selling_partner.stg_amazon_selling_partner__item_classification_sales_rank", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "asin", "classification_id"], "model": "{{ get_where_subquery(ref('stg_amazon_selling_partner__item_classification_sales_rank')) }}"}, "namespace": "dbt_utils"}}, "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_identifier_source_relation__asin__identifier_type__marketplace_id.e87c2a56ab": {"database": "dbt-package-testing", "schema": "asp_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_identifier_source_relation__asin__identifier_type__marketplace_id", "resource_type": "test", "package_name": "amazon_selling_partner", "path": "dbt_utils_unique_combination_o_c4f402d6f2b0ca507446d1b38e91e969.sql", "original_file_path": "models/staging/stg_amazon_selling_partner.yml", "unique_id": "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_identifier_source_relation__asin__identifier_type__marketplace_id.e87c2a56ab", "fqn": ["amazon_selling_partner", "staging", "dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_identifier_source_relation__asin__identifier_type__marketplace_id"], "alias": "dbt_utils_unique_combination_o_c4f402d6f2b0ca507446d1b38e91e969", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c4f402d6f2b0ca507446d1b38e91e969", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c4f402d6f2b0ca507446d1b38e91e969"}, "created_at": 1743628945.7174149, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c4f402d6f2b0ca507446d1b38e91e969\") }}", "language": "sql", "refs": [{"name": "stg_amazon_selling_partner__item_identifier", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_identifier"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/stg_amazon_selling_partner.yml/dbt_utils_unique_combination_o_c4f402d6f2b0ca507446d1b38e91e969.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, asin, identifier_type, marketplace_id\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_identifier`\n    group by source_relation, asin, identifier_type, marketplace_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_amazon_selling_partner__item_identifier", "attached_node": "model.amazon_selling_partner.stg_amazon_selling_partner__item_identifier", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "asin", "identifier_type", "marketplace_id"], "model": "{{ get_where_subquery(ref('stg_amazon_selling_partner__item_identifier')) }}"}, "namespace": "dbt_utils"}}, "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_relationship_source_relation__parent_asin__child_asin__type.d10658b039": {"database": "dbt-package-testing", "schema": "asp_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_relationship_source_relation__parent_asin__child_asin__type", "resource_type": "test", "package_name": "amazon_selling_partner", "path": "dbt_utils_unique_combination_o_34c4bcf6cc6960be0a33995480bc2b34.sql", "original_file_path": "models/staging/stg_amazon_selling_partner.yml", "unique_id": "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_relationship_source_relation__parent_asin__child_asin__type.d10658b039", "fqn": ["amazon_selling_partner", "staging", "dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_relationship_source_relation__parent_asin__child_asin__type"], "alias": "dbt_utils_unique_combination_o_34c4bcf6cc6960be0a33995480bc2b34", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_34c4bcf6cc6960be0a33995480bc2b34", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_34c4bcf6cc6960be0a33995480bc2b34"}, "created_at": 1743628945.719902, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_34c4bcf6cc6960be0a33995480bc2b34\") }}", "language": "sql", "refs": [{"name": "stg_amazon_selling_partner__item_relationship", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_relationship"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/stg_amazon_selling_partner.yml/dbt_utils_unique_combination_o_34c4bcf6cc6960be0a33995480bc2b34.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, parent_asin, child_asin, type\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__item_relationship`\n    group by source_relation, parent_asin, child_asin, type\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_amazon_selling_partner__item_relationship", "attached_node": "model.amazon_selling_partner.stg_amazon_selling_partner__item_relationship", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "parent_asin", "child_asin", "type"], "model": "{{ get_where_subquery(ref('stg_amazon_selling_partner__item_relationship')) }}"}, "namespace": "dbt_utils"}}, "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__fba_inventory_summary_source_relation__inventory_summary_id.a8081f6e59": {"database": "dbt-package-testing", "schema": "asp_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__fba_inventory_summary_source_relation__inventory_summary_id", "resource_type": "test", "package_name": "amazon_selling_partner", "path": "dbt_utils_unique_combination_o_033b0797d74250f2c83f4166da635ced.sql", "original_file_path": "models/staging/stg_amazon_selling_partner.yml", "unique_id": "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__fba_inventory_summary_source_relation__inventory_summary_id.a8081f6e59", "fqn": ["amazon_selling_partner", "staging", "dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__fba_inventory_summary_source_relation__inventory_summary_id"], "alias": "dbt_utils_unique_combination_o_033b0797d74250f2c83f4166da635ced", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_033b0797d74250f2c83f4166da635ced", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_033b0797d74250f2c83f4166da635ced"}, "created_at": 1743628945.722367, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_033b0797d74250f2c83f4166da635ced\") }}", "language": "sql", "refs": [{"name": "stg_amazon_selling_partner__fba_inventory_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_summary"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/stg_amazon_selling_partner.yml/dbt_utils_unique_combination_o_033b0797d74250f2c83f4166da635ced.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, inventory_summary_id\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__fba_inventory_summary`\n    group by source_relation, inventory_summary_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_amazon_selling_partner__fba_inventory_summary", "attached_node": "model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_summary", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "inventory_summary_id"], "model": "{{ get_where_subquery(ref('stg_amazon_selling_partner__fba_inventory_summary')) }}"}, "namespace": "dbt_utils"}}, "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__fba_inventory_researching_source_relation__inventory_summary_id__name.d9a6bcd780": {"database": "dbt-package-testing", "schema": "asp_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__fba_inventory_researching_source_relation__inventory_summary_id__name", "resource_type": "test", "package_name": "amazon_selling_partner", "path": "dbt_utils_unique_combination_o_13692132f38ae2992b091f02a3522883.sql", "original_file_path": "models/staging/stg_amazon_selling_partner.yml", "unique_id": "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__fba_inventory_researching_source_relation__inventory_summary_id__name.d9a6bcd780", "fqn": ["amazon_selling_partner", "staging", "dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__fba_inventory_researching_source_relation__inventory_summary_id__name"], "alias": "dbt_utils_unique_combination_o_13692132f38ae2992b091f02a3522883", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_13692132f38ae2992b091f02a3522883", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_13692132f38ae2992b091f02a3522883"}, "created_at": 1743628945.724837, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_13692132f38ae2992b091f02a3522883\") }}", "language": "sql", "refs": [{"name": "stg_amazon_selling_partner__fba_inventory_researching", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_researching"]}, "compiled_path": "target/compiled/amazon_selling_partner/models/staging/stg_amazon_selling_partner.yml/dbt_utils_unique_combination_o_13692132f38ae2992b091f02a3522883.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, inventory_summary_id, name\n    from `dbt-package-testing`.`asp_tests_amazon_selling_partner_dev`.`stg_amazon_selling_partner__fba_inventory_researching`\n    group by source_relation, inventory_summary_id, name\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_amazon_selling_partner__fba_inventory_researching", "attached_node": "model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_researching", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "inventory_summary_id", "name"], "model": "{{ get_where_subquery(ref('stg_amazon_selling_partner__fba_inventory_researching')) }}"}, "namespace": "dbt_utils"}}}, "sources": {"source.amazon_selling_partner.amazon_selling_partner.orders": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "orders", "resource_type": "source", "package_name": "amazon_selling_partner", "path": "models/staging/src_amazon_selling_partner.yml", "original_file_path": "models/staging/src_amazon_selling_partner.yml", "unique_id": "source.amazon_selling_partner.amazon_selling_partner.orders", "fqn": ["amazon_selling_partner", "staging", "amazon_selling_partner", "orders"], "source_name": "amazon_selling_partner", "source_description": "", "loader": "fivetran", "identifier": "orders", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Orders placed in Amazon.", "columns": {"amazon_order_id": {"name": "amazon_order_id", "description": "An Amazon-defined order identifier, in 3-7-7 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "automated_shipping_setting_automated_carrier": {"name": "automated_shipping_setting_automated_carrier", "description": "Auto-generated carrier for SSA orders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "automated_shipping_setting_automated_ship_method": {"name": "automated_shipping_setting_automated_ship_method", "description": "Auto-generated ship method for SSA orders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "automated_shipping_setting_has_automated_shipping_settings": {"name": "automated_shipping_setting_has_automated_shipping_settings", "description": "When true, this order has automated shipping settings generated by Amazon. This order could be identified as an SSA order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "buyer_info_buyer_email": {"name": "buyer_info_buyer_email", "description": "The anonymized email address of the buyer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "buyer_info_buyer_county": {"name": "buyer_info_buyer_county", "description": "The county of the buyer. This attribute is only available in the Brazil marketplace.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "buyer_info_buyer_name": {"name": "buyer_info_buyer_name", "description": "The buyer name or the recipient name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "buyer_info_purchase_order_number": {"name": "buyer_info_purchase_order_number", "description": "The purchase order (PO) number entered by the buyer at checkout. Only returned for orders where the buyer entered a PO number at checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "buyer_invoice_preference": {"name": "buyer_invoice_preference", "description": "The buyer's invoicing preference. Sellers can use this data to issue electronic invoices for orders in Turkey. Possible values = `INDIVUDAL` or `BUSINESS`", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "buyer_tax_info_buyer_business_address": {"name": "buyer_tax_info_buyer_business_address", "description": "Business buyer's address.Only available in the TR marketplace.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "buyer_tax_info_buyer_legal_company_name": {"name": "buyer_tax_info_buyer_legal_company_name", "description": "Business buyer's company legal name.\tOnly available in the TR marketplace.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "buyer_tax_info_buyer_tax_office": {"name": "buyer_tax_info_buyer_tax_office", "description": "Business buyer's company tax office.\tOnly available in the TR marketplace.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "buyer_tax_info_buyer_tax_registration_id": {"name": "buyer_tax_info_buyer_tax_registration_id", "description": "Business buyer's tax registration ID.\tOnly available in the TR marketplace.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cba_displayable_shipping_label": {"name": "cba_displayable_shipping_label", "description": "Custom ship label for Checkout by Amazon (CBA).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "earliest_delivery_date": {"name": "earliest_delivery_date", "description": "The start of the time period within which you have committed to fulfill the order. In ISO 8601 date time format. Only returned for seller-fulfilled orders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "earliest_ship_date": {"name": "earliest_ship_date", "description": "The start of the time period within which you have committed to ship the order. In ISO 8601 date time format. Only returned for seller-fulfilled orders. Note: EarliestShipDate might not be returned for orders placed before February 1, 2013.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "easy_ship_shipment_status": {"name": "easy_ship_shipment_status", "description": "The status of the Amazon Easy Ship order. This property is only included for Amazon Easy Ship orders. Possible values can be found [here](https://developer-docs.amazon.com/sp-api/docs/orders-api-v0-reference#easyshipshipmentstatus).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "electronic_invoice_status": {"name": "electronic_invoice_status", "description": "The status of the electronic invoice. Only available for Easy Ship orders and orders in the BR marketplace. Possible values can be found [here](https://developer-docs.amazon.com/sp-api/docs/orders-api-v0-reference#electronicinvoicestatus).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fulfillment_channel": {"name": "fulfillment_channel", "description": "Whether the order was fulfilled by Amazon (AFN) or by the seller (MFN).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fulfillment_supply_source_id": {"name": "fulfillment_supply_source_id", "description": "The sourceId of the location from where you want the order fulfilled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "has_regulated_items": {"name": "has_regulated_items", "description": "Whether the order contains regulated items which may require additional approval steps before being fulfilled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_access_point_order": {"name": "is_access_point_order", "description": "When true, this order is marked to be delivered to an Access Point. The access location is chosen by the customer. Access Points include Amazon Hub Lockers, Amazon Hub Counters, and pickup points operated by carriers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_business_order": {"name": "is_business_order", "description": "When true, the order is an Amazon Business order. An Amazon Business order is an order where the buyer is a Verified Business Buyer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_estimated_ship_date_set": {"name": "is_estimated_ship_date_set", "description": "When true, the estimated ship date is set for the order. Only returned for Sourcing on Demand orders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_global_express_enabled": {"name": "is_global_express_enabled", "description": "When true, the order is a GlobalExpress order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_iba": {"name": "is_iba", "description": "When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_ispu": {"name": "is_ispu", "description": "When true, this order is marked to be picked up from a store rather than delivered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_premium_order": {"name": "is_premium_order", "description": "When true, the order has a Premium Shipping Service Level Agreement. For more information about Premium Shipping orders, refer to \"Premium Shipping Options\" in the Seller Central Help for your marketplace.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_prime": {"name": "is_prime", "description": "When true, the order is a seller-fulfilled Amazon Prime order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_replacement_order": {"name": "is_replacement_order", "description": "When true, this is a replacement order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_sold_by_ab": {"name": "is_sold_by_ab", "description": "When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "last_update_date": {"name": "last_update_date", "description": "The date when the order was last updated. Note: LastUpdateDate is returned with an incorrect date for orders that were last updated before 2009-04-01.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "latest_delivery_date": {"name": "latest_delivery_date", "description": "The end of the time period within which you have committed to fulfill the order. In ISO 8601 date time format. Only returned for seller-fulfilled orders that do not have a PendingAvailability, Pending, or Canceled status.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "latest_ship_date": {"name": "latest_ship_date", "description": "The end of the time period within which you have committed to ship the order. In ISO 8601 date time format. Only returned for seller-fulfilled orders. Note: LatestShipDate might not be returned for orders placed before February 1, 2013.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketplace_id": {"name": "marketplace_id", "description": "The unobfuscated marketplace identifier. Different marketplace values can be found [here](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "number_of_items_shipped": {"name": "number_of_items_shipped", "description": "The number of items shipped for the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "number_of_items_unshipped": {"name": "number_of_items_unshipped", "description": "The number of items unshipped for the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_channel": {"name": "order_channel", "description": "The order channel for the first item in the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_status": {"name": "order_status", "description": "The current order status. Possible values can be found [here](https://developer-docs.amazon.com/sp-api/docs/orders-api-v0-reference#orderstatus).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_total_amount": {"name": "order_total_amount", "description": "The total charge for this order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_total_currency_code": {"name": "order_total_currency_code", "description": "The three-digit currency code in which the order total is measured. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_type": {"name": "order_type", "description": "The order's type. Possible values can be found [here](https://developer-docs.amazon.com/sp-api/docs/orders-api-v0-reference#ordertype).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "payment_method": {"name": "payment_method", "description": "The payment method for the order. This property is limited to COD and CVS payment methods. Unless you need the specific COD payment information provided by the PaymentExecutionDetailItem object, Amazon recommends using the PaymentMethodDetails table to get payment method information.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "promise_response_due_date": {"name": "promise_response_due_date", "description": "Indicates the date by which the seller must respond to the buyer with an estimated ship date. Only returned for Sourcing on Demand orders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "purchase_date": {"name": "purchase_date", "description": "The date when the order was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "replaced_order_id": {"name": "replaced_order_id", "description": "The order ID value for the order that is being replaced. Returned only if IsReplacementOrder = true.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sales_channel": {"name": "sales_channel", "description": "The sales channel for the first item in the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "seller_display_name": {"name": "seller_display_name", "description": "The seller\u2019s friendly name registered in the marketplace where the sale took place. Sellers can use this data to issue electronic invoices for orders in Brazil. Note: This attribute is only available in the Brazil marketplace for the orders with Pending or Unshipped status.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "seller_order_id": {"name": "seller_order_id", "description": "An order identifier that is specified by the seller. Used to select only the orders that match the order identifier. If SellerOrderId is specified, then FulfillmentChannels, OrderStatuses, PaymentMethod, LastUpdatedAfter, LastUpdatedBefore, and BuyerEmail cannot be specified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ship_service_level": {"name": "ship_service_level", "description": "The order's shipment service level.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipment_service_level_category": {"name": "shipment_service_level_category", "description": "The shipment service level category for the order. Possible values: Expedited, FreeEconomy, NextDay, Priority, SameDay, SecondDay, Scheduled, and Standard.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_address_line_1": {"name": "default_ship_from_location_address_line_1", "description": "Street address of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_address_line_2": {"name": "default_ship_from_location_address_line_2", "description": "Additional street address information of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_address_line_3": {"name": "default_ship_from_location_address_line_3", "description": "Additional street address informatio of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_address_type": {"name": "default_ship_from_location_address_type", "description": "Address type of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_city": {"name": "default_ship_from_location_city", "description": "City of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_country_code": {"name": "default_ship_from_location_country_code", "description": "Country code (two-character country code, in ISO 3166-1 alpha-2 format.) of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_county": {"name": "default_ship_from_location_county", "description": "County of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_district": {"name": "default_ship_from_location_district", "description": "District of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_municipality": {"name": "default_ship_from_location_municipality", "description": "Municipality of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_name": {"name": "default_ship_from_location_name", "description": "Name of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_phone": {"name": "default_ship_from_location_phone", "description": "Associated phone number of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.\n\nNote: In some cases, the buyer phone number is suppressed:\na. Phone is suppressed for all AFN (fulfilled by Amazon) orders.\nb. Phone is suppressed for the shipped MFN (fulfilled by seller) order when the current date is past the Latest Delivery Date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_postal_code": {"name": "default_ship_from_location_postal_code", "description": "Postal code of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_ship_from_location_state_or_region": {"name": "default_ship_from_location_state_or_region", "description": "State or region of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_address_line_1": {"name": "shipping_address_address_line_1", "description": "Street address of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_address_line_2": {"name": "shipping_address_address_line_2", "description": "Line 2 of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_address_line_3": {"name": "shipping_address_address_line_3", "description": "Line 3 of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_address_type": {"name": "shipping_address_address_type", "description": "Address type of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_city": {"name": "shipping_address_city", "description": "City of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_country_code": {"name": "shipping_address_country_code", "description": "Country code (two-character country code, in ISO 3166-1 alpha-2 format) of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_county": {"name": "shipping_address_county", "description": "County of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_district": {"name": "shipping_address_district", "description": "District of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_municipality": {"name": "shipping_address_municipality", "description": "Municipality of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_name": {"name": "shipping_address_name", "description": "Name of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_phone": {"name": "shipping_address_phone", "description": "Phone number of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields.\n3. In some cases, the buyer phone number is suppressed:\n  a. Phone is suppressed for all AFN (fulfilled by Amazon) orders.\n  b. Phone is suppressed for the shipped MFN (fulfilled by seller) order when the current date is past the Latest Delivery Date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_postal_code": {"name": "shipping_address_postal_code", "description": "Postal code of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_state_or_region": {"name": "shipping_address_state_or_region", "description": "State or region of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`asp_tests`.`orders`", "created_at": 1743628945.730015, "unrendered_database": "{% if target.type not in (\"spark\") %}{{ var(\"amazon_selling_partner_database\", target.database) }}{% endif %}", "unrendered_schema": "{{ var(\"amazon_selling_partner_schema\", \"amazon_selling_partner\") }}"}, "source.amazon_selling_partner.amazon_selling_partner.order_item": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "order_item", "resource_type": "source", "package_name": "amazon_selling_partner", "path": "models/staging/src_amazon_selling_partner.yml", "original_file_path": "models/staging/src_amazon_selling_partner.yml", "unique_id": "source.amazon_selling_partner.amazon_selling_partner.order_item", "fqn": ["amazon_selling_partner", "staging", "amazon_selling_partner", "order_item"], "source_name": "amazon_selling_partner", "source_description": "", "loader": "fivetran", "identifier": "order_item", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A single order item.", "columns": {"order_item_id": {"name": "order_item_id", "description": "An Amazon-defined item identifier for the associated item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "amazon_order_id": {"name": "amazon_order_id", "description": "An Amazon-defined order identifier, in 3-7-7 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_gift": {"name": "is_gift", "description": "Boolean that tndicates whether the item is a gift.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_transparency": {"name": "is_transparency", "description": "When true, the ASIN is enrolled in Transparency. The Transparency serial number that you must submit is determined by:\n\n- 1D or 2D Barcode: This has a T logo. Submit either the 29-character alpha-numeric identifier beginning with AZ or ZA, or the 38-character Serialized Global Trade Item Number (SGTIN).\n- 2D Barcode SN: Submit the 7- to 20-character serial number barcode, which likely has the prefix SN. The serial number is applied to the same side of the packaging as the GTIN (UPC/EAN/ISBN) barcode.\n- QR code SN: Submit the URL that the QR code generates.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "asin": {"name": "asin", "description": "The item's Amazon Standard Identification Number (ASIN).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "buyer_requested_cancel_is_buyer_requested_cancel": {"name": "buyer_requested_cancel_is_buyer_requested_cancel", "description": "Boolean indicating whether the buyer has requested cancellation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "buyer_requested_cancel_buyer_cancel_reason": {"name": "buyer_requested_cancel_buyer_cancel_reason", "description": "The reason that the buyer requested cancellation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "condition_id": {"name": "condition_id", "description": "The condition of the item. Possible values: New, Used, Collectible, Refurbished, Preorder, and Club.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "condition_note": {"name": "condition_note", "description": "The condition of the item, as described by the seller.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "condition_subtype_id": {"name": "condition_subtype_id", "description": "The subcondition of the item.\n\nPossible values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, Any, and Other.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "deemed_reseller_category": {"name": "deemed_reseller_category", "description": "The category of deemed reseller. This applies to selling partners that are not based in the EU and is used to help them meet the VAT Deemed Reseller tax laws in the EU and UK. \nEither `IOSS` (Import one stop shop. The item being purchased is not held in the EU for shipment) or `UOSS` (Union one stop shop. The item being purchased is held in the EU for shipment).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ioss_number": {"name": "ioss_number", "description": "The IOSS number of the marketplace. Sellers shipping to the EU from outside the EU must provide this IOSS number to their carrier when Amazon has collected the VAT on the sale.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_price_amount": {"name": "item_price_amount", "description": "The selling price of the order item. Note that an order item is an item and a quantity. This means that the value of ItemPrice is equal to the selling price of the item multiplied by the quantity ordered. ItemPrice excludes ShippingPrice and GiftWrapPrice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_price_currency_code": {"name": "item_price_currency_code", "description": "The three-digit currency code that the `item_price_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_tax_amount": {"name": "item_tax_amount", "description": "The tax on the item price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_tax_currency_code": {"name": "item_tax_currency_code", "description": "The three-digit currency code that the `item_tax_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "points_granted_monetary_amount": {"name": "points_granted_monetary_amount", "description": "The monetary value of the Amazon Points granted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "points_granted_monetary_currency_code": {"name": "points_granted_monetary_currency_code", "description": "The three-digit currency code that the `points_granted_monetary_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "points_granted_points_number": {"name": "points_granted_points_number", "description": "The number of Amazon Points granted with the purchase of an item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price_designation": {"name": "price_designation", "description": "Indicates that the selling price is a special price that is only available for Amazon Business orders. For more information about the Amazon Business Seller Program, refer to the Amazon Business [website](https://business.amazon.com/?ref_=b2b_mcs_L0_mlpr). Possible value(s): BusinessPrice", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_info_detail_number_of_items": {"name": "product_info_detail_number_of_items", "description": "The total number of items that are included in the ASIN.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "promotion_discount_amount": {"name": "promotion_discount_amount", "description": "The total of all promotional discounts in the offer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "promotion_discount_currency_code": {"name": "promotion_discount_currency_code", "description": "The three-digit currency code that the `promotion_discount_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "promotion_discount_tax_currency_code": {"name": "promotion_discount_tax_currency_code", "description": "The three-digit currency code that the `promotion_discount_tax_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "promotion_discount_tax_amount": {"name": "promotion_discount_tax_amount", "description": "The tax on the total of all promotional discounts in the offer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "quantity_ordered": {"name": "quantity_ordered", "description": "The number of items in the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "quantity_shipped": {"name": "quantity_shipped", "description": "The number of items shipped.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "scheduled_delivery_end_date": {"name": "scheduled_delivery_end_date", "description": "The end date of the scheduled delivery window in the time zone for the order destination. In ISO 8601 date time format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "scheduled_delivery_start_date": {"name": "scheduled_delivery_start_date", "description": "The start date of the scheduled delivery window in the time zone for the order destination. In ISO 8601 date time format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "seller_sku": {"name": "seller_sku", "description": "The item's seller stock keeping unit (SKU).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "serial_number_required": {"name": "serial_number_required", "description": "When true, the product type for this item has a serial number. Only returned for Amazon Easy Ship orders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_discount_amount": {"name": "shipping_discount_amount", "description": "The discount on the shipping price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_discount_currency_code": {"name": "shipping_discount_currency_code", "description": "The three-digit currency code that the `shipping_discount_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_discount_tax_amount": {"name": "shipping_discount_tax_amount", "description": "The tax on the discount on the shipping price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_discount_tax_currency_code": {"name": "shipping_discount_tax_currency_code", "description": "The three-digit currency code that the `shipping_discount_tax_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_price_amount": {"name": "shipping_price_amount", "description": "The item's shipping price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_price_currency_code": {"name": "shipping_price_currency_code", "description": "The three-digit currency code that the `shipping_price_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_tax_amount": {"name": "shipping_tax_amount", "description": "The tax on the shipping price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_tax_currency_code": {"name": "shipping_tax_currency_code", "description": "The three-digit currency code that the `shipping_tax_amount` is listed in. In ISO 4217 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "store_chain_store_id": {"name": "store_chain_store_id", "description": "The store chain store identifier. Linked to a specific store in a store chain.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tax_collection_model": {"name": "tax_collection_model", "description": "The tax collection model applied to the item. Possible value(s) can be found [here](https://developer-docs.amazon.com/sp-api/docs/orders-api-v0-reference#model).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tax_collection_responsible_party": {"name": "tax_collection_responsible_party", "description": "The party responsible for withholding the taxes and remitting them to the taxing authority. Possible value(s) can be found [here](https://developer-docs.amazon.com/sp-api/docs/orders-api-v0-reference#responsibleparty).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "The item's title.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`asp_tests`.`order_item`", "created_at": 1743628945.7308621, "unrendered_database": "{% if target.type not in (\"spark\") %}{{ var(\"amazon_selling_partner_database\", target.database) }}{% endif %}", "unrendered_schema": "{{ var(\"amazon_selling_partner_schema\", \"amazon_selling_partner\") }}"}, "source.amazon_selling_partner.amazon_selling_partner.order_item_promotion_id": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "order_item_promotion_id", "resource_type": "source", "package_name": "amazon_selling_partner", "path": "models/staging/src_amazon_selling_partner.yml", "original_file_path": "models/staging/src_amazon_selling_partner.yml", "unique_id": "source.amazon_selling_partner.amazon_selling_partner.order_item_promotion_id", "fqn": ["amazon_selling_partner", "staging", "amazon_selling_partner", "order_item_promotion_id"], "source_name": "amazon_selling_partner", "source_description": "", "loader": "fivetran", "identifier": "order_item_promotion_id", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table associating order items and any promotions used on them.", "columns": {"promotion_id": {"name": "promotion_id", "description": "Promotion identifier provided by the seller when the promotion was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "amazon_order_id": {"name": "amazon_order_id", "description": "An Amazon-defined order identifier, in 3-7-7 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_item_id": {"name": "order_item_id", "description": "An Amazon-defined item identifier for the associated item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`asp_tests`.`order_item_promotion_id`", "created_at": 1743628945.7309859, "unrendered_database": "{% if target.type not in (\"spark\") %}{{ var(\"amazon_selling_partner_database\", target.database) }}{% endif %}", "unrendered_schema": "{{ var(\"amazon_selling_partner_schema\", \"amazon_selling_partner\") }}"}, "source.amazon_selling_partner.amazon_selling_partner.payment_method_detail_item": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "payment_method_detail_item", "resource_type": "source", "package_name": "amazon_selling_partner", "path": "models/staging/src_amazon_selling_partner.yml", "original_file_path": "models/staging/src_amazon_selling_partner.yml", "unique_id": "source.amazon_selling_partner.amazon_selling_partner.payment_method_detail_item", "fqn": ["amazon_selling_partner", "staging", "amazon_selling_partner", "payment_method_detail_item"], "source_name": "amazon_selling_partner", "source_description": "", "loader": "fivetran", "identifier": "payment_method_detail_item", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A list of payment methods for the order.", "columns": {"amazon_order_id": {"name": "amazon_order_id", "description": "An Amazon-defined order identifier, in 3-7-7 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "method": {"name": "method", "description": "A sub-payment method for a COD order. Possible values: COD (Cash on delivery), GC (Gift card), CVS (Convenience Store), PointsAccount (Amazon Points), Invoice, or Other.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`asp_tests`.`payment_method_detail_item`", "created_at": 1743628945.7310998, "unrendered_database": "{% if target.type not in (\"spark\") %}{{ var(\"amazon_selling_partner_database\", target.database) }}{% endif %}", "unrendered_schema": "{{ var(\"amazon_selling_partner_schema\", \"amazon_selling_partner\") }}"}, "source.amazon_selling_partner.amazon_selling_partner.item_product_type": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "item_product_type", "resource_type": "source", "package_name": "amazon_selling_partner", "path": "models/staging/src_amazon_selling_partner.yml", "original_file_path": "models/staging/src_amazon_selling_partner.yml", "unique_id": "source.amazon_selling_partner.amazon_selling_partner.item_product_type", "fqn": ["amazon_selling_partner", "staging", "amazon_selling_partner", "item_product_type"], "source_name": "amazon_selling_partner", "source_description": "", "loader": "fivetran", "identifier": "item_product_type", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Product types associated with the Amazon catalog item.", "columns": {"asin": {"name": "asin", "description": "The item's Amazon Standard Identification Number (ASIN).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketplace_id": {"name": "marketplace_id", "description": "The unobfuscated marketplace identifier. Different marketplace values can be found [here](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_type": {"name": "product_type", "description": "Name of the product type associated with the Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "UTC timestamp of when the row was last successfully synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`asp_tests`.`item_product_type`", "created_at": 1743628945.731216, "unrendered_database": "{% if target.type not in (\"spark\") %}{{ var(\"amazon_selling_partner_database\", target.database) }}{% endif %}", "unrendered_schema": "{{ var(\"amazon_selling_partner_schema\", \"amazon_selling_partner\") }}"}, "source.amazon_selling_partner.amazon_selling_partner.item_dimension": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "item_dimension", "resource_type": "source", "package_name": "amazon_selling_partner", "path": "models/staging/src_amazon_selling_partner.yml", "original_file_path": "models/staging/src_amazon_selling_partner.yml", "unique_id": "source.amazon_selling_partner.amazon_selling_partner.item_dimension", "fqn": ["amazon_selling_partner", "staging", "amazon_selling_partner", "item_dimension"], "source_name": "amazon_selling_partner", "source_description": "", "loader": "fivetran", "identifier": "item_dimension", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Dimensions of an Amazon catalog item or item in its packaging.", "columns": {"asin": {"name": "asin", "description": "The item's Amazon Standard Identification Number (ASIN).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketplace_id": {"name": "marketplace_id", "description": "The unobfuscated marketplace identifier. Different marketplace values can be found [here](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_height_unit": {"name": "item_height_unit", "description": "Measurement unit of the dimension value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_height_value": {"name": "item_height_value", "description": "Height of an item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_length_unit": {"name": "item_length_unit", "description": "Measurement unit of the dimension value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_length_value": {"name": "item_length_value", "description": "Length of an item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_weight_unit": {"name": "item_weight_unit", "description": "Measurement unit of the dimension value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_weight_value": {"name": "item_weight_value", "description": "Weight of an item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_width_unit": {"name": "item_width_unit", "description": "Measurement unit of the dimension value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_width_value": {"name": "item_width_value", "description": "Width of an item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "package_height_unit": {"name": "package_height_unit", "description": "Measurement unit of the dimension value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "package_height_value": {"name": "package_height_value", "description": "Height of an item package.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "package_length_unit": {"name": "package_length_unit", "description": "Measurement unit of the dimension value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "package_length_value": {"name": "package_length_value", "description": "Length of an item package.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "package_weight_unit": {"name": "package_weight_unit", "description": "Measurement unit of the dimension value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "package_weight_value": {"name": "package_weight_value", "description": "Weight of an item package.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "package_width_unit": {"name": "package_width_unit", "description": "Measurement unit of the dimension value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "package_width_value": {"name": "package_width_value", "description": "Width of an item package.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "UTC timestamp of when the row was last successfully synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`asp_tests`.`item_dimension`", "created_at": 1743628945.731348, "unrendered_database": "{% if target.type not in (\"spark\") %}{{ var(\"amazon_selling_partner_database\", target.database) }}{% endif %}", "unrendered_schema": "{{ var(\"amazon_selling_partner_schema\", \"amazon_selling_partner\") }}"}, "source.amazon_selling_partner.amazon_selling_partner.item_image": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "item_image", "resource_type": "source", "package_name": "amazon_selling_partner", "path": "models/staging/src_amazon_selling_partner.yml", "original_file_path": "models/staging/src_amazon_selling_partner.yml", "unique_id": "source.amazon_selling_partner.amazon_selling_partner.item_image", "fqn": ["amazon_selling_partner", "staging", "amazon_selling_partner", "item_image"], "source_name": "amazon_selling_partner", "source_description": "", "loader": "fivetran", "identifier": "item_image", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Images for an item in the Amazon catalog.", "columns": {"asin": {"name": "asin", "description": "The item's Amazon Standard Identification Number (ASIN).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketplace_id": {"name": "marketplace_id", "description": "The unobfuscated marketplace identifier. Different marketplace values can be found [here](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "link": {"name": "link", "description": "Link, or URL, for the image.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant": {"name": "variant", "description": "Variant of the image. Possible values can be found [here](https://developer-docs.amazon.com/sp-api/docs/catalog-items-api-v2022-04-01-reference#variant).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "height": {"name": "height", "description": "Height of the image in pixels.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "width": {"name": "width", "description": "Width of the image in pixels.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "UTC timestamp of when the row was last successfully synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`asp_tests`.`item_image`", "created_at": 1743628945.731963, "unrendered_database": "{% if target.type not in (\"spark\") %}{{ var(\"amazon_selling_partner_database\", target.database) }}{% endif %}", "unrendered_schema": "{{ var(\"amazon_selling_partner_schema\", \"amazon_selling_partner\") }}"}, "source.amazon_selling_partner.amazon_selling_partner.item_summary": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "item_summary", "resource_type": "source", "package_name": "amazon_selling_partner", "path": "models/staging/src_amazon_selling_partner.yml", "original_file_path": "models/staging/src_amazon_selling_partner.yml", "unique_id": "source.amazon_selling_partner.amazon_selling_partner.item_summary", "fqn": ["amazon_selling_partner", "staging", "amazon_selling_partner", "item_summary"], "source_name": "amazon_selling_partner", "source_description": "", "loader": "fivetran", "identifier": "item_summary", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Summary details of an Amazon catalog item for the indicated Amazon marketplace.", "columns": {"asin": {"name": "asin", "description": "The item's Amazon Standard Identification Number (ASIN).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketplace_id": {"name": "marketplace_id", "description": "The unobfuscated marketplace identifier. Different marketplace values can be found [here](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "adult_product": {"name": "adult_product", "description": "Identifies an Amazon catalog item is intended for an adult audience or is sexual in nature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "autographed": {"name": "autographed", "description": "Identifies an Amazon catalog item is autographed by a player or celebrity.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "brand": {"name": "brand", "description": "Name of the brand associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "display_name": {"name": "display_name", "description": "Display name for the classification.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "classification_id": {"name": "classification_id", "description": "Identifier of the classification associated with the sales rank.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "color": {"name": "color", "description": "Name of the color associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "contributors": {"name": "contributors", "description": "Individual contributors to the creation of an item, such as the authors or actors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_classification": {"name": "item_classification", "description": "Classification type associated with the Amazon catalog item. Possible values can be found [here](https://developer-docs.amazon.com/sp-api/docs/catalog-items-api-v2022-04-01-reference#itemclassification).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_name": {"name": "item_name", "description": "Name, or title, associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "manufacturer": {"name": "manufacturer", "description": "Name of the manufacturer associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "memorabilia": {"name": "memorabilia", "description": "Identifies an Amazon catalog item is memorabilia valued for its connection with historical events, culture, or entertainment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "model_number": {"name": "model_number", "description": "Model number associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "package_quantity": {"name": "package_quantity", "description": "Quantity of an Amazon catalog item in one package.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "part_number": {"name": "part_number", "description": "Part number associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "release_date": {"name": "release_date", "description": "First date on which an Amazon catalog item is shippable to customers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "size": {"name": "size", "description": "Name of the size associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "style": {"name": "style", "description": "Name of the style associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "trade_in_eligible": {"name": "trade_in_eligible", "description": "Identifies an Amazon catalog item is eligible for trade-in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "website_display_group": {"name": "website_display_group", "description": "Identifier of the website display group associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "website_display_group_name": {"name": "website_display_group_name", "description": "Display name of the website display group associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "UTC timestamp of when the row was last successfully synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`asp_tests`.`item_summary`", "created_at": 1743628945.7321112, "unrendered_database": "{% if target.type not in (\"spark\") %}{{ var(\"amazon_selling_partner_database\", target.database) }}{% endif %}", "unrendered_schema": "{{ var(\"amazon_selling_partner_schema\", \"amazon_selling_partner\") }}"}, "source.amazon_selling_partner.amazon_selling_partner.item_display_group_sales_rank": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "item_display_group_sales_rank", "resource_type": "source", "package_name": "amazon_selling_partner", "path": "models/staging/src_amazon_selling_partner.yml", "original_file_path": "models/staging/src_amazon_selling_partner.yml", "unique_id": "source.amazon_selling_partner.amazon_selling_partner.item_display_group_sales_rank", "fqn": ["amazon_selling_partner", "staging", "amazon_selling_partner", "item_display_group_sales_rank"], "source_name": "amazon_selling_partner", "source_description": "", "loader": "fivetran", "identifier": "item_display_group_sales_rank", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Sales rank of an Amazon catalog item by website display group.", "columns": {"asin": {"name": "asin", "description": "The item's Amazon Standard Identification Number (ASIN).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "website_display_group": {"name": "website_display_group", "description": "Identifier of the website display group associated with an Amazon catalog item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "Title, or name, of the sales rank.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "link": {"name": "link", "description": "Corresponding Amazon retail website link, or URL, for the sales rank.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rank": {"name": "rank", "description": "Sales rank value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "UTC timestamp of when the row was last successfully synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`asp_tests`.`item_display_group_sales_rank`", "created_at": 1743628945.732227, "unrendered_database": "{% if target.type not in (\"spark\") %}{{ var(\"amazon_selling_partner_database\", target.database) }}{% endif %}", "unrendered_schema": "{{ var(\"amazon_selling_partner_schema\", \"amazon_selling_partner\") }}"}, "source.amazon_selling_partner.amazon_selling_partner.item_classification_sales_rank": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "item_classification_sales_rank", "resource_type": "source", "package_name": "amazon_selling_partner", "path": "models/staging/src_amazon_selling_partner.yml", "original_file_path": "models/staging/src_amazon_selling_partner.yml", "unique_id": "source.amazon_selling_partner.amazon_selling_partner.item_classification_sales_rank", "fqn": ["amazon_selling_partner", "staging", "amazon_selling_partner", "item_classification_sales_rank"], "source_name": "amazon_selling_partner", "source_description": "", "loader": "fivetran", "identifier": "item_classification_sales_rank", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Sales rank of an Amazon catalog item by classification.", "columns": {"asin": {"name": "asin", "description": "The item's Amazon Standard Identification Number (ASIN).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "classification_id": {"name": "classification_id", "description": "Identifier of the classification associated with the sales rank.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "Title, or name, of the sales rank.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "link": {"name": "link", "description": "Corresponding Amazon retail website link, or URL, for the sales rank.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rank": {"name": "rank", "description": "Sales rank value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "UTC timestamp of when the row was last successfully synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`asp_tests`.`item_classification_sales_rank`", "created_at": 1743628945.732346, "unrendered_database": "{% if target.type not in (\"spark\") %}{{ var(\"amazon_selling_partner_database\", target.database) }}{% endif %}", "unrendered_schema": "{{ var(\"amazon_selling_partner_schema\", \"amazon_selling_partner\") }}"}, "source.amazon_selling_partner.amazon_selling_partner.item_identifier": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "item_identifier", "resource_type": "source", "package_name": "amazon_selling_partner", "path": "models/staging/src_amazon_selling_partner.yml", "original_file_path": "models/staging/src_amazon_selling_partner.yml", "unique_id": "source.amazon_selling_partner.amazon_selling_partner.item_identifier", "fqn": ["amazon_selling_partner", "staging", "amazon_selling_partner", "item_identifier"], "source_name": "amazon_selling_partner", "source_description": "", "loader": "fivetran", "identifier": "item_identifier", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Identifier associated with the item in the Amazon catalog, such as a UPC or EAN identifier.", "columns": {"asin": {"name": "asin", "description": "The item's Amazon Standard Identification Number (ASIN).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketplace_id": {"name": "marketplace_id", "description": "The unobfuscated marketplace identifier. Different marketplace values can be found [here](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "identifier": {"name": "identifier", "description": "Type of identifier, such as UPC, EAN, or ISBN.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "identifier_type": {"name": "identifier_type", "description": "Type of product identifiers to search the Amazon catalog for. Possible values can be found [here](https://developer-docs.amazon.com/sp-api/docs/catalog-items-api-v2022-04-01-reference#identifierstype)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "UTC timestamp of when the row was last successfully synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`asp_tests`.`item_identifier`", "created_at": 1743628945.732457, "unrendered_database": "{% if target.type not in (\"spark\") %}{{ var(\"amazon_selling_partner_database\", target.database) }}{% endif %}", "unrendered_schema": "{{ var(\"amazon_selling_partner_schema\", \"amazon_selling_partner\") }}"}, "source.amazon_selling_partner.amazon_selling_partner.item_relationship": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "item_relationship", "resource_type": "source", "package_name": "amazon_selling_partner", "path": "models/staging/src_amazon_selling_partner.yml", "original_file_path": "models/staging/src_amazon_selling_partner.yml", "unique_id": "source.amazon_selling_partner.amazon_selling_partner.item_relationship", "fqn": ["amazon_selling_partner", "staging", "amazon_selling_partner", "item_relationship"], "source_name": "amazon_selling_partner", "source_description": "", "loader": "fivetran", "identifier": "item_relationship", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Relationship details for an Amazon catalog item.", "columns": {"child_asin": {"name": "child_asin", "description": "Identifiers (ASIN) of the related item that is a child of this item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "parent_asin": {"name": "parent_asin", "description": "Identifiers (ASIN) of the related item that is a parent of this item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "type": {"name": "type", "description": "Type of relationship. [Possible values](https://developer-docs.amazon.com/sp-api/docs/catalog-items-api-v2022-04-01-reference#type) are `VARIATION` (the Amazon catalog item in the request is a variation parent or variation child of the related item(s) indicated by ASIN) or `PACKAGE_HIERARCHY` (the Amazon catalog item in the request is a package container or is contained by the related item(s) indicated by ASIN).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "UTC timestamp of when the row was last successfully synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`asp_tests`.`item_relationship`", "created_at": 1743628945.7325702, "unrendered_database": "{% if target.type not in (\"spark\") %}{{ var(\"amazon_selling_partner_database\", target.database) }}{% endif %}", "unrendered_schema": "{{ var(\"amazon_selling_partner_schema\", \"amazon_selling_partner\") }}"}, "source.amazon_selling_partner.amazon_selling_partner.fba_inventory_summary": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "fba_inventory_summary", "resource_type": "source", "package_name": "amazon_selling_partner", "path": "models/staging/src_amazon_selling_partner.yml", "original_file_path": "models/staging/src_amazon_selling_partner.yml", "unique_id": "source.amazon_selling_partner.amazon_selling_partner.fba_inventory_summary", "fqn": ["amazon_selling_partner", "staging", "amazon_selling_partner", "fba_inventory_summary"], "source_name": "amazon_selling_partner", "source_description": "", "loader": "fivetran", "identifier": "fba_inventory_summary", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Inventory summary for a specific item.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Fivetran-generated Primary Key for inventory summaries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "asin": {"name": "asin", "description": "The item's Amazon Standard Identification Number (ASIN).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "granularity_id": {"name": "granularity_id", "description": "The granularity ID for the specified granularity type. When granularityType is Marketplace, specify the marketplaceId.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "granularity_type": {"name": "granularity_type", "description": "The granularity type for the inventory aggregation level.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "carrier_damaged_quantity": {"name": "carrier_damaged_quantity", "description": "The number of units in carrier damaged disposition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "condition": {"name": "condition", "description": "The condition of the item as described by the seller (for example, New Item).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_damaged_quantity": {"name": "customer_damaged_quantity", "description": "The number of units in customer damaged disposition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "defective_quantity": {"name": "defective_quantity", "description": "The number of units in defective disposition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "distributor_damaged_quantity": {"name": "distributor_damaged_quantity", "description": "The number of units in distributor damaged disposition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "expired_quantity": {"name": "expired_quantity", "description": "The number of units in expired disposition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fc_processing_quantity": {"name": "fc_processing_quantity", "description": "The number of units that have been sidelined at the fulfillment center for additional processing.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fn_sku": {"name": "fn_sku", "description": "Amazon's fulfillment network SKU identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fullfillable_quantity": {"name": "fullfillable_quantity", "description": "The item quantity that can be picked, packed, and shipped.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inblound_shipped_quantity": {"name": "inblound_shipped_quantity", "description": "The number of units in an inbound shipment that you have notified Amazon about and have provided a tracking number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inbound_receiving_quantity": {"name": "inbound_receiving_quantity", "description": "The number of units that have not yet been received at an Amazon fulfillment center for processing, but are part of an inbound shipment with some units that have already been received and processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inbound_working_quantity": {"name": "inbound_working_quantity", "description": "The number of units in an inbound shipment for which you have notified Amazon.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "last_updated_time": {"name": "last_updated_time", "description": "The date and time that any quantity was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pending_customer_order_quantity": {"name": "pending_customer_order_quantity", "description": "The number of units reserved for customer orders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pending_transshipment_quantity": {"name": "pending_transshipment_quantity", "description": "The number of units being transferred from one fulfillment center to another.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_name": {"name": "product_name", "description": "The localized language product title of the item within the specific marketplace.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "seller_sku": {"name": "seller_sku", "description": "The item's seller stock keeping unit (SKU).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_quantity": {"name": "total_quantity", "description": "The total number of units in an inbound shipment or in Amazon fulfillment centers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_researching_quantity": {"name": "total_researching_quantity", "description": "The total number of units in Amazon's fulfillment network that are currently being picked, packed, and shipped; or are sidelined for measurement, sampling, or other internal processes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_reserved_quantity": {"name": "total_reserved_quantity", "description": "The total number of units in Amazon's fulfillment network that are currently being picked, packed, and shipped; or are sidelined for measurement, sampling, or other internal processes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_unfulfillable_quantity": {"name": "total_unfulfillable_quantity", "description": "The total number of units in Amazon's fulfillment network in unsellable condition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "warehouse_damaged_quantity": {"name": "warehouse_damaged_quantity", "description": "The number of units in warehouse damaged disposition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`asp_tests`.`fba_inventory_summary`", "created_at": 1743628945.7327092, "unrendered_database": "{% if target.type not in (\"spark\") %}{{ var(\"amazon_selling_partner_database\", target.database) }}{% endif %}", "unrendered_schema": "{{ var(\"amazon_selling_partner_schema\", \"amazon_selling_partner\") }}"}, "source.amazon_selling_partner.amazon_selling_partner.fba_inventory_researching_quantity_entry": {"database": "dbt-package-testing", "schema": "asp_tests", "name": "fba_inventory_researching_quantity_entry", "resource_type": "source", "package_name": "amazon_selling_partner", "path": "models/staging/src_amazon_selling_partner.yml", "original_file_path": "models/staging/src_amazon_selling_partner.yml", "unique_id": "source.amazon_selling_partner.amazon_selling_partner.fba_inventory_researching_quantity_entry", "fqn": ["amazon_selling_partner", "staging", "amazon_selling_partner", "fba_inventory_researching_quantity_entry"], "source_name": "amazon_selling_partner", "source_description": "", "loader": "fivetran", "identifier": "fba_inventory_researching_quantity_entry", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The misplaced or warehouse damaged inventory that is actively being confirmed at Amazon fulfillment centers.", "columns": {"inventory_summary_id": {"name": "inventory_summary_id", "description": "Fivetran-generated Primary Key for inventory summaries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "The duration of the research. [Possible values](https://developer-docs.amazon.com/sp-api/docs/fbainventory-api-v1-reference#name) are `researchingQuantityInShortTerm` (Short term for 1-10 days), `researchingQuantityInMidTerm` (Mid term for 11-20 days), and `researchingQuantityInLongTerm` (Long term for 21 days or longer)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "quantity": {"name": "quantity", "description": "The number of units.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "`dbt-package-testing`.`asp_tests`.`fba_inventory_researching_quantity_entry`", "created_at": 1743628945.732814, "unrendered_database": "{% if target.type not in (\"spark\") %}{{ var(\"amazon_selling_partner_database\", target.database) }}{% endif %}", "unrendered_schema": "{{ var(\"amazon_selling_partner_schema\", \"amazon_selling_partner\") }}"}}, "macros": {"macro.dbt_bigquery.date_sharded_table": {"name": "date_sharded_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.124668, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"name": "grant_access_to", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.124898, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"name": "get_partitions_metadata", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.125174, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_table_as": {"name": "bigquery__create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- if partition_config.time_ingestion_partitioning -%}\n    {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n    {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n    {%- set columns = '(' ~ table_dest_columns_csv ~ ')' -%}\n    {%- endif -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n      {%- set contract_config = config.get('contract') -%}\n      {%- if contract_config.enforced -%}\n        {{ get_assert_columns_equivalent(compiled_code) }}\n        {{ get_table_columns_and_constraints() }}\n        {%- set compiled_code = get_select_subquery(compiled_code) %}\n      {% else %}\n        {#-- cannot do contracts at the same time as time ingestion partitioning -#}\n        {{ columns }}\n      {% endif %}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n\n    {{ bigquery_table_options(config, model, temporary) }}\n\n    {#-- PARTITION BY cannot be used with the AS query_statement clause.\n         https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#partition_expression\n    -#}\n    {%- if not partition_config.time_ingestion_partitioning %}\n    as (\n      {{ compiled_code }}\n    );\n    {%- endif %}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n\n    {#-- when a user wants to change the schema of an existing relation, they must intentionally drop the table in the dataset --#}\n    {%- set old_relation = adapter.get_relation(database=relation.database, schema=relation.schema, identifier=relation.identifier) -%}\n    {%- if (old_relation.is_table and (should_full_refresh())) -%}\n      {% do adapter.drop_relation(relation) %}\n    {%- endif -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt.should_full_refresh", "macro.dbt_bigquery.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1282182, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"name": "bigquery__create_view_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  as {{ sql }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.128704, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"name": "bigquery__drop_schema", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.12884, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"name": "bigquery__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1289861, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"name": "bigquery__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1291258, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"name": "bigquery__list_schemas", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.129267, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"name": "bigquery__check_schema_exists", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.129442, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"name": "bigquery__persist_docs", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.129708, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"name": "bigquery__alter_column_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1298618, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"name": "bigquery__alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1302521, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"name": "bigquery__alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.13061, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"name": "bigquery__alter_column_type", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1313128, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"name": "bigquery__test_unique", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1314938, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"name": "bigquery__upload_file", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.131766, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_csv_table": {"name": "bigquery__create_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.132065, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"name": "bigquery__reset_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1322198, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"name": "bigquery__load_csv_rows", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override, model['config']['delimiter']) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.132986, "supported_languages": null}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"name": "bigquery__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1334279, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"name": "materialization_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = bigquery__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1340642, "supported_languages": ["sql"]}, "macro.dbt_bigquery.materialization_table_bigquery": {"name": "materialization_table_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.136405, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n{%- set raw_partition_by = config.get('partition_by', none) -%}\n{%- set raw_cluster_by = config.get('cluster_by', none) -%}\n{%- set enable_list_inference = config.get('enable_list_inference', true) -%}\n{%- set intermediate_format = config.get('intermediate_format', none) -%}\n\n{%- set partition_config = adapter.parse_partition_by(raw_partition_by) %}\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\nspark.conf.set(\"enableListInference\", \"{{ enable_list_inference }}\")\n{% if intermediate_format %}\nspark.conf.set(\"intermediateFormat\", \"{{ intermediate_format }}\")\n{% endif %}\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\n# For writeMethod we need to use \"indirect\" if materializing a partitioned table\n# otherwise we can use \"direct\". Note that indirect will fail if the GCS bucket has a retention policy set on it.\n{%- if partition_config %}\n      {%- set write_method = 'indirect' -%}\n{%- else %}\n      {% set write_method = 'direct' -%}\n{%- endif %}\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"{{ write_method }}\") \\\n  .option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  {%- if partition_config is not none %}\n  {%- if partition_config.data_type | lower in ('date','timestamp','datetime') %}\n  .option(\"partitionField\", \"{{- partition_config.field -}}\") \\\n  {%- if partition_config.granularity is not none %}\n  .option(\"partitionType\", \"{{- partition_config.granularity| upper -}}\") \\\n  {%- endif %}\n  {%- endif %}\n  {%- endif %}\n  {%- if raw_cluster_by is not none %}\n  .option(\"clusteredFields\", \"{{- raw_cluster_by | join(',') -}}\") \\\n  {%- endif %}\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1378949, "supported_languages": null}, "macro.dbt_bigquery.materialization_copy_bigquery": {"name": "materialization_copy_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(ref_table.get('package'), ref_table.name, version=ref_table.get('version'))) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1391418, "supported_languages": ["sql"]}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"name": "dbt_bigquery_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite', 'microbatch'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite', 'microbatch'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% if strategy == 'microbatch' %}\n    {% do bq_validate_microbatch_config(config) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_validate_microbatch_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1409202, "supported_languages": null}, "macro.dbt_bigquery.source_sql_with_partition": {"name": "source_sql_with_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.source_sql_with_partition", "macro_sql": "{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(partition_by, source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.141199, "supported_languages": null}, "macro.dbt_bigquery.bq_create_table_as": {"name": "bq_create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_create_table_as", "macro_sql": "{% macro bq_create_table_as(partition_by, temporary, relation, compiled_code, language='sql') %}\n  {%- set _dbt_max_partition = declare_dbt_max_partition(this, partition_by, compiled_code, language) -%}\n  {% if partition_by.time_ingestion_partitioning and language == 'python' %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models do not support ingestion time partitioning\"\n    ) %}\n  {% elif partition_by.time_ingestion_partitioning and language == 'sql' %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_table_as(temporary, relation, compiled_code)) %}\n    {{ return(_dbt_max_partition + bq_insert_into_ingestion_time_partitioned_table_sql(relation, compiled_code)) }}\n  {% else %}\n    {{ return(_dbt_max_partition + create_table_as(temporary, relation, compiled_code, language)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.run_query", "macro.dbt.create_table_as", "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.141912, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"name": "bq_generate_incremental_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% elif strategy == 'microbatch' %}\n\n    {% set build_sql = bq_generate_microbatch_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro.dbt_bigquery.bq_generate_microbatch_build_sql", "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1428149, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"name": "materialization_incremental_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy not in ['insert_overwrite', 'microbatch'] %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite' or 'microbatch'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ bq_create_table_as(partition_by, True, tmp_relation, compiled_code, language) }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {#--  Add time ingestion pseudo column to destination column as not part of the 'schema' but still need it for actual data insertion --#}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(partition_by, dest_columns) %}\n    {% endif %}\n\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {%- if tmp_relation_exists -%}\n    {{ adapter.drop_relation(tmp_relation) }}\n  {%- endif -%}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.146683, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"name": "bigquery__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.147069, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"name": "bigquery__create_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.147226, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"name": "bigquery__post_snapshot", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1473641, "supported_languages": null}, "macro.dbt_bigquery.bigquery__can_clone_table": {"name": "bigquery__can_clone_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__can_clone_table", "macro_sql": "{% macro bigquery__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.147553, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_clone": {"name": "bigquery__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_clone", "macro_sql": "{% macro bigquery__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1476889, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql": {"name": "bq_generate_incremental_merge_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/merge.sql", "original_file_path": "macros/materializations/incremental_strategy/merge.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql", "macro_sql": "{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set avoid_require_partition_filter = predicate_for_avoid_require_partition_filter() -%}\n    {%- if avoid_require_partition_filter is not none -%}\n        {% do predicates.append(avoid_require_partition_filter) %}\n    {%- endif -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1487842, "supported_languages": null}, "macro.dbt_bigquery.declare_dbt_max_partition": {"name": "declare_dbt_max_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type_for_partition() }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.149343, "supported_languages": null}, "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter": {"name": "predicate_for_avoid_require_partition_filter", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter", "macro_sql": "{% macro predicate_for_avoid_require_partition_filter(target='DBT_INTERNAL_DEST') %}\n\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- set predicate = none -%}\n\n    {% if partition_config and config.get('require_partition_filter') -%}\n        {%- set partition_field = partition_config.time_partitioning_field() if partition_config.time_ingestion_partitioning else partition_config.field -%}\n        {% set predicate %}\n            (\n                `{{ target }}`.`{{ partition_field }}` is null\n                or `{{ target }}`.`{{ partition_field }}` is not null\n            )\n        {% endset %}\n    {%- endif -%}\n\n    {{ return(predicate) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.149927, "supported_languages": null}, "macro.dbt_bigquery.bq_validate_microbatch_config": {"name": "bq_validate_microbatch_config", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/microbatch.sql", "original_file_path": "macros/materializations/incremental_strategy/microbatch.sql", "unique_id": "macro.dbt_bigquery.bq_validate_microbatch_config", "macro_sql": "{% macro bq_validate_microbatch_config(config) %}\n  {% if config.get(\"partition_by\") is none %}\n    {% set missing_partition_msg -%}\n    The 'microbatch' strategy requires a `partition_by` config.\n    {%- endset %}\n    {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n  {% endif %}\n\n  {% if config.get(\"partition_by\").granularity != config.get('batch_size') %}\n    {% set invalid_partition_by_granularity_msg -%}\n    The 'microbatch' strategy requires a `partition_by` config with the same granularity as its configured `batch_size`.\n    Got:\n      `batch_size`: {{ config.get('batch_size') }}\n      `partition_by.granularity`: {{ config.get(\"partition_by\").granularity }}\n    {%- endset %}\n    {% do exceptions.raise_compiler_error(invalid_partition_by_granularity_msg) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.150708, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_microbatch_build_sql": {"name": "bq_generate_microbatch_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/microbatch.sql", "original_file_path": "macros/materializations/incremental_strategy/microbatch.sql", "unique_id": "macro.dbt_bigquery.bq_generate_microbatch_build_sql", "macro_sql": "{% macro bq_generate_microbatch_build_sql(\n      tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1510751, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql": {"name": "bq_generate_incremental_insert_overwrite_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro_sql": "{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1526341, "supported_languages": null}, "macro.dbt_bigquery.bq_copy_partitions": {"name": "bq_copy_partitions", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_copy_partitions", "macro_sql": "{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.data_type == 'int64' %}\n      {% set partition = partition | as_text %}\n    {% elif partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.153931, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite_sql": {"name": "bq_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_insert_overwrite_sql", "macro_sql": "{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n  {% if partitions is not none and partitions != [] %} {# static #}\n      {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else %} {# dynamic #}\n      {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.154468, "supported_languages": null}, "macro.dbt_bigquery.bq_static_insert_overwrite_sql": {"name": "bq_static_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro_sql": "{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {% if partition_by.time_ingestion_partitioning and tmp_relation_exists -%}\n          select\n            {{ partition_by.insertable_time_partitioning_field() }},\n            * from {{ tmp_relation }}\n          {% elif tmp_relation_exists -%}\n            select\n            * from {{ tmp_relation }}\n          {%- elif partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n          {%- else -%}\n            {{sql}}\n          {%- endif %}\n\n        )\n      {%- endset -%}\n\n      {% if copy_partitions %}\n          {% do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n      {% else %}\n\n      {#-- In case we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"temporary table exists\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      -- 1. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header = not tmp_relation_exists) }};\n\n      {%- if tmp_relation_exists -%}\n      -- 2. clean up the temp table\n      drop table if exists {{ tmp_relation }};\n      {%- endif -%}\n\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.bq_copy_partitions", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.155427, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql": {"name": "bq_dynamic_copy_partitions_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {%- if tmp_relation_exists is false -%}\n  {# We run temp table creation in a separated script to move to partitions copy if it doesn't already exist #}\n    {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n      {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql')\n    }}\n    {%- endcall %}\n  {%- endif -%}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.bq_copy_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.156096, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql": {"name": "bq_dynamic_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type_for_partition() }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n      {%- set partition_field = partition_by.time_partitioning_field() if partition_by.time_ingestion_partitioning else partition_by.render_wrapped() -%}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              -- IGNORE NULLS: this needs to be aligned to _dbt_max_partition, which ignores null\n              array_agg(distinct {{ partition_field }} IGNORE NULLS)\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.157165, "supported_languages": null}, "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql": {"name": "wrap_with_time_ingestion_partitioning_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro_sql": "{% macro wrap_with_time_ingestion_partitioning_sql(partition_by, sql, is_nested) %}\n\n  select TIMESTAMP({{ partition_by.field }}) as {{ partition_by.insertable_time_partitioning_field() }}, * EXCEPT({{ partition_by.field }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.157789, "supported_languages": null}, "macro.dbt_bigquery.get_quoted_with_types_csv": {"name": "get_quoted_with_types_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_quoted_with_types_csv", "macro_sql": "{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1581912, "supported_languages": null}, "macro.dbt_bigquery.columns_without_partition_fields_csv": {"name": "columns_without_partition_fields_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro_sql": "{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_quoted_with_types_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.158439, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql": {"name": "bq_insert_into_ingestion_time_partitioned_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro_sql": "{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {{ sql_header if sql_header is not none }}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} ({{ partition_by.insertable_time_partitioning_field() }}, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, False) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1590972, "supported_languages": null}, "macro.dbt_bigquery.get_columns_with_types_in_query_sql": {"name": "get_columns_with_types_in_query_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro_sql": "{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.159439, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"name": "bigquery__drop_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n    {% do adapter.drop_relation(relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.159613, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"name": "bigquery_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/options.sql", "original_file_path": "macros/relations/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.160033, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"name": "cluster_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/cluster.sql", "original_file_path": "macros/relations/cluster.sql", "unique_id": "macro.dbt_bigquery.cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.16048, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"name": "bigquery__rename_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.160675, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"name": "partition_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/partition.sql", "original_file_path": "macros/relations/partition.sql", "unique_id": "macro.dbt_bigquery.partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.time_ingestion_partitioning -%}\n        partition by {{ partition_config.render_wrapped() }}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.161442, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_materialized_view": {"name": "bigquery__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_materialized_view", "macro_sql": "{% macro bigquery__drop_materialized_view(relation) %}\n    drop materialized view if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.161588, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql": {"name": "bigquery__get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_replace_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_relation_config(config.model) -%}\n\n    create or replace materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.16215, "supported_languages": null}, "macro.dbt_bigquery.bigquery__refresh_materialized_view": {"name": "bigquery__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt_bigquery.bigquery__refresh_materialized_view", "macro_sql": "{% macro bigquery__refresh_materialized_view(relation) %}\n    call bq.refresh_materialized_view('{{ relation.database }}.{{ relation.schema }}.{{ relation.identifier }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.162366, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql": {"name": "bigquery__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n    {% else %}\n\n        alter materialized view {{ relation }}\n            set {{ bigquery_options(configuration_changes.options.context.as_ddl_dict()) }}\n\n    {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.162843, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes": {"name": "bigquery__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes", "macro_sql": "{% macro bigquery__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = adapter.describe_relation(existing_relation) %}\n    {% set _configuration_changes = existing_relation.materialized_view_config_changeset(_existing_materialized_view, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.163132, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql": {"name": "bigquery__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_create_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_relation_config(config.model) -%}\n\n    create materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1637068, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_table": {"name": "bigquery__drop_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_table", "macro_sql": "{% macro bigquery__drop_table(relation) %}\n    drop table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1638489, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"name": "bigquery_table_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/options.sql", "original_file_path": "macros/relations/table/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.164138, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_rename_table_sql": {"name": "bigquery__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_rename_table_sql", "macro_sql": "{%- macro bigquery__get_rename_table_sql(relation, new_name) -%}\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1643069, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_view": {"name": "bigquery__drop_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_view", "macro_sql": "{% macro bigquery__drop_view(relation) %}\n    drop view if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.164522, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_view": {"name": "bigquery__create_or_replace_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_view", "macro_sql": "{% macro bigquery__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt_bigquery.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.165905, "supported_languages": null}, "macro.dbt_bigquery.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1660979, "supported_languages": null}, "macro.dbt_bigquery.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.166311, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"name": "bigquery_view_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/options.sql", "original_file_path": "macros/relations/view/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.166583, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_rename_view_sql": {"name": "bigquery__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_rename_view_sql", "macro_sql": "{%- macro bigquery__get_rename_view_sql(relation, new_name) -%}\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1667562, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog_relations": {"name": "bigquery__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/by_relation.sql", "original_file_path": "macros/catalog/by_relation.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog_relations", "macro_sql": "{% macro bigquery__get_catalog_relations(information_schema, relations) -%}\n\n    {%- if (relations | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards_stage as ({{ _bigquery__get_table_shards_sql(information_schema) }}),\n                table_shards as (\n                    select * from table_shards_stage\n                    where (\n                        {%- for relation in relations -%}\n                            (\n                                upper(table_schema) = upper('{{ relation.schema }}')\n                            and upper(table_name) = upper('{{ relation.identifier }}')\n                            )\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro.dbt_bigquery._bigquery__get_tables_sql", "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro.dbt_bigquery._bigquery__get_columns_sql", "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.167704, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_table_shards_sql": {"name": "_bigquery__get_table_shards_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro_sql": "{% macro _bigquery__get_table_shards_sql(information_schema) %}\n    select\n        tables.project_id as table_catalog,\n        tables.dataset_id as table_schema,\n        coalesce(REGEXP_EXTRACT(tables.table_id, '^(.+)[0-9]{8}$'), tables.table_id) as table_name,\n        tables.table_id as shard_name,\n        REGEXP_EXTRACT(tables.table_id, '^.+([0-9]{8})$') as shard_index,\n        REGEXP_CONTAINS(tables.table_id, '^.+[0-9]{8}$') and tables.type = 1 as is_date_shard,\n        case\n            when materialized_views.table_name is not null then 'materialized view'\n            when tables.type = 1 then 'table'\n            when tables.type = 2 then 'view'\n            else 'external'\n        end as table_type,\n        tables.type = 1 as is_table,\n        JSON_VALUE(table_description.option_value) as table_comment,\n        tables.size_bytes,\n        tables.row_count\n    from {{ information_schema.replace(information_schema_view='__TABLES__') }} tables\n    left join {{ information_schema.replace(information_schema_view='MATERIALIZED_VIEWS') }} materialized_views\n        on materialized_views.table_catalog = tables.project_id\n        and materialized_views.table_schema = tables.dataset_id\n        and materialized_views.table_name = tables.table_id\n    left join {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }} table_description\n        on table_description.table_catalog = tables.project_id\n        and table_description.table_schema = tables.dataset_id\n        and table_description.table_name = tables.table_id\n        and table_description.option_name = 'description'\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.168589, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_tables_sql": {"name": "_bigquery__get_tables_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_tables_sql", "macro_sql": "{% macro _bigquery__get_tables_sql() %}\n    select distinct\n        table_catalog,\n        table_schema,\n        table_name,\n        is_date_shard,\n        table_type,\n        is_table,\n        table_comment\n    from table_shards\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.168681, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_table_stats_sql": {"name": "_bigquery__get_table_stats_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro_sql": "{% macro _bigquery__get_table_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        table_name,\n        max(shard_name) as latest_shard_name,\n        min(shard_index) as shard_min,\n        max(shard_index) as shard_max,\n        count(shard_index) as shard_count,\n        sum(size_bytes) as size_bytes,\n        sum(row_count) as row_count\n    from table_shards\n    group by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.168774, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_columns_sql": {"name": "_bigquery__get_columns_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_columns_sql", "macro_sql": "{% macro _bigquery__get_columns_sql(information_schema) %}\n    select\n        columns.table_catalog,\n        columns.table_schema,\n        columns.table_name as shard_name,\n        coalesce(paths.field_path, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields\n        -- BQ does not treat these nested properties as independent fields\n        row_number() over (\n            partition by\n                columns.table_catalog,\n                columns.table_schema,\n                columns.table_name\n            order by\n                columns.ordinal_position,\n                paths.field_path\n        ) as column_index,\n        coalesce(paths.data_type, '<unknown>') as column_type,\n        paths.description as column_comment,\n        case when columns.is_partitioning_column = 'YES' then 1 else 0 end as is_partitioning_column,\n        case when columns.is_partitioning_column = 'YES' then paths.field_path end as partition_column,\n        case when columns.clustering_ordinal_position is not null then 1 else 0 end as is_clustering_column,\n        case when columns.clustering_ordinal_position is not null then paths.field_path end as cluster_column,\n        columns.clustering_ordinal_position\n    from {{ information_schema.replace(information_schema_view='COLUMNS') }} columns\n    join {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }} paths\n        on paths.table_catalog = columns.table_catalog\n        and paths.table_schema = columns.table_schema\n        and paths.table_name = columns.table_name\n        and paths.column_name = columns.column_name\n    where columns.ordinal_position is not null\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.169077, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_column_stats_sql": {"name": "_bigquery__get_column_stats_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro_sql": "{% macro _bigquery__get_column_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        shard_name,\n        max(is_partitioning_column) = 1 as is_partitioned,\n        max(partition_column) as partition_column,\n        max(is_clustering_column) = 1 as is_clustered,\n        array_to_string(\n            array_agg(\n                cluster_column ignore nulls\n                order by clustering_ordinal_position\n            ), ', '\n        ) as clustering_columns\n    from columns\n    group by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.16918, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_extended_catalog_sql": {"name": "_bigquery__get_extended_catalog_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro_sql": "{% macro _bigquery__get_extended_catalog_sql() %}\n    select\n        tables.table_catalog as table_database,\n        tables.table_schema,\n        case\n            when tables.is_date_shard then concat(tables.table_name, '*')\n            else tables.table_name\n        end as table_name,\n        tables.table_type,\n        tables.table_comment,\n        -- coalesce column metadata fields to ensure they are non-null for catalog generation\n        -- external table columns are not present in COLUMN_FIELD_PATHS\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        coalesce(columns.column_index, 1) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        coalesce(columns.column_comment, '') as column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_stats.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        tables.is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_stats.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        tables.is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_stats.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        tables.is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        table_stats.row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        tables.is_table as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        table_stats.size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        tables.is_table as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        column_stats.partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        column_stats.is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        column_stats.clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        column_stats.is_clustered as `stats__clustering_fields__include`\n\n    from tables\n    join table_stats\n        on table_stats.table_catalog = tables.table_catalog\n        and table_stats.table_schema = tables.table_schema\n        and table_stats.table_name = tables.table_name\n    left join column_stats\n        on column_stats.table_catalog = tables.table_catalog\n        and column_stats.table_schema = tables.table_schema\n        and column_stats.shard_name = table_stats.latest_shard_name\n    left join columns\n        on columns.table_catalog = tables.table_catalog\n        and columns.table_schema = tables.table_schema\n        and columns.shard_name = table_stats.latest_shard_name\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1694431, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"name": "bigquery__get_catalog", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/by_schema.sql", "original_file_path": "macros/catalog/by_schema.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n    {%- if (schemas | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards as (\n                    {{ _bigquery__get_table_shards_sql(information_schema) }}\n                    where (\n                        {%- for schema in schemas -%}\n                            upper(tables.dataset_id) = upper('{{ schema }}')\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro.dbt_bigquery._bigquery__get_tables_sql", "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro.dbt_bigquery._bigquery__get_columns_sql", "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.170309, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt_bigquery.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.17042, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date": {"name": "bigquery__date", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt_bigquery.bigquery__date", "macro_sql": "{% macro bigquery__date(year, month, day) -%}\n    date({{ year }}, {{ month }}, {{ day }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.170621, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_bigquery.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.170839, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.170999, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"name": "bigquery__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.171176, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"name": "bigquery__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1712499, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt_bigquery.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.171356, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.171614, "supported_languages": null}, "macro.dbt_bigquery.bigquery__format_column": {"name": "bigquery__format_column", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__format_column", "macro_sql": "{% macro bigquery__format_column(column) -%}\n  {% set data_type = column.data_type %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.172249, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_schema_sql": {"name": "bigquery__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_schema_sql", "macro_sql": "{% macro bigquery__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {% for col in columns.values() %}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n\n    {%- set columns = adapter.nest_column_data_types(columns) -%}\n    {{ return(dbt.default__get_empty_schema_sql(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1728141, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_select_subquery": {"name": "bigquery__get_select_subquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_select_subquery", "macro_sql": "{% macro bigquery__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.172981, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_column_names": {"name": "bigquery__get_column_names", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_column_names", "macro_sql": "{% macro bigquery__get_column_names() %}\n  {#- loop through nested user_provided_columns to get column names -#}\n    {%- set user_provided_columns = adapter.nest_column_data_types(model['columns']) -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.173447, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_bigquery.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1736739, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_bigquery.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1740391, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_bigquery.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.174496, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n{%- if type.lower().startswith('array') and field is iterable and (field is not string and field is not mapping) and field | length > 0 -%}\n    {#-- Extract nested type from 'array<nested_type>' --#}\n    {% set nested_type = type.lower()[6:-1] %}\n    {#-- BigQuery does not support direct casts to arrays. instead, each element must be cast individually + reaggregated into an array --#}\n    {%- if cast_from_string_unsupported_for(nested_type)  %}\n        (select array_agg(safe_cast(i as {{ nested_type }})) from unnest([\n            {%- for nested_field in field %}\n                {{ nested_field.strip('\"').strip(\"'\") }}{{ ',' if not loop.last }}\n            {%- endfor %}\n        ]) i)\n    {%- else -%}\n        (select array_agg(safe_cast(i as {{nested_type}})) from unnest({{field}}) i)\n    {%- endif -%}\n\n{%- elif type.lower() == 'json' and field is mapping -%}\n    safe_cast(json {{ dbt.string_literal(tojson(field)) }} as json)\n{%- elif cast_from_string_unsupported_for(type) and field is string -%}\n    safe_cast({{field.strip('\"').strip(\"'\")}} as {{type}})\n{%- else -%}\n    safe_cast({{field}} as {{type}})\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.cast_from_string_unsupported_for", "macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.175873, "supported_languages": null}, "macro.dbt_bigquery.cast_from_string_unsupported_for": {"name": "cast_from_string_unsupported_for", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.cast_from_string_unsupported_for", "macro_sql": "{% macro cast_from_string_unsupported_for(type) %}\n    {{ return(type.lower().startswith('struct') or type.lower() == 'geography') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1761339, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt_bigquery.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.176327, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt_bigquery.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.176517, "supported_languages": null}, "macro.dbt_bigquery.bigquery__string_literal": {"name": "bigquery__string_literal", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/string_literal.sql", "original_file_path": "macros/utils/string_literal.sql", "unique_id": "macro.dbt_bigquery.bigquery__string_literal", "macro_sql": "{%- macro bigquery__string_literal(value) -%}\n    '''{{ value }}'''\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.176664, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.176838, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_bigquery.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1769788, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_bigquery.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1 + {{ part_number }}\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.177485, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.177669, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.177977, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.178197, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"name": "bigquery__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.178804, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"name": "bigquery__get_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1790469, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"name": "bigquery__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1792839, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_subquery_sql": {"name": "bigquery__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_subquery_sql", "macro_sql": "{% macro bigquery__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false and current_timestamp() = current_timestamp()\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.179562, "supported_languages": null}, "macro.dbt_bigquery.bigquery__resolve_model_name": {"name": "bigquery__resolve_model_name", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt_bigquery.bigquery__resolve_model_name", "macro_sql": "{% macro bigquery__resolve_model_name(input_model_name) -%}\n    {{ input_model_name | string | replace('`', '') | replace('\"', '\\\"') }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1798022, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.180665, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.180861, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.181004, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.181142, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.18128, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.181584, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1818728, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.182163, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.182606, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.183435, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.185687, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.185857, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.18607, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1870239, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.187191, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.187357, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.188709, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.190166, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1924, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1926908, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.192856, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.192943, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.193085, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.193196, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.193393, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1936388, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and ({{ strategy.row_changed }})\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {%- for col in source_sql_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments", "macro.dbt.snapshot_get_time", "macro.dbt.unique_key_fields", "macro.dbt.equals", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.197118, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.197321, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.197821, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.198238, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.198804, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.1992161, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.199488, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.199811, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.200355, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2005591, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.200757, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.204776, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.206862, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2074392, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.207744, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.207947, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.208548, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.208877, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.209279, "supported_languages": null}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.210784, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.212419, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.212807, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.213055, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.214379, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.214609, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.215241, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2173922, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.219521, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.220381, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.220906, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.221534, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2217758, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.222472, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.22383, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2255738, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.225861, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{ target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n\t\t    {% set source_unique_key = (source ~ \".\" ~ key) | trim %}\n\t\t    {% set target_unique_key = (target ~ \".\" ~ key) | trim %}\n                    {{ equals(source_unique_key, target_unique_key) }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2269802, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.227247, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.227888, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.228466, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2291682, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.229402, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.229585, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.22987, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2300532, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.230336, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2305229, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.230776, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.230956, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.231101, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.231285, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2314408, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2317162, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.235874, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.237184, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2383602, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2395039, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.240316, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.240556, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.24067, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2409549, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.241118, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.243619, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.246123, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.24718, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.248032, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2482638, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2487302, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.248916, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.249046, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.249183, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.249297, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.24945, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.249563, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.250014, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.25019, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2514932, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.251882, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.252247, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.252703, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.252955, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2532291, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.253589, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.253837, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.254294, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2546618, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.254841, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.255032, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.255218, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.255799, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2570298, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2573729, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.257622, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2578838, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.258091, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2583911, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.258591, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.259082, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.259498, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.259698, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2599838, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.260297, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2605598, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.260936, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2613618, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.261662, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.261861, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.262107, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.262227, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.262489, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2626932, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.262986, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.263117, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.263378, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.263519, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.264066, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.264247, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.264522, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.26466, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2649238, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2650602, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.265871, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.265988, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.266496, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.266659, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.26679, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.268086, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2684538, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2687821, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.269035, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.269154, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.26944, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2695959, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.269863, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.270009, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.270661, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.270842, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2712672, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.27194, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2723892, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.272568, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.272746, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.273002, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.273121, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.27366, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.273807, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.274973, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.275166, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.275397, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.275684, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.275831, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2762082, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.276371, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2765481, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.276973, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.277282, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2775738, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.277812, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.278325, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.279616, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.280166, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.280449, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.281217, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2824068, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2831192, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2833438, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.283573, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.283649, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.284184, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.28475, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.284975, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.285344, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.285663, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.28594, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.286248, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.286408, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.286657, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2867782, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.287238, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.287631, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.287808, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.288316, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.288565, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.288673, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.288982, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.289213, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.289438, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.289512, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2897768, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2899132, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.290192, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.290325, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.290781, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.291175, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.291487, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.29165, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.291937, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.292073, "supported_languages": null}, "macro.dbt.equals": {"name": "equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.equals", "macro_sql": "{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.292417, "supported_languages": null}, "macro.dbt.default__equals": {"name": "default__equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.default__equals", "macro_sql": "{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.292703, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.292962, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2931159, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.293358, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.293514, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2937899, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.293979, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.294226, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.294328, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.294606, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.29474, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2949839, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.295085, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2958279, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.295975, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.296134, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2962801, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.296434, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2965791, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.296736, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2969038, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2970638, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.297211, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.297364, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.297504, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.297724, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.297865, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2981381, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2982662, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.298511, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.298614, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.298927, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.299189, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.299337, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.299716, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.2998788, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.300104, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.300382, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3005068, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3008819, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3011122, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3013918, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3015192, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.301835, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.302017, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.302238, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.302422, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.302905, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.30305, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.303188, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.303293, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.default__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.303694, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.303861, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.303936, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.304097, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.304256, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3047528, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3048909, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.305044, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.305425, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.305606, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3057358, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.305892, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.306015, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.306742, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.306967, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.307332, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3076181, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3078568, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.308167, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.308341, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3085172, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.308755, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3093262, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3095522, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.309692, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.310153, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.310542, "supported_languages": null}, "macro.dbt.collect_freshness_custom_sql": {"name": "collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness_custom_sql", "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness_custom_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3107462, "supported_languages": null}, "macro.dbt.default__collect_freshness_custom_sql": {"name": "default__collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness_custom_sql", "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.31105, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.311326, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.311542, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.312771, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.31289, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.313051, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.313226, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.313559, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.313741, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.313858, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.314079, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.31428, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3145092, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.31471, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.314934, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3155851, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3157701, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.316003, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.316226, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.317512, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3179038, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.318083, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.318264, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3187, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.31886, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3190558, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.319221, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3194811, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.319933, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.320817, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.321065, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3212612, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.321511, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3216891, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.321839, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.322021, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.32226, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3225222, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.322814, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3229928, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.323148, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.323325, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.323481, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.323642, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.323788, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.323984, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.324151, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.32537, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.325526, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.325826, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.326036, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3262389, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.326412, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.327601, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.327932, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.32811, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.328442, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.328663, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.329302, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.329556, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3303092, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.332729, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.333272, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.334346, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.334553, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.334645, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.335382, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.335531, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.336326, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.33673, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3372889, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.337793, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.337863, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.338318, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.338559, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.338936, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.339232, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.339544, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.339999, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.34035, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.340977, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.341286, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3416011, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3422022, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.343252, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.343872, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.344942, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.345435, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.34579, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.346331, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3472, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.347611, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.348056, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.348534, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.349015, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.349438, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.349824, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.350315, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      {% if group_by_columns|length() == 0 %}\n        where {{ column_name }} is not null\n        limit 1\n      {% endif %}\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.351157, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.351604, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.352223, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3526158, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.352972, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.353343, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3537002, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3541498, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as {{ dbt.type_numeric() }}) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.355045, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3556108, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.356501, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns, exclude_columns, precision)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.357787, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n\n{%- if compare_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both a compare and an ignore list were provided to the `equality` macro. Only one is allowed\") }}\n{%- endif -%}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{# Ensure there are no extra columns in the compare_model vs model #}\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- do dbt_utils._is_ephemeral(compare_model, 'test_equality') -%}\n\n    {%- set model_columns = adapter.get_columns_in_relation(model) -%}\n    {%- set compare_model_columns = adapter.get_columns_in_relation(compare_model) -%}\n\n\n    {%- if exclude_columns -%}\n        {#-- Lower case ignore columns for easier comparison --#}\n        {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n        {# Filter out the excluded columns #}\n        {%- set include_columns = [] %}\n        {%- set include_model_columns = [] %}\n        {%- for column in model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n        {%- for column in compare_model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_model_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n\n        {%- set compare_columns_set = set(include_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(include_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- else -%}\n        {%- set compare_columns_set = set(model_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(compare_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- endif -%}\n\n    {% if compare_columns_set != compare_model_columns_set %}\n        {{ exceptions.raise_compiler_error(compare_model ~\" has less columns than \" ~ model ~ \", please ensure they have the same columns or use the `compare_columns` or `exclude_columns` arguments to subset them.\") }}\n    {% endif %}\n\n\n{% endif %}\n\n{%- if not precision -%}\n    {%- if not compare_columns -%}\n        {# \n            You cannot get the columns in an ephemeral model (due to not existing in the information schema),\n            so if the user does not provide an explicit list of columns we must error in the case it is ephemeral\n        #}\n        {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n        {%- set compare_columns = adapter.get_columns_in_relation(model)-%}\n\n        {%- if exclude_columns -%}\n            {#-- Lower case ignore columns for easier comparison --#}\n            {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n            {# Filter out the excluded columns #}\n            {%- set include_columns = [] %}\n            {%- for column in compare_columns -%}\n                {%- if column.name | lower not in exclude_columns -%}\n                    {% do include_columns.append(column) %}\n                {%- endif %}\n            {%- endfor %}\n\n            {%- set compare_columns = include_columns | map(attribute='quoted') %}\n        {%- else -%} {# Compare columns provided #}\n            {%- set compare_columns = compare_columns | map(attribute='quoted') %}\n        {%- endif -%}\n    {%- endif -%}\n\n    {% set compare_cols_csv = compare_columns | join(', ') %}\n\n{% else %} {# Precision required #}\n    {#-\n        If rounding is required, we need to get the types, so it cannot be ephemeral even if they provide column names\n    -#}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set columns = adapter.get_columns_in_relation(model) -%}\n\n    {% set columns_list = [] %}\n    {%- for col in columns -%}\n        {%- if (\n                (col.name|lower in compare_columns|map('lower') or not compare_columns) and\n                (col.name|lower not in exclude_columns|map('lower') or not exclude_columns)\n                ) -%}\n            {# Databricks double type is not picked up by any number type checks in dbt #}\n            {%- if col.is_float() or col.is_numeric() or col.data_type == 'double' -%}\n                {# Cast is required due to postgres not having round for a double precision number #}\n                {%- do columns_list.append('round(cast(' ~ col.quoted ~ ' as ' ~ dbt.type_numeric() ~ '),' ~ precision ~ ') as ' ~ col.quoted) -%}\n            {%- else -%} {# Non-numeric type #}\n                {%- do columns_list.append(col.quoted) -%}\n            {%- endif -%}\n        {% endif %}\n    {%- endfor -%}\n\n    {% set compare_cols_csv = columns_list | join(', ') %}\n\n{% endif %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_numeric", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.361611, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.362015, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.362313, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.36319, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3647108, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.36498, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.365142, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.365574, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.365848, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.366032, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.366279, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.366442, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{% if not string %}\n{{ return('') }}\n{% endif %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.367172, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3678641, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.368374, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.368937, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.369169, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.369529, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.369857, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.370442, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3707352, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.371066, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.371548, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.372361, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.372822, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3732119, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.373395, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.373899, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.374381, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3751948, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.375574, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.375852, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.376609, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.378021, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, quote_identifiers)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.378847, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    {%- set current_col_name = adapter.quote(col.column) if quote_identifiers else col.column -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ adapter.quote(exclude_col) if quote_identifiers else exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ adapter.quote(field_name) if quote_identifiers else field_name  }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(current_col_name) }}\n             {% else %}\n           {{ current_col_name }}\n             {% endif %}\n           as {{ cast_to }}) as {{ adapter.quote(value_name) if quote_identifiers else value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.380685, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.380974, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.381108, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.382258, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.385553, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.385844, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.386082, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3867059, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.386928, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }} as tt\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3870962, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3872828, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.387458, "supported_languages": null}, "macro.dbt_utils.databricks__deduplicate": {"name": "databricks__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.databricks__deduplicate", "macro_sql": "\n{%- macro databricks__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3876228, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.387799, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.388133, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.38836, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.388691, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.389212, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.389523, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3898501, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.390733, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.391094, "supported_languages": null}, "macro.dbt_utils.redshift__get_tables_by_pattern_sql": {"name": "redshift__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.redshift__get_tables_by_pattern_sql", "macro_sql": "{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.391804, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.392511, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3929942, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.393752, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3952, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.396062, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3968608, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.397275, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.397971, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.398431, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.398902, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3990889, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.399434, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.3999958, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.400373, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4009778, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.401322, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.401459, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.401593, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.401728, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4021492, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4029171, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4033978, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.403668, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.404217, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.404993, "supported_languages": null}, "macro.fivetran_utils.enabled_vars": {"name": "enabled_vars", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "unique_id": "macro.fivetran_utils.enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.405377, "supported_languages": null}, "macro.fivetran_utils.percentile": {"name": "percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', 'fivetran_utils') (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__percentile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4058251, "supported_languages": null}, "macro.fivetran_utils.default__percentile": {"name": "default__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.405992, "supported_languages": null}, "macro.fivetran_utils.redshift__percentile": {"name": "redshift__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.redshift__percentile", "macro_sql": "{% macro redshift__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4061592, "supported_languages": null}, "macro.fivetran_utils.bigquery__percentile": {"name": "bigquery__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.406325, "supported_languages": null}, "macro.fivetran_utils.postgres__percentile": {"name": "postgres__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.postgres__percentile", "macro_sql": "{% macro postgres__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n    /* have to group by partition field */\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4064698, "supported_languages": null}, "macro.fivetran_utils.spark__percentile": {"name": "spark__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.spark__percentile", "macro_sql": "{% macro spark__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.406633, "supported_languages": null}, "macro.fivetran_utils.pivot_json_extract": {"name": "pivot_json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/pivot_json_extract.sql", "original_file_path": "macros/pivot_json_extract.sql", "unique_id": "macro.fivetran_utils.pivot_json_extract", "macro_sql": "{% macro pivot_json_extract(string, list_of_properties) %}\n\n{%- for property in list_of_properties -%}\n{%- if property is mapping -%}\nreplace( {{ fivetran_utils.json_extract(string, property.name) }}, '\"', '') as {{ property.alias if property.alias else property.name | replace(' ', '_') | replace('.', '_') | lower }}\n\n{%- else -%}\nreplace( {{ fivetran_utils.json_extract(string, property) }}, '\"', '') as {{ property | replace(' ', '_') | lower }}\n\n{%- endif -%}\n{%- if not loop.last -%},{%- endif %}\n{% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4073658, "supported_languages": null}, "macro.fivetran_utils.persist_pass_through_columns": {"name": "persist_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/persist_pass_through_columns.sql", "original_file_path": "macros/persist_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.persist_pass_through_columns", "macro_sql": "{% macro persist_pass_through_columns(pass_through_variable, identifier=none, transform='') %}\n\n{% if var(pass_through_variable, none) %}\n    {% for field in var(pass_through_variable) %}\n        , {{ transform ~ '(' ~ (identifier ~ '.' if identifier else '') ~ (field.alias if field.alias else field.name) ~ ')' }} as {{ field.alias if field.alias else field.name }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4079812, "supported_languages": null}, "macro.fivetran_utils.json_parse": {"name": "json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.json_parse", "macro_sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__json_parse"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4086158, "supported_languages": null}, "macro.fivetran_utils.default__json_parse": {"name": "default__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.default__json_parse", "macro_sql": "{% macro default__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4088519, "supported_languages": null}, "macro.fivetran_utils.redshift__json_parse": {"name": "redshift__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.redshift__json_parse", "macro_sql": "{% macro redshift__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.409086, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_parse": {"name": "bigquery__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.bigquery__json_parse", "macro_sql": "{% macro bigquery__json_parse(string, string_path) %}\n\n \n  json_extract_scalar({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.409496, "supported_languages": null}, "macro.fivetran_utils.postgres__json_parse": {"name": "postgres__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.postgres__json_parse", "macro_sql": "{% macro postgres__json_parse(string, string_path) %}\n\n  {{string}}::json #>> '{ {%- for s in string_path -%}{{ s }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%} }'\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.409729, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_parse": {"name": "snowflake__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.snowflake__json_parse", "macro_sql": "{% macro snowflake__json_parse(string, string_path) %}\n\n  parse_json( {{string}} ) {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.409984, "supported_languages": null}, "macro.fivetran_utils.spark__json_parse": {"name": "spark__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.spark__json_parse", "macro_sql": "{% macro spark__json_parse(string, string_path) %}\n\n  {{string}} : {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.410239, "supported_languages": null}, "macro.fivetran_utils.sqlserver__json_parse": {"name": "sqlserver__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.sqlserver__json_parse", "macro_sql": "{% macro sqlserver__json_parse(string, string_path) %}\n\n  json_value({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.410469, "supported_languages": null}, "macro.fivetran_utils.max_bool": {"name": "max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', 'fivetran_utils') (boolean_field) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__max_bool"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4107451, "supported_languages": null}, "macro.fivetran_utils.default__max_bool": {"name": "default__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.410845, "supported_languages": null}, "macro.fivetran_utils.snowflake__max_bool": {"name": "snowflake__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4109418, "supported_languages": null}, "macro.fivetran_utils.bigquery__max_bool": {"name": "bigquery__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4110389, "supported_languages": null}, "macro.fivetran_utils.calculated_fields": {"name": "calculated_fields", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/calculated_fields.sql", "original_file_path": "macros/calculated_fields.sql", "unique_id": "macro.fivetran_utils.calculated_fields", "macro_sql": "{% macro calculated_fields(variable) -%}\n\n{% if var(variable, none) %}\n    {% for field in var(variable) %}\n        , {{ field.transform_sql }} as {{ field.name }} \n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.411391, "supported_languages": null}, "macro.fivetran_utils.drop_schemas_automation": {"name": "drop_schemas_automation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/drop_schemas_automation.sql", "original_file_path": "macros/drop_schemas_automation.sql", "unique_id": "macro.fivetran_utils.drop_schemas_automation", "macro_sql": "{% macro drop_schemas_automation(drop_target_schema=true) %}\n    {{ return(adapter.dispatch('drop_schemas_automation', 'fivetran_utils')(drop_target_schema)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__drop_schemas_automation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.411834, "supported_languages": null}, "macro.fivetran_utils.default__drop_schemas_automation": {"name": "default__drop_schemas_automation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/drop_schemas_automation.sql", "original_file_path": "macros/drop_schemas_automation.sql", "unique_id": "macro.fivetran_utils.default__drop_schemas_automation", "macro_sql": "{% macro default__drop_schemas_automation(drop_target_schema=true) %}\n\n{% set fetch_list_sql %}\n    {% if target.type not in ('databricks', 'spark') %}\n        select schema_name\n        from \n        {{ wrap_in_quotes(target.database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like '{{ target.schema | lower }}{%- if not drop_target_schema -%}_{%- endif -%}%'\n    {% else %}\n        SHOW SCHEMAS LIKE '{{ target.schema }}{%- if not drop_target_schema -%}_{%- endif -%}*'\n    {% endif %}\n{% endset %}\n\n{% set results = run_query(fetch_list_sql) %}\n\n{% if execute %}\n    {% set results_list = results.columns[0].values() %}\n{% else %}\n    {% set results_list = [] %}\n{% endif %}\n\n{% for schema_to_drop in results_list %}\n    {% do adapter.drop_schema(api.Relation.create(database=target.database, schema=schema_to_drop)) %}\n    {{ print('Schema ' ~ schema_to_drop ~ ' successfully dropped from the ' ~ target.database ~ ' database.\\n')}}\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.wrap_in_quotes", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4127831, "supported_languages": null}, "macro.fivetran_utils.seed_data_helper": {"name": "seed_data_helper", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/seed_data_helper.sql", "original_file_path": "macros/seed_data_helper.sql", "unique_id": "macro.fivetran_utils.seed_data_helper", "macro_sql": "{% macro seed_data_helper(seed_name, warehouses) %}\n\n{% if target.type in warehouses %}\n    {% for w in warehouses %}\n        {% if target.type == w %}\n            {{ return(ref(seed_name ~ \"_\" ~ w ~ \"\")) }}\n        {% endif %}\n    {% endfor %}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.413325, "supported_languages": null}, "macro.fivetran_utils.fill_pass_through_columns": {"name": "fill_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_pass_through_columns.sql", "original_file_path": "macros/fill_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.fill_pass_through_columns", "macro_sql": "{% macro fill_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field is mapping %}\n            {% if field.transform_sql %}\n                , {{ field.transform_sql }} as {{ field.alias if field.alias else field.name }}\n            {% else %}\n                , {{ field.alias if field.alias else field.name }}\n            {% endif %}\n        {% else %}\n        , {{ field }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4139981, "supported_languages": null}, "macro.fivetran_utils.string_agg": {"name": "string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', 'fivetran_utils') (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__string_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.414359, "supported_languages": null}, "macro.fivetran_utils.default__string_agg": {"name": "default__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4144928, "supported_languages": null}, "macro.fivetran_utils.snowflake__string_agg": {"name": "snowflake__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.414622, "supported_languages": null}, "macro.fivetran_utils.redshift__string_agg": {"name": "redshift__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4147499, "supported_languages": null}, "macro.fivetran_utils.spark__string_agg": {"name": "spark__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.spark__string_agg", "macro_sql": "{% macro spark__string_agg(field_to_agg, delimiter) %}\n    -- collect set will remove duplicates\n    replace(replace(replace(cast( collect_set({{ field_to_agg }}) as string), '[', ''), ']', ''), ', ', {{ delimiter }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.414886, "supported_languages": null}, "macro.fivetran_utils.timestamp_diff": {"name": "timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('timestamp_diff', 'fivetran_utils')(first_date, second_date, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__timestamp_diff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.415691, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_diff": {"name": "default__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.415918, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_diff": {"name": "redshift__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_diff", "macro_sql": "{% macro redshift__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4160798, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_diff": {"name": "bigquery__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.416236, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_diff": {"name": "postgres__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_diff", "macro_sql": "{% macro postgres__timestamp_diff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4178739, "supported_languages": null}, "macro.fivetran_utils.try_cast": {"name": "try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.try_cast", "macro_sql": "{% macro try_cast(field, type) %}\n    {{ adapter.dispatch('try_cast', 'fivetran_utils') (field, type) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__try_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.418417, "supported_languages": null}, "macro.fivetran_utils.default__try_cast": {"name": "default__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.default__try_cast", "macro_sql": "{% macro default__try_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.418551, "supported_languages": null}, "macro.fivetran_utils.redshift__try_cast": {"name": "redshift__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.redshift__try_cast", "macro_sql": "{% macro redshift__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when trim({{field}}) ~ '^(0|[1-9][0-9]*)$' then trim({{field}})\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.418818, "supported_languages": null}, "macro.fivetran_utils.postgres__try_cast": {"name": "postgres__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.postgres__try_cast", "macro_sql": "{% macro postgres__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.419092, "supported_languages": null}, "macro.fivetran_utils.snowflake__try_cast": {"name": "snowflake__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.snowflake__try_cast", "macro_sql": "{% macro snowflake__try_cast(field, type) %}\n    try_cast(cast({{field}} as varchar) as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.419222, "supported_languages": null}, "macro.fivetran_utils.bigquery__try_cast": {"name": "bigquery__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.bigquery__try_cast", "macro_sql": "{% macro bigquery__try_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.419344, "supported_languages": null}, "macro.fivetran_utils.spark__try_cast": {"name": "spark__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.spark__try_cast", "macro_sql": "{% macro spark__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.419465, "supported_languages": null}, "macro.fivetran_utils.sqlserver__try_cast": {"name": "sqlserver__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.sqlserver__try_cast", "macro_sql": "{% macro sqlserver__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.419589, "supported_languages": null}, "macro.fivetran_utils.source_relation": {"name": "source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.source_relation", "macro_sql": "{% macro source_relation(union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') (union_schema_variable, union_database_variable) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__source_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.419976, "supported_languages": null}, "macro.fivetran_utils.default__source_relation": {"name": "default__source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.default__source_relation", "macro_sql": "{% macro default__source_relation(union_schema_variable, union_database_variable) %}\n\n{% if var(union_schema_variable, none)  %}\n, case\n    {% for schema in var(union_schema_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.{{ schema|lower }}.%' then '{{ schema|lower }}'\n    {% endfor %}\n  end as source_relation\n{% elif var(union_database_variable, none) %}\n, case\n    {% for database in var(union_database_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%{{ database|lower }}.%' then '{{ database|lower }}'\n    {% endfor %}\n  end as source_relation\n{% else %}\n, cast('' as {{ dbt.type_string() }}) as source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.420526, "supported_languages": null}, "macro.fivetran_utils.first_value": {"name": "first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', 'fivetran_utils') (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__first_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.420925, "supported_languages": null}, "macro.fivetran_utils.default__first_value": {"name": "default__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.421129, "supported_languages": null}, "macro.fivetran_utils.redshift__first_value": {"name": "redshift__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.421352, "supported_languages": null}, "macro.fivetran_utils.add_dbt_source_relation": {"name": "add_dbt_source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_dbt_source_relation.sql", "original_file_path": "macros/add_dbt_source_relation.sql", "unique_id": "macro.fivetran_utils.add_dbt_source_relation", "macro_sql": "{% macro add_dbt_source_relation() %}\n\n{% if var('union_schemas', none) or var('union_databases', none) %}\n, _dbt_source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.421608, "supported_languages": null}, "macro.fivetran_utils.add_pass_through_columns": {"name": "add_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_pass_through_columns.sql", "original_file_path": "macros/add_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.add_pass_through_columns", "macro_sql": "{% macro add_pass_through_columns(base_columns, pass_through_var) %}\n\n  {% if pass_through_var %}\n\n    {% for column in pass_through_var %}\n\n    {% if column is mapping %}\n\n      {% if column.alias %}\n\n        {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n\n      {% else %}\n\n        {% do base_columns.append({ \"name\": column.name, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n        \n      {% endif %}\n\n    {% else %}\n\n      {% do base_columns.append({ \"name\": column, \"datatype\": dbt.type_string()}) %}\n\n    {% endif %}\n\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4226649, "supported_languages": null}, "macro.fivetran_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.425524, "supported_languages": null}, "macro.fivetran_utils.union_tables": {"name": "union_tables", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.42588, "supported_languages": null}, "macro.fivetran_utils.snowflake_seed_data": {"name": "snowflake_seed_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "unique_id": "macro.fivetran_utils.snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4262478, "supported_languages": null}, "macro.fivetran_utils.fill_staging_columns": {"name": "fill_staging_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.quote_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.427316, "supported_languages": null}, "macro.fivetran_utils.quote_column": {"name": "quote_column", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type in ('bigquery', 'spark', 'databricks') %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.427852, "supported_languages": null}, "macro.fivetran_utils.json_extract": {"name": "json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4282691, "supported_languages": null}, "macro.fivetran_utils.default__json_extract": {"name": "default__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.428425, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_extract": {"name": "snowflake__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.snowflake__json_extract", "macro_sql": "{% macro snowflake__json_extract(string, string_path) %}\n\n  json_extract_path_text(try_parse_json( {{string}} ), {{ \"'\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.428577, "supported_languages": null}, "macro.fivetran_utils.redshift__json_extract": {"name": "redshift__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.redshift__json_extract", "macro_sql": "{% macro redshift__json_extract(string, string_path) %}\n\n  case when is_valid_json( {{string}} ) then json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} ) else null end\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.428746, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_extract": {"name": "bigquery__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.428894, "supported_languages": null}, "macro.fivetran_utils.postgres__json_extract": {"name": "postgres__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4290419, "supported_languages": null}, "macro.fivetran_utils.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.429544, "supported_languages": null}, "macro.fivetran_utils.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n\n  {%- set enabled_array = [] -%}\n  {% for node in graph.sources.values() %}\n    {% if node.identifier == source.identifier %}\n      {% if (node.meta['is_enabled'] | default(true)) %}\n        {%- do enabled_array.append(1) -%}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set is_enabled = (enabled_array != []) %}\n\n    select\n      {% if is_enabled %}\n      max({{ loaded_at_field }})\n      {% else %} \n      {{ current_timestamp() }} {% endif %} as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n\n    {% if is_enabled %}\n    from {{ source }}\n      {% if filter %}\n      where {{ filter }}\n      {% endif %}\n    {% endif %}\n\n  {% endcall %}\n\n  {% if dbt_version.split('.') | map('int') | list >= [1, 5, 0]  %}\n    {{ return(load_result('collect_freshness')) }}\n  {% else %}\n    {{ return(load_result('collect_freshness').table) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.430774, "supported_languages": null}, "macro.fivetran_utils.timestamp_add": {"name": "timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', 'fivetran_utils') (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4312131, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_add": {"name": "default__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.431376, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_add": {"name": "bigquery__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4315362, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_add": {"name": "redshift__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.431696, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_add": {"name": "postgres__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.431851, "supported_languages": null}, "macro.fivetran_utils.spark__timestamp_add": {"name": "spark__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.spark__timestamp_add", "macro_sql": "{% macro spark__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ dbt.dateadd(datepart, interval, from_timestamp) }}\n        \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4320261, "supported_languages": null}, "macro.fivetran_utils.ceiling": {"name": "ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', 'fivetran_utils') (num) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__ceiling"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.432273, "supported_languages": null}, "macro.fivetran_utils.default__ceiling": {"name": "default__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.432377, "supported_languages": null}, "macro.fivetran_utils.snowflake__ceiling": {"name": "snowflake__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4324758, "supported_languages": null}, "macro.fivetran_utils.remove_prefix_from_columns": {"name": "remove_prefix_from_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4330611, "supported_languages": null}, "macro.fivetran_utils.fivetran_date_spine": {"name": "fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.fivetran_date_spine", "macro_sql": "{% macro fivetran_date_spine(datepart, start_date, end_date) -%}\n\n{{ return(adapter.dispatch('fivetran_date_spine', 'fivetran_utils') (datepart, start_date, end_date)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__fivetran_date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.433656, "supported_languages": null}, "macro.fivetran_utils.default__fivetran_date_spine": {"name": "default__fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.default__fivetran_date_spine", "macro_sql": "{% macro default__fivetran_date_spine(datepart, start_date, end_date) %}\n\n    {{ dbt_utils.date_spine(datepart, start_date, end_date) }}\n        \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.433829, "supported_languages": null}, "macro.fivetran_utils.sqlserver__fivetran_date_spine": {"name": "sqlserver__fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.sqlserver__fivetran_date_spine", "macro_sql": "{% macro sqlserver__fivetran_date_spine(datepart, start_date, end_date) -%}\n\n    {% set date_spine_query %}\n        with\n\n        l0 as (\n\n            select c\n            from (select 1 union all select 1) as d(c)\n\n        ),\n        l1 as (\n\n            select\n                1 as c\n            from l0 as a\n            cross join l0 as b\n\n        ),\n\n        l2 as (\n\n            select 1 as c\n            from l1 as a\n            cross join l1 as b\n        ),\n\n        l3 as (\n\n            select 1 as c\n            from l2 as a\n            cross join l2 as b\n        ),\n\n        l4 as (\n\n            select 1 as c\n            from l3 as a\n            cross join l3 as b\n        ),\n\n        l5 as (\n\n            select 1 as c\n            from l4 as a\n            cross join l4 as b\n        ),\n\n        nums as (\n\n            select row_number() over (order by (select null)) as rownum\n            from l5\n        ),\n\n        rawdata as (\n\n            select top ({{dbt.datediff(start_date, end_date, datepart)}}) rownum -1 as n\n            from nums\n            order by rownum\n        ),\n\n        all_periods as (\n\n            select (\n                {{\n                    dbt.dateadd(\n                        datepart,\n                        'n',\n                        start_date\n                    )\n                }}\n            ) as date_{{datepart}}\n            from rawdata\n        ),\n\n        filtered as (\n\n            select *\n            from all_periods\n            where date_{{datepart}} <= {{ end_date }}\n\n        )\n\n        select * from filtered\n        order by 1\n\n    {% endset %}\n\n    {% set results = run_query(date_spine_query) %}\n\n    {% if execute %}\n\n        {% set results_list = results.columns[0].values() %}\n    \n    {% else %}\n\n        {% set results_list = [] %}\n\n    {% endif %}\n\n    {%- for date_field in results_list %}\n        select cast('{{ date_field }}' as date) as date_{{datepart}} {{ 'union all ' if not loop.last else '' }}\n    {% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt.dateadd", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.434643, "supported_languages": null}, "macro.fivetran_utils.union_data": {"name": "union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.union_data", "macro_sql": "{%- macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable, union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fivetran_utils.default__union_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.435931, "supported_languages": null}, "macro.fivetran_utils.default__union_data": {"name": "default__union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.default__union_data", "macro_sql": "{%- macro default__union_data(\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) -%}\n\n{%- if var(union_schema_variable, none) -%}\n\n    {%- set relations = [] -%}\n    \n    {%- if var(union_schema_variable) is string -%}\n    {%- set trimmed = var(union_schema_variable)|trim('[')|trim(']') -%}\n    {%- set schemas = trimmed.split(',')|map('trim',\" \")|map('trim','\"')|map('trim',\"'\") -%}\n    {%- else -%}\n    {%- set schemas = var(union_schema_variable) -%}\n    {%- endif -%}\n\n    {%- for schema in var(union_schema_variable) -%}\n    {%- set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else var(database_variable, default_database),\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else schema,\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n    \n    {%- set relation_exists=relation is not none -%}\n\n    {%- if relation_exists -%}\n        {%- do relations.append(relation) -%}\n    {%- endif -%}\n\n    {%- endfor -%}\n    \n    {%- if relations != [] -%}\n        {{ dbt_utils.union_relations(relations) }}\n    {%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n    {%- endif -%}\n\n{%- elif var(union_database_variable, none) -%}\n\n    {%- set relations = [] -%}\n\n    {%- for database in var(union_database_variable) -%}\n    {%- set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else database,\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else var(schema_variable, default_schema),\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n\n    {%- set relation_exists=relation is not none -%}\n\n    {%- if relation_exists -%}\n        {%- do relations.append(relation) -%}\n    {%- endif -%}\n\n    {%- endfor -%}\n\n    {%- if relations != [] -%}\n        {{ dbt_utils.union_relations(relations) }}\n    {%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n    {%- endif -%}\n\n{%- else -%}\n    {% set exception_schemas = {\"linkedin_company_pages\": \"linkedin_pages\", \"instagram_business_pages\": \"instagram_business\"} %}\n    {% set relation = namespace(value=\"\") %}\n    {% if default_schema in exception_schemas.keys() %}\n        {% for corrected_schema_name in exception_schemas.items() %}   \n            {% if default_schema in corrected_schema_name %}\n                {# In order for this macro to effectively work within upstream integration tests (mainly used by the Fivetran dbt package maintainers), this identifier variable selection is required to use the macro with different identifier names. #}\n                {% set identifier_var = corrected_schema_name[1] + \"_\" + table_identifier + \"_identifier\"  %}\n                {%- set relation.value=adapter.get_relation(\n                    database=source(corrected_schema_name[1], table_identifier).database,\n                    schema=source(corrected_schema_name[1], table_identifier).schema,\n                    identifier=var(identifier_var, table_identifier)\n                ) -%}\n            {% endif %}\n        {% endfor %}\n    {% else %}\n        {# In order for this macro to effectively work within upstream integration tests (mainly used by the Fivetran dbt package maintainers), this identifier variable selection is required to use the macro with different identifier names. #}\n        {% set identifier_var = default_schema + \"_\" + table_identifier + \"_identifier\"  %}\n        {# Unfortunately the Twitter Organic identifiers were misspelled. As such, we will need to account for this in the model. This will be adjusted in the Twitter Organic package, but to ensure backwards compatibility, this needs to be included. #}\n        {% if var(identifier_var, none) is none %} \n            {% set identifier_var = default_schema + \"_\" + table_identifier + \"_identifer\"  %}\n        {% endif %}\n        {%- set relation.value=adapter.get_relation(\n            database=source(default_schema, table_identifier).database,\n            schema=source(default_schema, table_identifier).schema,\n            identifier=var(identifier_var, table_identifier)\n        ) -%}\n    {% endif %}\n{%- set table_exists=relation.value is not none -%}\n\n{%- if table_exists -%}\n    select * \n    from {{ relation.value }}\n{%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n{%- endif -%}\n{%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4403431, "supported_languages": null}, "macro.fivetran_utils.dummy_coalesce_value": {"name": "dummy_coalesce_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "unique_id": "macro.fivetran_utils.dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.441646, "supported_languages": null}, "macro.fivetran_utils.extract_url_parameter": {"name": "extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.extract_url_parameter", "macro_sql": "{% macro extract_url_parameter(field, url_parameter) -%}\n\n{{ adapter.dispatch('extract_url_parameter', 'fivetran_utils') (field, url_parameter) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__extract_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.441961, "supported_languages": null}, "macro.fivetran_utils.default__extract_url_parameter": {"name": "default__extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.default__extract_url_parameter", "macro_sql": "{% macro default__extract_url_parameter(field, url_parameter) -%}\n\n{{ dbt_utils.get_url_parameter(field, url_parameter) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.442106, "supported_languages": null}, "macro.fivetran_utils.spark__extract_url_parameter": {"name": "spark__extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.spark__extract_url_parameter", "macro_sql": "{% macro spark__extract_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"=([^&]+)'\" -%}\nnullif(regexp_extract({{ field }}, {{ formatted_url_parameter }}, 1), '')\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.442302, "supported_languages": null}, "macro.fivetran_utils.wrap_in_quotes": {"name": "wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.wrap_in_quotes", "macro_sql": "{%- macro wrap_in_quotes(object_to_quote) -%}\n\n{{ return(adapter.dispatch('wrap_in_quotes', 'fivetran_utils')(object_to_quote)) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fivetran_utils.default__wrap_in_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.442625, "supported_languages": null}, "macro.fivetran_utils.default__wrap_in_quotes": {"name": "default__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.default__wrap_in_quotes", "macro_sql": "{%- macro default__wrap_in_quotes(object_to_quote)  -%}\n{# bigquery, spark, databricks #}\n    `{{ object_to_quote }}`\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.442733, "supported_languages": null}, "macro.fivetran_utils.snowflake__wrap_in_quotes": {"name": "snowflake__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.snowflake__wrap_in_quotes", "macro_sql": "{%- macro snowflake__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote | upper }}\"\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.442843, "supported_languages": null}, "macro.fivetran_utils.redshift__wrap_in_quotes": {"name": "redshift__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.redshift__wrap_in_quotes", "macro_sql": "{%- macro redshift__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote }}\"\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.442942, "supported_languages": null}, "macro.fivetran_utils.postgres__wrap_in_quotes": {"name": "postgres__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.postgres__wrap_in_quotes", "macro_sql": "{%- macro postgres__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote }}\"\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.443043, "supported_languages": null}, "macro.fivetran_utils.array_agg": {"name": "array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', 'fivetran_utils') (field_to_agg) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__array_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.443292, "supported_languages": null}, "macro.fivetran_utils.default__array_agg": {"name": "default__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.443409, "supported_languages": null}, "macro.fivetran_utils.redshift__array_agg": {"name": "redshift__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.redshift__array_agg", "macro_sql": "{% macro redshift__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.443506, "supported_languages": null}, "macro.fivetran_utils.empty_variable_warning": {"name": "empty_variable_warning", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "unique_id": "macro.fivetran_utils.empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.443885, "supported_languages": null}, "macro.fivetran_utils.enabled_vars_one_true": {"name": "enabled_vars_one_true", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "unique_id": "macro.fivetran_utils.enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4442601, "supported_languages": null}, "macro.amazon_selling_partner.convert_string_to_numeric": {"name": "convert_string_to_numeric", "resource_type": "macro", "package_name": "amazon_selling_partner", "path": "macros/convert_string_to_numeric.sql", "original_file_path": "macros/convert_string_to_numeric.sql", "unique_id": "macro.amazon_selling_partner.convert_string_to_numeric", "macro_sql": "{%- macro convert_string_to_numeric(column) -%}\n{{ return(adapter.dispatch('convert_string_to_numeric', 'amazon_selling_partner')(column)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.amazon_selling_partner.bigquery__convert_string_to_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.444671, "supported_languages": null}, "macro.amazon_selling_partner.default__convert_string_to_numeric": {"name": "default__convert_string_to_numeric", "resource_type": "macro", "package_name": "amazon_selling_partner", "path": "macros/convert_string_to_numeric.sql", "original_file_path": "macros/convert_string_to_numeric.sql", "unique_id": "macro.amazon_selling_partner.default__convert_string_to_numeric", "macro_sql": "{%- macro default__convert_string_to_numeric(column) -%}\n{%- do exceptions.warn(\"WARNING: You are using an unsupported warehouse.\") -%}\ncast(REPLACE({{ column }}, ',', '') as {{ dbt.type_numeric() }})\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.444862, "supported_languages": null}, "macro.amazon_selling_partner.bigquery__convert_string_to_numeric": {"name": "bigquery__convert_string_to_numeric", "resource_type": "macro", "package_name": "amazon_selling_partner", "path": "macros/convert_string_to_numeric.sql", "original_file_path": "macros/convert_string_to_numeric.sql", "unique_id": "macro.amazon_selling_partner.bigquery__convert_string_to_numeric", "macro_sql": "{%- macro bigquery__convert_string_to_numeric(column) -%}\ncast(REGEXP_EXTRACT(REPLACE({{ column }}, ',', ''), r'-?\\d+(?:\\.\\d+)?') as {{ dbt.type_numeric() }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4450061, "supported_languages": null}, "macro.amazon_selling_partner.snowflake__convert_string_to_numeric": {"name": "snowflake__convert_string_to_numeric", "resource_type": "macro", "package_name": "amazon_selling_partner", "path": "macros/convert_string_to_numeric.sql", "original_file_path": "macros/convert_string_to_numeric.sql", "unique_id": "macro.amazon_selling_partner.snowflake__convert_string_to_numeric", "macro_sql": "{%- macro snowflake__convert_string_to_numeric(column) -%}\ncast(REGEXP_SUBSTR(REPLACE({{ column }}, ',', ''), '-?[0-9]+(\\\\.[0-9]+)?') as {{ dbt.type_numeric() }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.445143, "supported_languages": null}, "macro.amazon_selling_partner.postgres__convert_string_to_numeric": {"name": "postgres__convert_string_to_numeric", "resource_type": "macro", "package_name": "amazon_selling_partner", "path": "macros/convert_string_to_numeric.sql", "original_file_path": "macros/convert_string_to_numeric.sql", "unique_id": "macro.amazon_selling_partner.postgres__convert_string_to_numeric", "macro_sql": "{%- macro postgres__convert_string_to_numeric(column) -%}\ncast(SUBSTRING(REPLACE({{ column }}, ',', '') FROM '(-?[0-9]+(\\.[0-9]+)?)') as {{ dbt.type_numeric() }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.445344, "supported_languages": null}, "macro.amazon_selling_partner.redshift__convert_string_to_numeric": {"name": "redshift__convert_string_to_numeric", "resource_type": "macro", "package_name": "amazon_selling_partner", "path": "macros/convert_string_to_numeric.sql", "original_file_path": "macros/convert_string_to_numeric.sql", "unique_id": "macro.amazon_selling_partner.redshift__convert_string_to_numeric", "macro_sql": "{%- macro redshift__convert_string_to_numeric(column) -%}\ncast(REGEXP_SUBSTR(REPLACE({{ column }}, ',', ''),'(-?[0-9]+(\\.[0-9]+)?)') as {{ dbt.type_numeric() }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4454882, "supported_languages": null}, "macro.amazon_selling_partner.spark__convert_string_to_numeric": {"name": "spark__convert_string_to_numeric", "resource_type": "macro", "package_name": "amazon_selling_partner", "path": "macros/convert_string_to_numeric.sql", "original_file_path": "macros/convert_string_to_numeric.sql", "unique_id": "macro.amazon_selling_partner.spark__convert_string_to_numeric", "macro_sql": "{%- macro spark__convert_string_to_numeric(column) -%}\ncast(regexp_extract(replace({{ column }}, ',', ''), '(-?\\\\d+(\\\\.\\\\d+)?)', 0) as {{ dbt.type_numeric() }})\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.445626, "supported_languages": null}, "macro.amazon_selling_partner.get_item_identifier_columns": {"name": "get_item_identifier_columns", "resource_type": "macro", "package_name": "amazon_selling_partner", "path": "macros/get_item_identifier_columns.sql", "original_file_path": "macros/get_item_identifier_columns.sql", "unique_id": "macro.amazon_selling_partner.get_item_identifier_columns", "macro_sql": "{% macro get_item_identifier_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"asin\", \"datatype\": dbt.type_string()},\n    {\"name\": \"identifier\", \"datatype\": dbt.type_int()},\n    {\"name\": \"identifier_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"marketplace_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4462981, "supported_languages": null}, "macro.amazon_selling_partner.get_item_image_columns": {"name": "get_item_image_columns", "resource_type": "macro", "package_name": "amazon_selling_partner", "path": "macros/get_item_image_columns.sql", "original_file_path": "macros/get_item_image_columns.sql", "unique_id": "macro.amazon_selling_partner.get_item_image_columns", "macro_sql": "{% macro get_item_image_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"asin\", \"datatype\": dbt.type_string()},\n    {\"name\": \"height\", \"datatype\": dbt.type_int()},\n    {\"name\": \"link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"marketplace_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"variant\", \"datatype\": dbt.type_string()},\n    {\"name\": \"width\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.44715, "supported_languages": null}, "macro.amazon_selling_partner.get_item_summary_columns": {"name": "get_item_summary_columns", "resource_type": "macro", "package_name": "amazon_selling_partner", "path": "macros/get_item_summary_columns.sql", "original_file_path": "macros/get_item_summary_columns.sql", "unique_id": "macro.amazon_selling_partner.get_item_summary_columns", "macro_sql": "{% macro get_item_summary_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"adult_product\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"asin\", \"datatype\": dbt.type_string()},\n    {\"name\": \"autographed\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"brand\", \"datatype\": dbt.type_string()},\n    {\"name\": \"classification_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"color\", \"datatype\": dbt.type_string()},\n    {\"name\": \"contributors\", \"datatype\": dbt.type_int()},\n    {\"name\": \"display_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_classification\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"manufacturer\", \"datatype\": dbt.type_string()},\n    {\"name\": \"marketplace_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"memorabilia\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"model_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"package_quantity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"part_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"release_date\", \"datatype\": \"date\"},\n    {\"name\": \"size\", \"datatype\": dbt.type_string()},\n    {\"name\": \"style\", \"datatype\": dbt.type_string()},\n    {\"name\": \"trade_in_eligible\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"website_display_group\", \"datatype\": dbt.type_string()},\n    {\"name\": \"website_display_group_name\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_boolean", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.449443, "supported_languages": null}, "macro.amazon_selling_partner.get_item_product_type_columns": {"name": "get_item_product_type_columns", "resource_type": "macro", "package_name": "amazon_selling_partner", "path": "macros/get_item_product_type_columns.sql", "original_file_path": "macros/get_item_product_type_columns.sql", "unique_id": "macro.amazon_selling_partner.get_item_product_type_columns", "macro_sql": "{% macro get_item_product_type_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_string()},\n    {\"name\": \"asin\", \"datatype\": dbt.type_string()},\n    {\"name\": \"marketplace_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"product_type\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.450027, "supported_languages": null}, "macro.amazon_selling_partner.get_order_item_columns": {"name": "get_order_item_columns", "resource_type": "macro", "package_name": "amazon_selling_partner", "path": "macros/get_order_item_columns.sql", "original_file_path": "macros/get_order_item_columns.sql", "unique_id": "macro.amazon_selling_partner.get_order_item_columns", "macro_sql": "{% macro get_order_item_columns() %}\n\n{% set columns = [\n    {\"name\": \"amazon_order_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"asin\", \"datatype\": dbt.type_string()},\n    {\"name\": \"buyer_requested_cancel_buyer_cancel_reason\", \"datatype\": dbt.type_string()},\n    {\"name\": \"buyer_requested_cancel_is_buyer_requested_cancel\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"condition_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"condition_note\", \"datatype\": dbt.type_string()},\n    {\"name\": \"condition_subtype_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"deemed_reseller_category\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ioss_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_gift\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"is_transparency\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"item_price_amount\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_price_currency_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_tax_amount\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_tax_currency_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"order_item_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"product_info_detail_number_of_items\", \"datatype\": dbt.type_int()},\n    {\"name\": \"promotion_discount_amount\", \"datatype\": dbt.type_string()},\n    {\"name\": \"promotion_discount_currency_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"promotion_discount_tax_amount\", \"datatype\": dbt.type_string()},\n    {\"name\": \"promotion_discount_tax_currency_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"quantity_ordered\", \"datatype\": dbt.type_int()},\n    {\"name\": \"quantity_shipped\", \"datatype\": dbt.type_int()},\n    {\"name\": \"scheduled_delivery_end_date\", \"datatype\": \"date\"},\n    {\"name\": \"scheduled_delivery_start_date\", \"datatype\": \"date\"},\n    {\"name\": \"seller_sku\", \"datatype\": dbt.type_string()},\n    {\"name\": \"serial_number_required\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"shipping_discount_amount\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_discount_currency_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_discount_tax_amount\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_discount_tax_currency_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_price_amount\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_price_currency_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_tax_amount\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_tax_currency_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"store_chain_store_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_collection_model\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_collection_responsible_party\", \"datatype\": dbt.type_string()},\n    {\"name\": \"title\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_boolean", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.453853, "supported_languages": null}, "macro.amazon_selling_partner.get_item_dimension_columns": {"name": "get_item_dimension_columns", "resource_type": "macro", "package_name": "amazon_selling_partner", "path": "macros/get_item_dimension_columns.sql", "original_file_path": "macros/get_item_dimension_columns.sql", "unique_id": "macro.amazon_selling_partner.get_item_dimension_columns", "macro_sql": "{% macro get_item_dimension_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"asin\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_height_unit\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_height_value\", \"datatype\": dbt.type_int()},\n    {\"name\": \"item_length_unit\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_length_value\", \"datatype\": dbt.type_int()},\n    {\"name\": \"item_weight_unit\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_weight_value\", \"datatype\": dbt.type_int()},\n    {\"name\": \"item_width_unit\", \"datatype\": dbt.type_string()},\n    {\"name\": \"item_width_value\", \"datatype\": dbt.type_int()},\n    {\"name\": \"marketplace_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"package_height_unit\", \"datatype\": dbt.type_string()},\n    {\"name\": \"package_height_value\", \"datatype\": dbt.type_int()},\n    {\"name\": \"package_length_unit\", \"datatype\": dbt.type_string()},\n    {\"name\": \"package_length_value\", \"datatype\": dbt.type_int()},\n    {\"name\": \"package_weight_unit\", \"datatype\": dbt.type_string()},\n    {\"name\": \"package_weight_value\", \"datatype\": dbt.type_int()},\n    {\"name\": \"package_width_unit\", \"datatype\": dbt.type_string()},\n    {\"name\": \"package_width_value\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.455934, "supported_languages": null}, "macro.amazon_selling_partner.get_payment_method_detail_item_columns": {"name": "get_payment_method_detail_item_columns", "resource_type": "macro", "package_name": "amazon_selling_partner", "path": "macros/get_payment_method_detail_item_columns.sql", "original_file_path": "macros/get_payment_method_detail_item_columns.sql", "unique_id": "macro.amazon_selling_partner.get_payment_method_detail_item_columns", "macro_sql": "{% macro get_payment_method_detail_item_columns() %}\n\n{% set columns = [\n    {\"name\": \"amazon_order_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"method\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.456343, "supported_languages": null}, "macro.amazon_selling_partner.get_item_classification_sales_rank_columns": {"name": "get_item_classification_sales_rank_columns", "resource_type": "macro", "package_name": "amazon_selling_partner", "path": "macros/get_item_classification_sales_rank_columns.sql", "original_file_path": "macros/get_item_classification_sales_rank_columns.sql", "unique_id": "macro.amazon_selling_partner.get_item_classification_sales_rank_columns", "macro_sql": "{% macro get_item_classification_sales_rank_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"asin\", \"datatype\": dbt.type_string()},\n    {\"name\": \"classification_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rank\", \"datatype\": dbt.type_int()},\n    {\"name\": \"title\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.457097, "supported_languages": null}, "macro.amazon_selling_partner.get_item_relationship_columns": {"name": "get_item_relationship_columns", "resource_type": "macro", "package_name": "amazon_selling_partner", "path": "macros/get_item_relationship_columns.sql", "original_file_path": "macros/get_item_relationship_columns.sql", "unique_id": "macro.amazon_selling_partner.get_item_relationship_columns", "macro_sql": "{% macro get_item_relationship_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"child_asin\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent_asin\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.457676, "supported_languages": null}, "macro.amazon_selling_partner.get_fba_inventory_researching_quantity_entry_columns": {"name": "get_fba_inventory_researching_quantity_entry_columns", "resource_type": "macro", "package_name": "amazon_selling_partner", "path": "macros/get_fba_inventory_researching_quantity_entry_columns.sql", "original_file_path": "macros/get_fba_inventory_researching_quantity_entry_columns.sql", "unique_id": "macro.amazon_selling_partner.get_fba_inventory_researching_quantity_entry_columns", "macro_sql": "{% macro get_fba_inventory_researching_quantity_entry_columns() %}\n\n{% set columns = [\n    {\"name\": \"inventory_summary_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"quantity\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4581602, "supported_languages": null}, "macro.amazon_selling_partner.get_financial_charge_component_columns": {"name": "get_financial_charge_component_columns", "resource_type": "macro", "package_name": "amazon_selling_partner", "path": "macros/get_financial_charge_component_columns.sql", "original_file_path": "macros/get_financial_charge_component_columns.sql", "unique_id": "macro.amazon_selling_partner.get_financial_charge_component_columns", "macro_sql": "{% macro get_financial_charge_component_columns() %}\n\n{% set columns = [\n    {\"name\": \"charge_kind\", \"datatype\": dbt.type_string()},\n    {\"name\": \"charge_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"currency_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"currency_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt.type_int()},\n    {\"name\": \"linked_to\", \"datatype\": dbt.type_string()},\n    {\"name\": \"linked_to_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_float", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4590101, "supported_languages": null}, "macro.amazon_selling_partner.get_financial_service_fee_event_columns": {"name": "get_financial_service_fee_event_columns", "resource_type": "macro", "package_name": "amazon_selling_partner", "path": "macros/get_financial_service_fee_event_columns.sql", "original_file_path": "macros/get_financial_service_fee_event_columns.sql", "unique_id": "macro.amazon_selling_partner.get_financial_service_fee_event_columns", "macro_sql": "{% macro get_financial_service_fee_event_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"amazon_order_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"asin\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fee_description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fee_reason\", \"datatype\": dbt.type_string()},\n    {\"name\": \"financial_event_group_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fn_sku\", \"datatype\": dbt.type_string()},\n    {\"name\": \"seller_sku\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.459955, "supported_languages": null}, "macro.amazon_selling_partner.get_financial_fee_component_columns": {"name": "get_financial_fee_component_columns", "resource_type": "macro", "package_name": "amazon_selling_partner", "path": "macros/get_financial_fee_component_columns.sql", "original_file_path": "macros/get_financial_fee_component_columns.sql", "unique_id": "macro.amazon_selling_partner.get_financial_fee_component_columns", "macro_sql": "{% macro get_financial_fee_component_columns() %}\n\n{% set columns = [\n    {\"name\": \"currency_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"currency_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fee_kind\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fee_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt.type_int()},\n    {\"name\": \"linked_to\", \"datatype\": dbt.type_string()},\n    {\"name\": \"linked_to_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_float", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.46081, "supported_languages": null}, "macro.amazon_selling_partner.get_item_display_group_sales_rank_columns": {"name": "get_item_display_group_sales_rank_columns", "resource_type": "macro", "package_name": "amazon_selling_partner", "path": "macros/get_item_display_group_sales_rank_columns.sql", "original_file_path": "macros/get_item_display_group_sales_rank_columns.sql", "unique_id": "macro.amazon_selling_partner.get_item_display_group_sales_rank_columns", "macro_sql": "{% macro get_item_display_group_sales_rank_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"asin\", \"datatype\": dbt.type_string()},\n    {\"name\": \"link\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rank\", \"datatype\": dbt.type_int()},\n    {\"name\": \"title\", \"datatype\": dbt.type_string()},\n    {\"name\": \"website_display_group\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4615731, "supported_languages": null}, "macro.amazon_selling_partner.get_order_item_promotion_id_columns": {"name": "get_order_item_promotion_id_columns", "resource_type": "macro", "package_name": "amazon_selling_partner", "path": "macros/get_order_item_promotion_id_columns.sql", "original_file_path": "macros/get_order_item_promotion_id_columns.sql", "unique_id": "macro.amazon_selling_partner.get_order_item_promotion_id_columns", "macro_sql": "{% macro get_order_item_promotion_id_columns() %}\n\n{% set columns = [\n    {\"name\": \"amazon_order_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"order_item_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"promotion_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4620621, "supported_languages": null}, "macro.amazon_selling_partner.get_fba_inventory_summary_columns": {"name": "get_fba_inventory_summary_columns", "resource_type": "macro", "package_name": "amazon_selling_partner", "path": "macros/get_fba_inventory_summary_columns.sql", "original_file_path": "macros/get_fba_inventory_summary_columns.sql", "unique_id": "macro.amazon_selling_partner.get_fba_inventory_summary_columns", "macro_sql": "{% macro get_fba_inventory_summary_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"asin\", \"datatype\": dbt.type_string()},\n    {\"name\": \"carrier_damaged_quantity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"condition\", \"datatype\": dbt.type_string()},\n    {\"name\": \"customer_damaged_quantity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"defective_quantity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"distributor_damaged_quantity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"expired_quantity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"fc_processing_quantity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"fn_sku\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fullfillable_quantity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"granularity_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"granularity_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"inblound_shipped_quantity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"inbound_receiving_quantity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"inbound_working_quantity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"last_updated_time\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"pending_customer_order_quantity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"pending_transshipment_quantity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"product_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"seller_sku\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_quantity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"total_researching_quantity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"total_reserved_quantity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"total_unfulfillable_quantity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"warehouse_damaged_quantity\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_int", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.464702, "supported_languages": null}, "macro.amazon_selling_partner.get_orders_columns": {"name": "get_orders_columns", "resource_type": "macro", "package_name": "amazon_selling_partner", "path": "macros/get_orders_columns.sql", "original_file_path": "macros/get_orders_columns.sql", "unique_id": "macro.amazon_selling_partner.get_orders_columns", "macro_sql": "{% macro get_orders_columns() %}\n\n{% set columns = [\n    {\"name\": \"amazon_order_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"automated_shipping_setting_automated_carrier\", \"datatype\": dbt.type_string()},\n    {\"name\": \"automated_shipping_setting_automated_ship_method\", \"datatype\": dbt.type_string()},\n    {\"name\": \"automated_shipping_setting_has_automated_shipping_settings\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"buyer_info_buyer_email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"buyer_info_buyer_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"buyer_info_purchase_order_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"default_ship_from_location_address_line_1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"default_ship_from_location_address_line_2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"default_ship_from_location_address_line_3\", \"datatype\": dbt.type_int()},\n    {\"name\": \"default_ship_from_location_address_type\", \"datatype\": dbt.type_int()},\n    {\"name\": \"default_ship_from_location_city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"default_ship_from_location_country_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"default_ship_from_location_county\", \"datatype\": dbt.type_string()},\n    {\"name\": \"default_ship_from_location_district\", \"datatype\": dbt.type_int()},\n    {\"name\": \"default_ship_from_location_municipality\", \"datatype\": dbt.type_int()},\n    {\"name\": \"default_ship_from_location_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"default_ship_from_location_phone\", \"datatype\": dbt.type_int()},\n    {\"name\": \"default_ship_from_location_postal_code\", \"datatype\": dbt.type_int()},\n    {\"name\": \"default_ship_from_location_state_or_region\", \"datatype\": dbt.type_int()},\n    {\"name\": \"earliest_delivery_date\", \"datatype\": dbt.type_string()},\n    {\"name\": \"earliest_ship_date\", \"datatype\": dbt.type_string()},\n    {\"name\": \"easy_ship_shipment_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"electronic_invoice_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fulfillment_channel\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fulfillment_supply_source_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"has_regulated_items\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"is_access_point_order\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"is_business_order\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"is_estimated_ship_date_set\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"is_global_express_enabled\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"is_iba\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"is_ispu\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"is_premium_order\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"is_prime\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"is_replacement_order\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"is_sold_by_ab\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"last_update_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"latest_delivery_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"latest_ship_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"marketplace_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"number_of_items_shipped\", \"datatype\": dbt.type_int()},\n    {\"name\": \"number_of_items_unshipped\", \"datatype\": dbt.type_int()},\n    {\"name\": \"order_channel\", \"datatype\": dbt.type_string()},\n    {\"name\": \"order_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"order_total_amount\", \"datatype\": dbt.type_string()},\n    {\"name\": \"order_total_currency_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"order_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_method\", \"datatype\": dbt.type_string()},\n    {\"name\": \"promise_response_due_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"purchase_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"replaced_order_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_channel\", \"datatype\": dbt.type_string()},\n    {\"name\": \"seller_order_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ship_service_level\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipment_service_level_category\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_address_line_1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_address_line_2\", \"datatype\": dbt.type_int()},\n    {\"name\": \"shipping_address_address_line_3\", \"datatype\": dbt.type_int()},\n    {\"name\": \"shipping_address_address_type\", \"datatype\": dbt.type_int()},\n    {\"name\": \"shipping_address_city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_country_code\", \"datatype\": dbt.type_int()},\n    {\"name\": \"shipping_address_county\", \"datatype\": dbt.type_int()},\n    {\"name\": \"shipping_address_district\", \"datatype\": dbt.type_int()},\n    {\"name\": \"shipping_address_municipality\", \"datatype\": dbt.type_int()},\n    {\"name\": \"shipping_address_name\", \"datatype\": dbt.type_int()},\n    {\"name\": \"shipping_address_phone\", \"datatype\": dbt.type_int()},\n    {\"name\": \"shipping_address_postal_code\", \"datatype\": dbt.type_int()},\n    {\"name\": \"shipping_address_state_or_region\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_boolean", "macro.dbt.type_int", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.471314, "supported_languages": null}, "macro.amazon_selling_partner.union_amazon_selling_partner_connections": {"name": "union_amazon_selling_partner_connections", "resource_type": "macro", "package_name": "amazon_selling_partner", "path": "macros/union/union_amazon_selling_partner_connections.sql", "original_file_path": "macros/union/union_amazon_selling_partner_connections.sql", "unique_id": "macro.amazon_selling_partner.union_amazon_selling_partner_connections", "macro_sql": "{% macro union_amazon_selling_partner_connections(connection_dictionary, single_source_name, single_table_name) %}\n\n{{ return(adapter.dispatch('union_amazon_selling_partner_connections', 'amazon_selling_partner') (connection_dictionary, single_source_name, single_table_name)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.amazon_selling_partner.default__union_amazon_selling_partner_connections"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.472073, "supported_languages": null}, "macro.amazon_selling_partner.default__union_amazon_selling_partner_connections": {"name": "default__union_amazon_selling_partner_connections", "resource_type": "macro", "package_name": "amazon_selling_partner", "path": "macros/union/union_amazon_selling_partner_connections.sql", "original_file_path": "macros/union/union_amazon_selling_partner_connections.sql", "unique_id": "macro.amazon_selling_partner.default__union_amazon_selling_partner_connections", "macro_sql": "{% macro default__union_amazon_selling_partner_connections(connection_dictionary, single_source_name, single_table_name) %}\n\n{% if connection_dictionary %}\n{# For unioning #}\n    {%- set relations = [] -%}\n    {%- for connection in connection_dictionary -%}\n\n        {%- set relation=adapter.get_relation(\n                            database=source(connection.name, single_table_name).database,\n                            schema=source(connection.name, single_table_name).schema,\n                            identifier=source(connection.name, single_table_name).identifier) if var('has_defined_sources', false)\n                            \n                    else adapter.get_relation(\n                            database=connection.database if connection.database else target.database,\n                            schema=connection.schema if connection.schema else single_source_name,\n                            identifier=single_table_name\n                    ) \n        -%}\n\n        {%- if relation is not none -%}\n            {%- do relations.append(relation) -%}\n        {%- endif -%}\n\n    {%- endfor -%}\n\n    {%- if relations != [] -%}\n        {{ amazon_selling_partner.amazon_selling_partner_union_relations(relations) }}\n    {%- else -%}\n        {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n        {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ single_source_name ~ \".\" ~ single_table_name ~ \" table was not found in your schema(s). The Fivetran Data Model will create a completely empty staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n        {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit {{ '0' if target.type != 'redshift' else '1' }}\n    {%- endif -%}\n\n{% else %}\n{# Not unioning #}\n\n    {% set identifier_var = \"amazon_selling_partner_\" + single_table_name + \"_identifier\"%}\n\n    {%- set relation=adapter.get_relation(\n        database=source(single_source_name, single_table_name).database,\n        schema=source(single_source_name, single_table_name).schema,\n        identifier=var(identifier_var, single_table_name)\n    ) -%}\n\n    {%- if relation is not none -%}\n        select\n            {{ dbt_utils.star(from=source(single_source_name, single_table_name)) }}\n        from {{ source(single_source_name, single_table_name) }} as source_table\n    \n    {% else %}\n        {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n            {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ single_source_name|upper ~ \".\" ~ single_table_name|upper ~ \" table was not found in your schema(s). The Fivetran Data Model will create a completely empty staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n        {% endif -%}\n        \n        select \n            cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n        limit {{ '0' if target.type != 'redshift' else '1' }}\n    {%- endif -%}\n{% endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.amazon_selling_partner.amazon_selling_partner_union_relations", "macro.dbt.type_string", "macro.dbt_utils.star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4740758, "supported_languages": null}, "macro.amazon_selling_partner.amazon_selling_partner_apply_source_relation": {"name": "amazon_selling_partner_apply_source_relation", "resource_type": "macro", "package_name": "amazon_selling_partner", "path": "macros/union/amazon_selling_partner_apply_source_relation.sql", "original_file_path": "macros/union/amazon_selling_partner_apply_source_relation.sql", "unique_id": "macro.amazon_selling_partner.amazon_selling_partner_apply_source_relation", "macro_sql": "{% macro amazon_selling_partner_apply_source_relation() -%}\n\n{{ return(adapter.dispatch('amazon_selling_partner_apply_source_relation', 'amazon_selling_partner')()) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.amazon_selling_partner.default__amazon_selling_partner_apply_source_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.474376, "supported_languages": null}, "macro.amazon_selling_partner.default__amazon_selling_partner_apply_source_relation": {"name": "default__amazon_selling_partner_apply_source_relation", "resource_type": "macro", "package_name": "amazon_selling_partner", "path": "macros/union/amazon_selling_partner_apply_source_relation.sql", "original_file_path": "macros/union/amazon_selling_partner_apply_source_relation.sql", "unique_id": "macro.amazon_selling_partner.default__amazon_selling_partner_apply_source_relation", "macro_sql": "{% macro default__amazon_selling_partner_apply_source_relation() -%}\n\n{% if var('amazon_selling_partner_sources', []) != [] %}\n, _dbt_source_relation as source_relation\n{% else %}\n, '{{ var(\"amazon_selling_partner_database\", target.database) }}' || '.'|| '{{ var(\"amazon_selling_partner_schema\", \"amazon_selling_partner\") }}' as source_relation\n{% endif %} \n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.474672, "supported_languages": null}, "macro.amazon_selling_partner.amazon_selling_partner_union_relations": {"name": "amazon_selling_partner_union_relations", "resource_type": "macro", "package_name": "amazon_selling_partner", "path": "macros/union/amazon_selling_partner_union_relations.sql", "original_file_path": "macros/union/amazon_selling_partner_union_relations.sql", "unique_id": "macro.amazon_selling_partner.amazon_selling_partner_union_relations", "macro_sql": "\n\n{%- macro amazon_selling_partner_union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('amazon_selling_partner_union_relations', 'amazon_selling_partner')(relations, aliases, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.amazon_selling_partner.default__amazon_selling_partner_union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.475931, "supported_languages": null}, "macro.amazon_selling_partner.default__amazon_selling_partner_union_relations": {"name": "default__amazon_selling_partner_union_relations", "resource_type": "macro", "package_name": "amazon_selling_partner", "path": "macros/union/amazon_selling_partner_union_relations.sql", "original_file_path": "macros/union/amazon_selling_partner_union_relations.sql", "unique_id": "macro.amazon_selling_partner.default__amazon_selling_partner_union_relations", "macro_sql": "\n\n{%- macro default__amazon_selling_partner_union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'amazon_selling_partner_union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'amazon_selling_partner_union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation.database ~ '.' ~ relation.schema) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n            \n            {# This alias is the only addition made to thr dbt_utils.union_relations() code. Avoids errors if the table is named a reserved keyword #}\n            from {{ aliases[loop.index0] if aliases else relation }} as unioned_relation_{{ loop.index }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743628944.4793532, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "doc.amazon_selling_partner.orders": {"name": "orders", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.orders", "block_contents": "Orders placed in Amazon."}, "doc.amazon_selling_partner.amazon_order_id": {"name": "amazon_order_id", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.amazon_order_id", "block_contents": "An Amazon-defined order identifier, in 3-7-7 format."}, "doc.amazon_selling_partner.automated_shipping_setting_automated_carrier": {"name": "automated_shipping_setting_automated_carrier", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.automated_shipping_setting_automated_carrier", "block_contents": "Auto-generated carrier for SSA orders."}, "doc.amazon_selling_partner.automated_shipping_setting_automated_ship_method": {"name": "automated_shipping_setting_automated_ship_method", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.automated_shipping_setting_automated_ship_method", "block_contents": "Auto-generated ship method for SSA orders."}, "doc.amazon_selling_partner.automated_shipping_setting_has_automated_shipping_settings": {"name": "automated_shipping_setting_has_automated_shipping_settings", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.automated_shipping_setting_has_automated_shipping_settings", "block_contents": "When true, this order has automated shipping settings generated by Amazon. This order could be identified as an SSA order."}, "doc.amazon_selling_partner.buyer_info_buyer_county": {"name": "buyer_info_buyer_county", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.buyer_info_buyer_county", "block_contents": "The county of the buyer. This attribute is only available in the Brazil marketplace."}, "doc.amazon_selling_partner.buyer_info_buyer_email": {"name": "buyer_info_buyer_email", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.buyer_info_buyer_email", "block_contents": "The anonymized email address of the buyer."}, "doc.amazon_selling_partner.buyer_info_buyer_name": {"name": "buyer_info_buyer_name", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.buyer_info_buyer_name", "block_contents": "The buyer name or the recipient name."}, "doc.amazon_selling_partner.buyer_info_purchase_order_number": {"name": "buyer_info_purchase_order_number", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.buyer_info_purchase_order_number", "block_contents": "The purchase order (PO) number entered by the buyer at checkout. Only returned for orders where the buyer entered a PO number at checkout."}, "doc.amazon_selling_partner.buyer_invoice_preference": {"name": "buyer_invoice_preference", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.buyer_invoice_preference", "block_contents": "The buyer's invoicing preference. Sellers can use this data to issue electronic invoices for orders in Turkey. Possible values = `INDIVUDAL` or `BUSINESS`"}, "doc.amazon_selling_partner.buyer_tax_info_buyer_business_address": {"name": "buyer_tax_info_buyer_business_address", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.buyer_tax_info_buyer_business_address", "block_contents": "Business buyer's address.Only available in the TR marketplace."}, "doc.amazon_selling_partner.buyer_tax_info_buyer_legal_company_name": {"name": "buyer_tax_info_buyer_legal_company_name", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.buyer_tax_info_buyer_legal_company_name", "block_contents": "Business buyer's company legal name.\tOnly available in the TR marketplace."}, "doc.amazon_selling_partner.buyer_tax_info_buyer_tax_office": {"name": "buyer_tax_info_buyer_tax_office", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.buyer_tax_info_buyer_tax_office", "block_contents": "Business buyer's company tax office.\tOnly available in the TR marketplace."}, "doc.amazon_selling_partner.buyer_tax_info_buyer_tax_registration_id": {"name": "buyer_tax_info_buyer_tax_registration_id", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.buyer_tax_info_buyer_tax_registration_id", "block_contents": "Business buyer's tax registration ID.\tOnly available in the TR marketplace."}, "doc.amazon_selling_partner.cba_displayable_shipping_label": {"name": "cba_displayable_shipping_label", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.cba_displayable_shipping_label", "block_contents": "Custom ship label for Checkout by Amazon (CBA)."}, "doc.amazon_selling_partner.default_ship_from_location_address_line_1": {"name": "default_ship_from_location_address_line_1", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.default_ship_from_location_address_line_1", "block_contents": "Street address of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location."}, "doc.amazon_selling_partner.default_ship_from_location_address_line_2": {"name": "default_ship_from_location_address_line_2", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.default_ship_from_location_address_line_2", "block_contents": "Additional street address information of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location."}, "doc.amazon_selling_partner.default_ship_from_location_address_line_3": {"name": "default_ship_from_location_address_line_3", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.default_ship_from_location_address_line_3", "block_contents": "Additional street address informatio of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location."}, "doc.amazon_selling_partner.default_ship_from_location_address_type": {"name": "default_ship_from_location_address_type", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.default_ship_from_location_address_type", "block_contents": "Address type of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location."}, "doc.amazon_selling_partner.default_ship_from_location_city": {"name": "default_ship_from_location_city", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.default_ship_from_location_city", "block_contents": "City of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location."}, "doc.amazon_selling_partner.default_ship_from_location_country_code": {"name": "default_ship_from_location_country_code", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.default_ship_from_location_country_code", "block_contents": "Country code (two-character country code, in ISO 3166-1 alpha-2 format.) of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location."}, "doc.amazon_selling_partner.default_ship_from_location_county": {"name": "default_ship_from_location_county", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.default_ship_from_location_county", "block_contents": "County of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location."}, "doc.amazon_selling_partner.default_ship_from_location_district": {"name": "default_ship_from_location_district", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.default_ship_from_location_district", "block_contents": "District of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location."}, "doc.amazon_selling_partner.default_ship_from_location_municipality": {"name": "default_ship_from_location_municipality", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.default_ship_from_location_municipality", "block_contents": "Municipality of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location."}, "doc.amazon_selling_partner.default_ship_from_location_name": {"name": "default_ship_from_location_name", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.default_ship_from_location_name", "block_contents": "Name of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location."}, "doc.amazon_selling_partner.default_ship_from_location_phone": {"name": "default_ship_from_location_phone", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.default_ship_from_location_phone", "block_contents": "Associated phone number of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.\n\nNote: In some cases, the buyer phone number is suppressed:\na. Phone is suppressed for all AFN (fulfilled by Amazon) orders.\nb. Phone is suppressed for the shipped MFN (fulfilled by seller) order when the current date is past the Latest Delivery Date."}, "doc.amazon_selling_partner.default_ship_from_location_postal_code": {"name": "default_ship_from_location_postal_code", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.default_ship_from_location_postal_code", "block_contents": "Postal code of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location."}, "doc.amazon_selling_partner.default_ship_from_location_state_or_region": {"name": "default_ship_from_location_state_or_region", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.default_ship_from_location_state_or_region", "block_contents": "State or region of the recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location."}, "doc.amazon_selling_partner.earliest_delivery_date": {"name": "earliest_delivery_date", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.earliest_delivery_date", "block_contents": "The start of the time period within which you have committed to fulfill the order. In ISO 8601 date time format. Only returned for seller-fulfilled orders."}, "doc.amazon_selling_partner.earliest_ship_date": {"name": "earliest_ship_date", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.earliest_ship_date", "block_contents": "The start of the time period within which you have committed to ship the order. In ISO 8601 date time format. Only returned for seller-fulfilled orders. Note: EarliestShipDate might not be returned for orders placed before February 1, 2013."}, "doc.amazon_selling_partner.easy_ship_shipment_status": {"name": "easy_ship_shipment_status", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.easy_ship_shipment_status", "block_contents": "The status of the Amazon Easy Ship order. This property is only included for Amazon Easy Ship orders. Possible values can be found [here](https://developer-docs.amazon.com/sp-api/docs/orders-api-v0-reference#easyshipshipmentstatus)."}, "doc.amazon_selling_partner.electronic_invoice_status": {"name": "electronic_invoice_status", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.electronic_invoice_status", "block_contents": "The status of the electronic invoice. Only available for Easy Ship orders and orders in the BR marketplace. Possible values can be found [here](https://developer-docs.amazon.com/sp-api/docs/orders-api-v0-reference#electronicinvoicestatus)."}, "doc.amazon_selling_partner.fulfillment_channel": {"name": "fulfillment_channel", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.fulfillment_channel", "block_contents": "Whether the order was fulfilled by Amazon (AFN) or by the seller (MFN)."}, "doc.amazon_selling_partner.fulfillment_supply_source_id": {"name": "fulfillment_supply_source_id", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.fulfillment_supply_source_id", "block_contents": "The sourceId of the location from where you want the order fulfilled."}, "doc.amazon_selling_partner.has_regulated_items": {"name": "has_regulated_items", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.has_regulated_items", "block_contents": "Whether the order contains regulated items which may require additional approval steps before being fulfilled."}, "doc.amazon_selling_partner.is_access_point_order": {"name": "is_access_point_order", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.is_access_point_order", "block_contents": "When true, this order is marked to be delivered to an Access Point. The access location is chosen by the customer. Access Points include Amazon Hub Lockers, Amazon Hub Counters, and pickup points operated by carriers."}, "doc.amazon_selling_partner.is_business_order": {"name": "is_business_order", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.is_business_order", "block_contents": "When true, the order is an Amazon Business order. An Amazon Business order is an order where the buyer is a Verified Business Buyer."}, "doc.amazon_selling_partner.is_estimated_ship_date_set": {"name": "is_estimated_ship_date_set", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.is_estimated_ship_date_set", "block_contents": "When true, the estimated ship date is set for the order. Only returned for Sourcing on Demand orders."}, "doc.amazon_selling_partner.is_global_express_enabled": {"name": "is_global_express_enabled", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.is_global_express_enabled", "block_contents": "When true, the order is a GlobalExpress order."}, "doc.amazon_selling_partner.is_iba": {"name": "is_iba", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.is_iba", "block_contents": "When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller."}, "doc.amazon_selling_partner.is_ispu": {"name": "is_ispu", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.is_ispu", "block_contents": "When true, this order is marked to be picked up from a store rather than delivered."}, "doc.amazon_selling_partner.is_premium_order": {"name": "is_premium_order", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.is_premium_order", "block_contents": "When true, the order has a Premium Shipping Service Level Agreement. For more information about Premium Shipping orders, refer to \"Premium Shipping Options\" in the Seller Central Help for your marketplace."}, "doc.amazon_selling_partner.is_prime": {"name": "is_prime", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.is_prime", "block_contents": "When true, the order is a seller-fulfilled Amazon Prime order."}, "doc.amazon_selling_partner.is_replacement_order": {"name": "is_replacement_order", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.is_replacement_order", "block_contents": "When true, this is a replacement order."}, "doc.amazon_selling_partner.is_sold_by_ab": {"name": "is_sold_by_ab", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.is_sold_by_ab", "block_contents": "When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller."}, "doc.amazon_selling_partner.last_update_date": {"name": "last_update_date", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.last_update_date", "block_contents": "The date when the order was last updated. Note: LastUpdateDate is returned with an incorrect date for orders that were last updated before 2009-04-01."}, "doc.amazon_selling_partner.latest_delivery_date": {"name": "latest_delivery_date", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.latest_delivery_date", "block_contents": "The end of the time period within which you have committed to fulfill the order. In ISO 8601 date time format. Only returned for seller-fulfilled orders that do not have a PendingAvailability, Pending, or Canceled status."}, "doc.amazon_selling_partner.latest_ship_date": {"name": "latest_ship_date", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.latest_ship_date", "block_contents": "The end of the time period within which you have committed to ship the order. In ISO 8601 date time format. Only returned for seller-fulfilled orders. Note: LatestShipDate might not be returned for orders placed before February 1, 2013."}, "doc.amazon_selling_partner.marketplace_id": {"name": "marketplace_id", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.marketplace_id", "block_contents": "The unobfuscated marketplace identifier. Different marketplace values can be found [here](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids)."}, "doc.amazon_selling_partner.number_of_items_shipped": {"name": "number_of_items_shipped", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.number_of_items_shipped", "block_contents": "The number of items shipped for the order."}, "doc.amazon_selling_partner.number_of_items_unshipped": {"name": "number_of_items_unshipped", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.number_of_items_unshipped", "block_contents": "The number of items unshipped for the order."}, "doc.amazon_selling_partner.order_channel": {"name": "order_channel", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.order_channel", "block_contents": "The order channel for the first item in the order."}, "doc.amazon_selling_partner.order_status": {"name": "order_status", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.order_status", "block_contents": "The current order status. Possible values can be found [here](https://developer-docs.amazon.com/sp-api/docs/orders-api-v0-reference#orderstatus)."}, "doc.amazon_selling_partner.order_total_amount": {"name": "order_total_amount", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.order_total_amount", "block_contents": "The total charge for this order."}, "doc.amazon_selling_partner.order_total_currency_code": {"name": "order_total_currency_code", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.order_total_currency_code", "block_contents": "The three-digit currency code in which the order total is measured. In ISO 4217 format."}, "doc.amazon_selling_partner.order_type": {"name": "order_type", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.order_type", "block_contents": "The order's type. Possible values can be found [here](https://developer-docs.amazon.com/sp-api/docs/orders-api-v0-reference#ordertype)."}, "doc.amazon_selling_partner.payment_method": {"name": "payment_method", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.payment_method", "block_contents": "The payment method for the order. This property is limited to COD and CVS payment methods. Unless you need the specific COD payment information provided by the PaymentExecutionDetailItem object, Amazon recommends using the PaymentMethodDetails table to get payment method information."}, "doc.amazon_selling_partner.promise_response_due_date": {"name": "promise_response_due_date", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.promise_response_due_date", "block_contents": "Indicates the date by which the seller must respond to the buyer with an estimated ship date. Only returned for Sourcing on Demand orders."}, "doc.amazon_selling_partner.purchase_date": {"name": "purchase_date", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.purchase_date", "block_contents": "The date when the order was created."}, "doc.amazon_selling_partner.replaced_order_id": {"name": "replaced_order_id", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.replaced_order_id", "block_contents": "The order ID value for the order that is being replaced. Returned only if IsReplacementOrder = true."}, "doc.amazon_selling_partner.sales_channel": {"name": "sales_channel", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.sales_channel", "block_contents": "The sales channel for the first item in the order."}, "doc.amazon_selling_partner.seller_display_name": {"name": "seller_display_name", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.seller_display_name", "block_contents": "The seller\u2019s friendly name registered in the marketplace where the sale took place. Sellers can use this data to issue electronic invoices for orders in Brazil. Note: This attribute is only available in the Brazil marketplace for the orders with Pending or Unshipped status."}, "doc.amazon_selling_partner.seller_order_id": {"name": "seller_order_id", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.seller_order_id", "block_contents": "An order identifier that is specified by the seller. Used to select only the orders that match the order identifier. If SellerOrderId is specified, then FulfillmentChannels, OrderStatuses, PaymentMethod, LastUpdatedAfter, LastUpdatedBefore, and BuyerEmail cannot be specified."}, "doc.amazon_selling_partner.ship_service_level": {"name": "ship_service_level", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.ship_service_level", "block_contents": "The order's shipment service level."}, "doc.amazon_selling_partner.shipment_service_level_category": {"name": "shipment_service_level_category", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.shipment_service_level_category", "block_contents": "The shipment service level category for the order. Possible values: Expedited, FreeEconomy, NextDay, Priority, SameDay, SecondDay, Scheduled, and Standard."}, "doc.amazon_selling_partner.shipping_address_address_line_1": {"name": "shipping_address_address_line_1", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.shipping_address_address_line_1", "block_contents": "Street address of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields."}, "doc.amazon_selling_partner.shipping_address_address_line_2": {"name": "shipping_address_address_line_2", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.shipping_address_address_line_2", "block_contents": "Line 2 of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields."}, "doc.amazon_selling_partner.shipping_address_address_line_3": {"name": "shipping_address_address_line_3", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.shipping_address_address_line_3", "block_contents": "Line 3 of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields."}, "doc.amazon_selling_partner.shipping_address_address_type": {"name": "shipping_address_address_type", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.shipping_address_address_type", "block_contents": "Address type of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields."}, "doc.amazon_selling_partner.shipping_address_city": {"name": "shipping_address_city", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.shipping_address_city", "block_contents": "City of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields."}, "doc.amazon_selling_partner.shipping_address_country_code": {"name": "shipping_address_country_code", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.shipping_address_country_code", "block_contents": "Country code (two-character country code, in ISO 3166-1 alpha-2 format) of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields."}, "doc.amazon_selling_partner.shipping_address_county": {"name": "shipping_address_county", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.shipping_address_county", "block_contents": "County of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields."}, "doc.amazon_selling_partner.shipping_address_district": {"name": "shipping_address_district", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.shipping_address_district", "block_contents": "District of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields."}, "doc.amazon_selling_partner.shipping_address_municipality": {"name": "shipping_address_municipality", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.shipping_address_municipality", "block_contents": "Municipality of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields."}, "doc.amazon_selling_partner.shipping_address_name": {"name": "shipping_address_name", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.shipping_address_name", "block_contents": "Name of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields."}, "doc.amazon_selling_partner.shipping_address_phone": {"name": "shipping_address_phone", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.shipping_address_phone", "block_contents": "Phone number of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields.\n3. In some cases, the buyer phone number is suppressed:\n  a. Phone is suppressed for all AFN (fulfilled by Amazon) orders.\n  b. Phone is suppressed for the shipped MFN (fulfilled by seller) order when the current date is past the Latest Delivery Date."}, "doc.amazon_selling_partner.shipping_address_postal_code": {"name": "shipping_address_postal_code", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.shipping_address_postal_code", "block_contents": "Postal code of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields."}, "doc.amazon_selling_partner.shipping_address_state_or_region": {"name": "shipping_address_state_or_region", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.shipping_address_state_or_region", "block_contents": "State or region of the shipping address for the order.\n\nNote:\n1. ShippingAddress is only available for orders with the following status values: Unshipped, PartiallyShipped, Shipped and InvoiceUnconfirmed.\n2. The ShippingAddress contains restricted data. Use the Restricted Data Token (RDT) and restricted SPDS roles to access the restricted data in ShippingAddress. For example, Name, AddressLine1, AddressLine2, AddressLine3, Phone, AddressType, and ExtendedFields."}, "doc.amazon_selling_partner.order_item": {"name": "order_item", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.order_item", "block_contents": "A single order item."}, "doc.amazon_selling_partner.asin": {"name": "asin", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.asin", "block_contents": "The item's Amazon Standard Identification Number (ASIN)."}, "doc.amazon_selling_partner.buyer_requested_cancel_buyer_cancel_reason": {"name": "buyer_requested_cancel_buyer_cancel_reason", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.buyer_requested_cancel_buyer_cancel_reason", "block_contents": "The reason that the buyer requested cancellation."}, "doc.amazon_selling_partner.buyer_requested_cancel_is_buyer_requested_cancel": {"name": "buyer_requested_cancel_is_buyer_requested_cancel", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.buyer_requested_cancel_is_buyer_requested_cancel", "block_contents": "Boolean indicating whether the buyer has requested cancellation."}, "doc.amazon_selling_partner.condition_id": {"name": "condition_id", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.condition_id", "block_contents": "The condition of the item. Possible values: New, Used, Collectible, Refurbished, Preorder, and Club."}, "doc.amazon_selling_partner.condition_note": {"name": "condition_note", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.condition_note", "block_contents": "The condition of the item, as described by the seller."}, "doc.amazon_selling_partner.condition_subtype_id": {"name": "condition_subtype_id", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.condition_subtype_id", "block_contents": "The subcondition of the item.\n\nPossible values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, Any, and Other."}, "doc.amazon_selling_partner.deemed_reseller_category": {"name": "deemed_reseller_category", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.deemed_reseller_category", "block_contents": "The category of deemed reseller. This applies to selling partners that are not based in the EU and is used to help them meet the VAT Deemed Reseller tax laws in the EU and UK. \nEither `IOSS` (Import one stop shop. The item being purchased is not held in the EU for shipment) or `UOSS` (Union one stop shop. The item being purchased is held in the EU for shipment)."}, "doc.amazon_selling_partner.ioss_number": {"name": "ioss_number", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.ioss_number", "block_contents": "The IOSS number of the marketplace. Sellers shipping to the EU from outside the EU must provide this IOSS number to their carrier when Amazon has collected the VAT on the sale."}, "doc.amazon_selling_partner.is_gift": {"name": "is_gift", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.is_gift", "block_contents": "Boolean that tndicates whether the item is a gift."}, "doc.amazon_selling_partner.is_transparency": {"name": "is_transparency", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.is_transparency", "block_contents": "When true, the ASIN is enrolled in Transparency. The Transparency serial number that you must submit is determined by:\n\n- 1D or 2D Barcode: This has a T logo. Submit either the 29-character alpha-numeric identifier beginning with AZ or ZA, or the 38-character Serialized Global Trade Item Number (SGTIN).\n- 2D Barcode SN: Submit the 7- to 20-character serial number barcode, which likely has the prefix SN. The serial number is applied to the same side of the packaging as the GTIN (UPC/EAN/ISBN) barcode.\n- QR code SN: Submit the URL that the QR code generates."}, "doc.amazon_selling_partner.total_item_price_amount": {"name": "total_item_price_amount", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.total_item_price_amount", "block_contents": "The total selling price of the order's line items. Note that an individual order item is an item and a quantity. This means that the value of ItemPrice is equal to the selling price of the item multiplied by the quantity ordered. ItemPrice excludes ShippingPrice and GiftWrapPrice."}, "doc.amazon_selling_partner.item_price_amount": {"name": "item_price_amount", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.item_price_amount", "block_contents": "The selling price of the order item. Note that an order item is an item and a quantity. This means that the value of ItemPrice is equal to the selling price of the item multiplied by the quantity ordered. ItemPrice excludes ShippingPrice and GiftWrapPrice."}, "doc.amazon_selling_partner.item_price_currency_code": {"name": "item_price_currency_code", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.item_price_currency_code", "block_contents": "The three-digit currency code that the `item_price_amount` is listed in. In ISO 4217 format."}, "doc.amazon_selling_partner.item_tax_amount": {"name": "item_tax_amount", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.item_tax_amount", "block_contents": "The tax on the item price."}, "doc.amazon_selling_partner.total_item_tax_amount": {"name": "total_item_tax_amount", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.total_item_tax_amount", "block_contents": "The total tax on the order items' price."}, "doc.amazon_selling_partner.item_tax_currency_code": {"name": "item_tax_currency_code", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.item_tax_currency_code", "block_contents": "The three-digit currency code that the `item_tax_amount` is listed in. In ISO 4217 format."}, "doc.amazon_selling_partner.order_item_id": {"name": "order_item_id", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.order_item_id", "block_contents": "An Amazon-defined item identifier for the associated item."}, "doc.amazon_selling_partner.points_granted_monetary_amount": {"name": "points_granted_monetary_amount", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.points_granted_monetary_amount", "block_contents": "The monetary value of the Amazon Points granted."}, "doc.amazon_selling_partner.points_granted_monetary_currency_code": {"name": "points_granted_monetary_currency_code", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.points_granted_monetary_currency_code", "block_contents": "The three-digit currency code that the `points_granted_monetary_amount` is listed in. In ISO 4217 format."}, "doc.amazon_selling_partner.points_granted_points_number": {"name": "points_granted_points_number", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.points_granted_points_number", "block_contents": "The number of Amazon Points granted with the purchase of an item."}, "doc.amazon_selling_partner.price_designation": {"name": "price_designation", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.price_designation", "block_contents": "Indicates that the selling price is a special price that is only available for Amazon Business orders. For more information about the Amazon Business Seller Program, refer to the Amazon Business [website](https://business.amazon.com/?ref_=b2b_mcs_L0_mlpr). Possible value(s): BusinessPrice"}, "doc.amazon_selling_partner.product_info_detail_number_of_items": {"name": "product_info_detail_number_of_items", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.product_info_detail_number_of_items", "block_contents": "The total number of items that are included in the ASIN."}, "doc.amazon_selling_partner.promotion_discount_amount": {"name": "promotion_discount_amount", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.promotion_discount_amount", "block_contents": "The total of all promotional discounts in the offer."}, "doc.amazon_selling_partner.total_promotion_discount_amount": {"name": "total_promotion_discount_amount", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.total_promotion_discount_amount", "block_contents": "The total of all promotional discounts in the offers associated with the order."}, "doc.amazon_selling_partner.promotion_discount_currency_code": {"name": "promotion_discount_currency_code", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.promotion_discount_currency_code", "block_contents": "The three-digit currency code that the `promotion_discount_amount` is listed in. In ISO 4217 format."}, "doc.amazon_selling_partner.promotion_discount_tax_amount": {"name": "promotion_discount_tax_amount", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.promotion_discount_tax_amount", "block_contents": "The tax on the total of all promotional discounts in the offer."}, "doc.amazon_selling_partner.total_promotion_discount_tax_amount": {"name": "total_promotion_discount_tax_amount", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.total_promotion_discount_tax_amount", "block_contents": "The total tax on all promotional discounts in the offers associated with the order."}, "doc.amazon_selling_partner.promotion_discount_tax_currency_code": {"name": "promotion_discount_tax_currency_code", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.promotion_discount_tax_currency_code", "block_contents": "The three-digit currency code that the `promotion_discount_tax_amount` is listed in. In ISO 4217 format."}, "doc.amazon_selling_partner.quantity_ordered": {"name": "quantity_ordered", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.quantity_ordered", "block_contents": "The number of items in the order."}, "doc.amazon_selling_partner.quantity_shipped": {"name": "quantity_shipped", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.quantity_shipped", "block_contents": "The number of items shipped."}, "doc.amazon_selling_partner.scheduled_delivery_end_date": {"name": "scheduled_delivery_end_date", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.scheduled_delivery_end_date", "block_contents": "The end date of the scheduled delivery window in the time zone for the order destination. In ISO 8601 date time format."}, "doc.amazon_selling_partner.scheduled_delivery_start_date": {"name": "scheduled_delivery_start_date", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.scheduled_delivery_start_date", "block_contents": "The start date of the scheduled delivery window in the time zone for the order destination. In ISO 8601 date time format."}, "doc.amazon_selling_partner.seller_sku": {"name": "seller_sku", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.seller_sku", "block_contents": "The item's seller stock keeping unit (SKU)."}, "doc.amazon_selling_partner.serial_number_required": {"name": "serial_number_required", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.serial_number_required", "block_contents": "When true, the product type for this item has a serial number. Only returned for Amazon Easy Ship orders."}, "doc.amazon_selling_partner.shipping_discount_amount": {"name": "shipping_discount_amount", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.shipping_discount_amount", "block_contents": "The discount on the shipping price."}, "doc.amazon_selling_partner.total_shipping_discount_amount": {"name": "total_shipping_discount_amount", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.total_shipping_discount_amount", "block_contents": "The total discount on the order's shipping prices."}, "doc.amazon_selling_partner.shipping_discount_currency_code": {"name": "shipping_discount_currency_code", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.shipping_discount_currency_code", "block_contents": "The three-digit currency code that the `shipping_discount_amount` is listed in. In ISO 4217 format."}, "doc.amazon_selling_partner.shipping_discount_tax_amount": {"name": "shipping_discount_tax_amount", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.shipping_discount_tax_amount", "block_contents": "The tax on the discount on the shipping price."}, "doc.amazon_selling_partner.total_shipping_discount_tax_amount": {"name": "total_shipping_discount_tax_amount", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.total_shipping_discount_tax_amount", "block_contents": "The total tax on the discount on the order's shipping prices."}, "doc.amazon_selling_partner.shipping_discount_tax_currency_code": {"name": "shipping_discount_tax_currency_code", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.shipping_discount_tax_currency_code", "block_contents": "The three-digit currency code that the `shipping_discount_tax_amount` is listed in. In ISO 4217 format."}, "doc.amazon_selling_partner.shipping_price_amount": {"name": "shipping_price_amount", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.shipping_price_amount", "block_contents": "The item's shipping price."}, "doc.amazon_selling_partner.total_shipping_price_amount": {"name": "total_shipping_price_amount", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.total_shipping_price_amount", "block_contents": "The total order's shipping price."}, "doc.amazon_selling_partner.shipping_price_currency_code": {"name": "shipping_price_currency_code", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.shipping_price_currency_code", "block_contents": "The three-digit currency code that the `shipping_price_amount` is listed in. In ISO 4217 format."}, "doc.amazon_selling_partner.shipping_tax_amount": {"name": "shipping_tax_amount", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.shipping_tax_amount", "block_contents": "The tax on the shipping price."}, "doc.amazon_selling_partner.total_shipping_tax_amount": {"name": "total_shipping_tax_amount", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.total_shipping_tax_amount", "block_contents": "The total tax on the order's shipping price."}, "doc.amazon_selling_partner.shipping_tax_currency_code": {"name": "shipping_tax_currency_code", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.shipping_tax_currency_code", "block_contents": "The three-digit currency code that the `shipping_tax_amount` is listed in. In ISO 4217 format."}, "doc.amazon_selling_partner.store_chain_store_id": {"name": "store_chain_store_id", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.store_chain_store_id", "block_contents": "The store chain store identifier. Linked to a specific store in a store chain."}, "doc.amazon_selling_partner.tax_collection_model": {"name": "tax_collection_model", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.tax_collection_model", "block_contents": "The tax collection model applied to the item. Possible value(s) can be found [here](https://developer-docs.amazon.com/sp-api/docs/orders-api-v0-reference#model)."}, "doc.amazon_selling_partner.tax_collection_responsible_party": {"name": "tax_collection_responsible_party", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.tax_collection_responsible_party", "block_contents": "The party responsible for withholding the taxes and remitting them to the taxing authority. Possible value(s) can be found [here](https://developer-docs.amazon.com/sp-api/docs/orders-api-v0-reference#responsibleparty)."}, "doc.amazon_selling_partner.order_item_title": {"name": "order_item_title", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.order_item_title", "block_contents": "The item's title."}, "doc.amazon_selling_partner.promotion_id": {"name": "promotion_id", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.promotion_id", "block_contents": "Promotion identifier provided by the seller when the promotion was created."}, "doc.amazon_selling_partner.order_item_promotion_id": {"name": "order_item_promotion_id", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.order_item_promotion_id", "block_contents": "Table associating order items and any promotions used on them."}, "doc.amazon_selling_partner.product_type": {"name": "product_type", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.product_type", "block_contents": "Name of the product type associated with the Amazon catalog item."}, "doc.amazon_selling_partner.item_product_type": {"name": "item_product_type", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.item_product_type", "block_contents": "Product types associated with the Amazon catalog item."}, "doc.amazon_selling_partner.item_summary": {"name": "item_summary", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.item_summary", "block_contents": "Summary details of an Amazon catalog item for the indicated Amazon marketplace."}, "doc.amazon_selling_partner.source_relation": {"name": "source_relation", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.source_relation", "block_contents": "The `<database>`.`<schema>` this record came from."}, "doc.amazon_selling_partner._fivetran_synced": {"name": "_fivetran_synced", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner._fivetran_synced", "block_contents": "UTC timestamp of when the row was last successfully synced."}, "doc.amazon_selling_partner.adult_product": {"name": "adult_product", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.adult_product", "block_contents": "Identifies an Amazon catalog item is intended for an adult audience or is sexual in nature."}, "doc.amazon_selling_partner.autographed": {"name": "autographed", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.autographed", "block_contents": "Identifies an Amazon catalog item is autographed by a player or celebrity."}, "doc.amazon_selling_partner.brand": {"name": "brand", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.brand", "block_contents": "Name of the brand associated with an Amazon catalog item."}, "doc.amazon_selling_partner.classification_id": {"name": "classification_id", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.classification_id", "block_contents": "Identifier of the classification associated with the sales rank."}, "doc.amazon_selling_partner.color": {"name": "color", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.color", "block_contents": "Name of the color associated with an Amazon catalog item."}, "doc.amazon_selling_partner.contributors": {"name": "contributors", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.contributors", "block_contents": "Individual contributors to the creation of an item, such as the authors or actors."}, "doc.amazon_selling_partner.display_name": {"name": "display_name", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.display_name", "block_contents": "Display name for the classification."}, "doc.amazon_selling_partner.item_classification": {"name": "item_classification", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.item_classification", "block_contents": "Classification type associated with the Amazon catalog item. Possible values can be found [here](https://developer-docs.amazon.com/sp-api/docs/catalog-items-api-v2022-04-01-reference#itemclassification)."}, "doc.amazon_selling_partner.item_name": {"name": "item_name", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.item_name", "block_contents": "Name, or title, associated with an Amazon catalog item."}, "doc.amazon_selling_partner.manufacturer": {"name": "manufacturer", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.manufacturer", "block_contents": "Name of the manufacturer associated with an Amazon catalog item."}, "doc.amazon_selling_partner.memorabilia": {"name": "memorabilia", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.memorabilia", "block_contents": "Identifies an Amazon catalog item is memorabilia valued for its connection with historical events, culture, or entertainment."}, "doc.amazon_selling_partner.model_number": {"name": "model_number", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.model_number", "block_contents": "Model number associated with an Amazon catalog item."}, "doc.amazon_selling_partner.package_quantity": {"name": "package_quantity", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.package_quantity", "block_contents": "Quantity of an Amazon catalog item in one package."}, "doc.amazon_selling_partner.part_number": {"name": "part_number", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.part_number", "block_contents": "Part number associated with an Amazon catalog item."}, "doc.amazon_selling_partner.release_date": {"name": "release_date", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.release_date", "block_contents": "First date on which an Amazon catalog item is shippable to customers."}, "doc.amazon_selling_partner.size": {"name": "size", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.size", "block_contents": "Name of the size associated with an Amazon catalog item."}, "doc.amazon_selling_partner.style": {"name": "style", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.style", "block_contents": "Name of the style associated with an Amazon catalog item."}, "doc.amazon_selling_partner.trade_in_eligible": {"name": "trade_in_eligible", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.trade_in_eligible", "block_contents": "Identifies an Amazon catalog item is eligible for trade-in."}, "doc.amazon_selling_partner.website_display_group": {"name": "website_display_group", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.website_display_group", "block_contents": "Identifier of the website display group associated with an Amazon catalog item."}, "doc.amazon_selling_partner.website_display_group_name": {"name": "website_display_group_name", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.website_display_group_name", "block_contents": "Display name of the website display group associated with an Amazon catalog item."}, "doc.amazon_selling_partner.method": {"name": "method", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.method", "block_contents": "A sub-payment method for a COD order. Possible values: COD (Cash on delivery), GC (Gift card), CVS (Convenience Store), PointsAccount (Amazon Points), Invoice, or Other."}, "doc.amazon_selling_partner.methods": {"name": "methods", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.methods", "block_contents": "Comma-separated list of payment methods used for an order. Possible individual values: COD (Cash on delivery), GC (Gift card), CVS (Convenience Store), PointsAccount (Amazon Points), Invoice, or Other."}, "doc.amazon_selling_partner.payment_method_detail_item": {"name": "payment_method_detail_item", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.payment_method_detail_item", "block_contents": "A list of payment methods for the order."}, "doc.amazon_selling_partner.image_height": {"name": "image_height", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.image_height", "block_contents": "Height of the image in pixels."}, "doc.amazon_selling_partner.image_link": {"name": "image_link", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.image_link", "block_contents": "Link, or URL, for the image."}, "doc.amazon_selling_partner.image_variant": {"name": "image_variant", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.image_variant", "block_contents": "Variant of the image. Possible values can be found [here](https://developer-docs.amazon.com/sp-api/docs/catalog-items-api-v2022-04-01-reference#variant)."}, "doc.amazon_selling_partner.image_width": {"name": "image_width", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.image_width", "block_contents": "Width of the image in pixels."}, "doc.amazon_selling_partner.item_image": {"name": "item_image", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.item_image", "block_contents": "Images for an item in the Amazon catalog."}, "doc.amazon_selling_partner.item_display_group_sales_rank": {"name": "item_display_group_sales_rank", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.item_display_group_sales_rank", "block_contents": "Sales rank of an Amazon catalog item by website display group."}, "doc.amazon_selling_partner.sales_rank_link": {"name": "sales_rank_link", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.sales_rank_link", "block_contents": "Corresponding Amazon retail website link, or URL, for the sales rank."}, "doc.amazon_selling_partner.rank": {"name": "rank", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.rank", "block_contents": "Sales rank value."}, "doc.amazon_selling_partner.item_classification_sales_rank": {"name": "item_classification_sales_rank", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.item_classification_sales_rank", "block_contents": "Sales rank of an Amazon catalog item by classification."}, "doc.amazon_selling_partner.sales_rank_title": {"name": "sales_rank_title", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.sales_rank_title", "block_contents": "Title, or name, of the sales rank."}, "doc.amazon_selling_partner.item_identifier": {"name": "item_identifier", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.item_identifier", "block_contents": "Identifier associated with the item in the Amazon catalog, such as a UPC or EAN identifier."}, "doc.amazon_selling_partner.identifier": {"name": "identifier", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.identifier", "block_contents": "Type of identifier, such as UPC, EAN, or ISBN."}, "doc.amazon_selling_partner.identifier_type": {"name": "identifier_type", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.identifier_type", "block_contents": "Type of product identifiers to search the Amazon catalog for. Possible values can be found [here](https://developer-docs.amazon.com/sp-api/docs/catalog-items-api-v2022-04-01-reference#identifierstype)"}, "doc.amazon_selling_partner.item_dimension": {"name": "item_dimension", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.item_dimension", "block_contents": "Dimensions of an Amazon catalog item or item in its packaging."}, "doc.amazon_selling_partner.dimension_unit": {"name": "dimension_unit", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.dimension_unit", "block_contents": "Measurement unit of the dimension value."}, "doc.amazon_selling_partner.item_height_value": {"name": "item_height_value", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.item_height_value", "block_contents": "Height of an item."}, "doc.amazon_selling_partner.item_length_value": {"name": "item_length_value", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.item_length_value", "block_contents": "Length of an item."}, "doc.amazon_selling_partner.item_weight_value": {"name": "item_weight_value", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.item_weight_value", "block_contents": "Weight of an item."}, "doc.amazon_selling_partner.item_width_value": {"name": "item_width_value", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.item_width_value", "block_contents": "Width of an item."}, "doc.amazon_selling_partner.package_height_value": {"name": "package_height_value", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.package_height_value", "block_contents": "Height of an item package."}, "doc.amazon_selling_partner.package_length_value": {"name": "package_length_value", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.package_length_value", "block_contents": "Length of an item package."}, "doc.amazon_selling_partner.package_weight_value": {"name": "package_weight_value", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.package_weight_value", "block_contents": "Weight of an item package."}, "doc.amazon_selling_partner.package_width_value": {"name": "package_width_value", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.package_width_value", "block_contents": "Width of an item package."}, "doc.amazon_selling_partner.item_relationship": {"name": "item_relationship", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.item_relationship", "block_contents": "Relationship details for an Amazon catalog item."}, "doc.amazon_selling_partner.child_asin": {"name": "child_asin", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.child_asin", "block_contents": "Identifiers (ASIN) of the related item that is a child of this item."}, "doc.amazon_selling_partner.parent_asin": {"name": "parent_asin", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.parent_asin", "block_contents": "Identifiers (ASIN) of the related item that is a parent of this item."}, "doc.amazon_selling_partner.relationship_type": {"name": "relationship_type", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.relationship_type", "block_contents": "Type of relationship. [Possible values](https://developer-docs.amazon.com/sp-api/docs/catalog-items-api-v2022-04-01-reference#type) are `VARIATION` (the Amazon catalog item in the request is a variation parent or variation child of the related item(s) indicated by ASIN) or `PACKAGE_HIERARCHY` (the Amazon catalog item in the request is a package container or is contained by the related item(s) indicated by ASIN)."}, "doc.amazon_selling_partner.fba_inventory_summary": {"name": "fba_inventory_summary", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.fba_inventory_summary", "block_contents": "Inventory summary for a specific item."}, "doc.amazon_selling_partner.inventory_summary_id": {"name": "inventory_summary_id", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.inventory_summary_id", "block_contents": "Fivetran-generated Primary Key for inventory summaries."}, "doc.amazon_selling_partner.granularity_id": {"name": "granularity_id", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.granularity_id", "block_contents": "The granularity ID for the specified granularity type. When granularityType is Marketplace, specify the marketplaceId."}, "doc.amazon_selling_partner.granularity_type": {"name": "granularity_type", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.granularity_type", "block_contents": "The granularity type for the inventory aggregation level."}, "doc.amazon_selling_partner.carrier_damaged_quantity": {"name": "carrier_damaged_quantity", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.carrier_damaged_quantity", "block_contents": "The number of units in carrier damaged disposition."}, "doc.amazon_selling_partner.condition": {"name": "condition", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.condition", "block_contents": "The condition of the item as described by the seller (for example, New Item)."}, "doc.amazon_selling_partner.customer_damaged_quantity": {"name": "customer_damaged_quantity", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.customer_damaged_quantity", "block_contents": "The number of units in customer damaged disposition."}, "doc.amazon_selling_partner.defective_quantity": {"name": "defective_quantity", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.defective_quantity", "block_contents": "The number of units in defective disposition."}, "doc.amazon_selling_partner.distributor_damaged_quantity": {"name": "distributor_damaged_quantity", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.distributor_damaged_quantity", "block_contents": "The number of units in distributor damaged disposition."}, "doc.amazon_selling_partner.expired_quantity": {"name": "expired_quantity", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.expired_quantity", "block_contents": "The number of units in expired disposition."}, "doc.amazon_selling_partner.fc_processing_quantity": {"name": "fc_processing_quantity", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.fc_processing_quantity", "block_contents": "The number of units that have been sidelined at the fulfillment center for additional processing."}, "doc.amazon_selling_partner.fn_sku": {"name": "fn_sku", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.fn_sku", "block_contents": "Amazon's fulfillment network SKU identifier."}, "doc.amazon_selling_partner.fullfillable_quantity": {"name": "fullfillable_quantity", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.fullfillable_quantity", "block_contents": "The item quantity that can be picked, packed, and shipped."}, "doc.amazon_selling_partner.inblound_shipped_quantity": {"name": "inblound_shipped_quantity", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.inblound_shipped_quantity", "block_contents": "The number of units in an inbound shipment that you have notified Amazon about and have provided a tracking number."}, "doc.amazon_selling_partner.inbound_receiving_quantity": {"name": "inbound_receiving_quantity", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.inbound_receiving_quantity", "block_contents": "The number of units that have not yet been received at an Amazon fulfillment center for processing, but are part of an inbound shipment with some units that have already been received and processed."}, "doc.amazon_selling_partner.inbound_working_quantity": {"name": "inbound_working_quantity", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.inbound_working_quantity", "block_contents": "The number of units in an inbound shipment for which you have notified Amazon."}, "doc.amazon_selling_partner.last_updated_time": {"name": "last_updated_time", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.last_updated_time", "block_contents": "The date and time that any quantity was last updated."}, "doc.amazon_selling_partner.pending_customer_order_quantity": {"name": "pending_customer_order_quantity", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.pending_customer_order_quantity", "block_contents": "The number of units reserved for customer orders."}, "doc.amazon_selling_partner.pending_transshipment_quantity": {"name": "pending_transshipment_quantity", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.pending_transshipment_quantity", "block_contents": "The number of units being transferred from one fulfillment center to another."}, "doc.amazon_selling_partner.product_name": {"name": "product_name", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.product_name", "block_contents": "The localized language product title of the item within the specific marketplace."}, "doc.amazon_selling_partner.total_quantity": {"name": "total_quantity", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.total_quantity", "block_contents": "The total number of units in an inbound shipment or in Amazon fulfillment centers."}, "doc.amazon_selling_partner.total_researching_quantity": {"name": "total_researching_quantity", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.total_researching_quantity", "block_contents": "The total number of units in Amazon's fulfillment network that are currently being picked, packed, and shipped; or are sidelined for measurement, sampling, or other internal processes."}, "doc.amazon_selling_partner.total_reserved_quantity": {"name": "total_reserved_quantity", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.total_reserved_quantity", "block_contents": "The total number of units in Amazon's fulfillment network that are currently being picked, packed, and shipped; or are sidelined for measurement, sampling, or other internal processes."}, "doc.amazon_selling_partner.total_unfulfillable_quantity": {"name": "total_unfulfillable_quantity", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.total_unfulfillable_quantity", "block_contents": "The total number of units in Amazon's fulfillment network in unsellable condition."}, "doc.amazon_selling_partner.warehouse_damaged_quantity": {"name": "warehouse_damaged_quantity", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.warehouse_damaged_quantity", "block_contents": "The number of units in warehouse damaged disposition."}, "doc.amazon_selling_partner.fba_inventory_researching_quantity_entry": {"name": "fba_inventory_researching_quantity_entry", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.fba_inventory_researching_quantity_entry", "block_contents": "The misplaced or warehouse damaged inventory that is actively being confirmed at Amazon fulfillment centers."}, "doc.amazon_selling_partner.name": {"name": "name", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.name", "block_contents": "The duration of the research. [Possible values](https://developer-docs.amazon.com/sp-api/docs/fbainventory-api-v1-reference#name) are `researchingQuantityInShortTerm` (Short term for 1-10 days), `researchingQuantityInMidTerm` (Mid term for 11-20 days), and `researchingQuantityInLongTerm` (Long term for 21 days or longer)"}, "doc.amazon_selling_partner.quantity": {"name": "quantity", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.quantity", "block_contents": "The number of units."}, "doc.amazon_selling_partner.count_promotions_used": {"name": "count_promotions_used", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.count_promotions_used", "block_contents": "The count of distinct promotions used."}, "doc.amazon_selling_partner.parent_variation_asin": {"name": "parent_variation_asin", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.parent_variation_asin", "block_contents": "Identifier (ASIN) of the item's variation parent."}, "doc.amazon_selling_partner.parent_package_container_asin": {"name": "parent_package_container_asin", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.parent_package_container_asin", "block_contents": "Identifier (ASIN) of the item's package container parent."}, "doc.amazon_selling_partner.sku": {"name": "sku", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.sku", "block_contents": "Stock Keeping Unit, a seller-specified identifier for an Amazon listed item."}, "doc.amazon_selling_partner.ean": {"name": "ean", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.ean", "block_contents": "European Article Number of the catalog item."}, "doc.amazon_selling_partner.gtin": {"name": "gtin", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.gtin", "block_contents": "Global Trade Item Number of the catalog item."}, "doc.amazon_selling_partner.isbn": {"name": "isbn", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.isbn", "block_contents": "International Standard Book Number of the catalog item."}, "doc.amazon_selling_partner.jan": {"name": "jan", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.jan", "block_contents": "Japanese Article Number of the catalog item."}, "doc.amazon_selling_partner.minsan": {"name": "minsan", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.minsan", "block_contents": "Minsan Code of the catalog item."}, "doc.amazon_selling_partner.upc": {"name": "upc", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.upc", "block_contents": "Universal Product Code of the catalog item."}, "doc.amazon_selling_partner.count_images": {"name": "count_images", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.count_images", "block_contents": "Count of images for an item in the Amazon catalog for the indicated Amazon marketplace."}, "doc.amazon_selling_partner.count_swatch_images": {"name": "count_swatch_images", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.count_swatch_images", "block_contents": "Count of Swatch images for this item."}, "doc.amazon_selling_partner.long_term_research_quantity": {"name": "long_term_research_quantity", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.long_term_research_quantity", "block_contents": "The quantity of misplaced or warehouse damaged inventory that is actively being confirmed at Amazon fulfillment center and researched for a duration of 21 days or longer."}, "doc.amazon_selling_partner.mid_term_research_quantity": {"name": "mid_term_research_quantity", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.mid_term_research_quantity", "block_contents": "The quantity of misplaced or warehouse damaged inventory that is actively being confirmed at Amazon fulfillment center and researched for a duration of 11-20 days."}, "doc.amazon_selling_partner.short_term_research_quantity": {"name": "short_term_research_quantity", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.short_term_research_quantity", "block_contents": "The quantity of misplaced or warehouse damaged inventory that is actively being confirmed at Amazon fulfillment center and researched for a duration of 1-10 days."}, "doc.amazon_selling_partner.count_order_items": {"name": "count_order_items", "resource_type": "doc", "package_name": "amazon_selling_partner", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.amazon_selling_partner.count_order_items", "block_contents": "Count of order items associated with the order."}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {"test.amazon_selling_partner_integration_tests.consistency_orders": [{"database": "dbt-package-testing", "schema": "asp_tests_dbt_test__audit", "name": "consistency_orders", "resource_type": "test", "package_name": "amazon_selling_partner_integration_tests", "path": "consistency/consistency_orders.sql", "original_file_path": "tests/consistency/consistency_orders.sql", "unique_id": "test.amazon_selling_partner_integration_tests.consistency_orders", "fqn": ["amazon_selling_partner_integration_tests", "consistency", "consistency_orders"], "alias": "consistency_orders", "checksum": {"name": "sha256", "checksum": "4c2e830c8a22b53a9d5aae76d14231b88a71061ad784560589ca1be67f6e215a"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1743628944.874927, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\nwith prod as (\n    select\n        {{ dbt_utils.star(from=ref('amazon_selling_partner__orders'), except=var('consistency_test_exclude_fields', '[]')) }}\n    from {{ target.schema }}_amazon_selling_partner_prod.amazon_selling_partner__orders\n),\n\ndev as (\n    select\n        {{ dbt_utils.star(from=ref('amazon_selling_partner__orders'), except=var('consistency_test_exclude_fields', '[]')) }}\n    from {{ target.schema }}_amazon_selling_partner_dev.amazon_selling_partner__orders\n),\n\nprod_not_in_dev as (\n    -- rows from prod not found in dev\n    select * from prod\n    except distinct\n    select * from dev\n),\n\ndev_not_in_prod as (\n    -- rows from dev not found in prod\n    select * from dev\n    except distinct\n    select * from prod\n),\n\nfinal as (\n    select\n        *,\n        'from prod' as source\n    from prod_not_in_dev\n\n    union all -- union since we only care if rows are produced\n\n    select\n        *,\n        'from dev' as source\n    from dev_not_in_prod\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "amazon_selling_partner__orders", "package": null, "version": null}, {"name": "amazon_selling_partner__orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.amazon_selling_partner_integration_tests.consistency_order_items": [{"database": "dbt-package-testing", "schema": "asp_tests_dbt_test__audit", "name": "consistency_order_items", "resource_type": "test", "package_name": "amazon_selling_partner_integration_tests", "path": "consistency/consistency_order_items.sql", "original_file_path": "tests/consistency/consistency_order_items.sql", "unique_id": "test.amazon_selling_partner_integration_tests.consistency_order_items", "fqn": ["amazon_selling_partner_integration_tests", "consistency", "consistency_order_items"], "alias": "consistency_order_items", "checksum": {"name": "sha256", "checksum": "651479209d8802488c64501a73b353af6c4f745775278016caa3a03a776beea6"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1743628944.9007092, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\nwith prod as (\n    select\n        {{ dbt_utils.star(from=ref('amazon_selling_partner__order_items'), except=var('consistency_test_exclude_fields', '[]')) }}\n    from {{ target.schema }}_amazon_selling_partner_prod.amazon_selling_partner__order_items\n),\n\ndev as (\n    select\n        {{ dbt_utils.star(from=ref('amazon_selling_partner__order_items'), except=var('consistency_test_exclude_fields', '[]')) }}\n    from {{ target.schema }}_amazon_selling_partner_dev.amazon_selling_partner__order_items\n),\n\nprod_not_in_dev as (\n    -- rows from prod not found in dev\n    select * from prod\n    except distinct\n    select * from dev\n),\n\ndev_not_in_prod as (\n    -- rows from dev not found in prod\n    select * from dev\n    except distinct\n    select * from prod\n),\n\nfinal as (\n    select\n        *,\n        'from prod' as source\n    from prod_not_in_dev\n\n    union all -- union since we only care if rows are produced\n\n    select\n        *,\n        'from dev' as source\n    from dev_not_in_prod\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "amazon_selling_partner__order_items", "package": null, "version": null}, {"name": "amazon_selling_partner__order_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.amazon_selling_partner_integration_tests.integrity_orders": [{"database": "dbt-package-testing", "schema": "asp_tests_dbt_test__audit", "name": "integrity_orders", "resource_type": "test", "package_name": "amazon_selling_partner_integration_tests", "path": "integrity/integrity_orders.sql", "original_file_path": "tests/integrity/integrity_orders.sql", "unique_id": "test.amazon_selling_partner_integration_tests.integrity_orders", "fqn": ["amazon_selling_partner_integration_tests", "integrity", "integrity_orders"], "alias": "integrity_orders", "checksum": {"name": "sha256", "checksum": "f15ece0972f0943e17f939333211c037bbeb1ba87e38b8cffa8860fe7bfbe1fe"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1743628944.9046988, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\nwith source as (\n\n    select \n        count(*) as row_count,\n        count(distinct amazon_order_id) as count_distinct_orders,\n        round(sum(coalesce(order_total_amount, 0)), 2) as order_total_amount,\n        sum(coalesce(number_of_items_shipped, 0)) as number_of_items_shipped,\n        sum(coalesce(number_of_items_unshipped, 0)) as number_of_items_unshipped\n    from {{ target.schema }}_amazon_selling_partner_dev.stg_amazon_selling_partner__orders\n),\n\nmodel as (\n\n    select \n        count(*) as row_count,\n        count(distinct amazon_order_id) as count_distinct_orders,\n        round(sum(coalesce(order_total_amount, 0)), 2) as order_total_amount,\n        sum(coalesce(number_of_items_shipped, 0)) as number_of_items_shipped,\n        sum(coalesce(number_of_items_unshipped, 0)) as number_of_items_unshipped\n    from {{ target.schema }}_amazon_selling_partner_dev.amazon_selling_partner__orders\n)\n\nselect \n    model.row_count as model_row_count,\n    source.row_count as source_row_count,\n    model.count_distinct_orders as model_count_distinct_orders,\n    source.count_distinct_orders as source_count_distinct_orders,\n    model.order_total_amount as model_order_total_amount,\n    source.order_total_amount as source_order_total_amount,\n    model.number_of_items_shipped as model_number_of_items_shipped,\n    source.number_of_items_shipped as source_number_of_items_shipped,\n    model.number_of_items_unshipped as model_number_of_items_unshipped,\n    source.number_of_items_unshipped as source_number_of_items_unshipped\n\nfrom model \njoin source on true\nwhere \n    model.row_count != source.row_count or\n    model.count_distinct_orders != source.count_distinct_orders or\n    model.order_total_amount != source.order_total_amount or\n    model.number_of_items_shipped != source.number_of_items_shipped or\n    model.number_of_items_unshipped != source.number_of_items_unshipped", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.amazon_selling_partner_integration_tests.integrity_order_items": [{"database": "dbt-package-testing", "schema": "asp_tests_dbt_test__audit", "name": "integrity_order_items", "resource_type": "test", "package_name": "amazon_selling_partner_integration_tests", "path": "integrity/integrity_order_items.sql", "original_file_path": "tests/integrity/integrity_order_items.sql", "unique_id": "test.amazon_selling_partner_integration_tests.integrity_order_items", "fqn": ["amazon_selling_partner_integration_tests", "integrity", "integrity_order_items"], "alias": "integrity_order_items", "checksum": {"name": "sha256", "checksum": "75a14f9a8a2b7ebc8c16c7baed226ce55017fb30c59a7419af63d681c1016ac9"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1743628944.907708, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\nwith source as (\n\n    select \n        count(*) as row_count,\n        count(distinct amazon_order_id) as count_distinct_orders,\n        count(distinct asin) as count_distinct_asin,\n        count(distinct order_item_id) as count_distinct_order_items,\n        round(sum(coalesce(quantity_ordered, 0)), 2) as quantity_ordered,\n        round(sum(coalesce(quantity_shipped, 0)), 2) as quantity_shipped,\n        round(sum(coalesce(item_price_amount, 0)), 2) as item_price_amount,\n        round(sum(coalesce(item_tax_amount, 0)), 2) as item_tax_amount,\n        round(sum(coalesce(shipping_discount_amount, 0)), 2) as shipping_discount_amount,\n        round(sum(coalesce(shipping_discount_tax_amount, 0)), 2) as shipping_discount_tax_amount,\n        round(sum(coalesce(shipping_price_amount, 0)), 2) as shipping_price_amount,\n        round(sum(coalesce(shipping_tax_amount, 0)), 2) as shipping_tax_amount,\n        round(sum(coalesce(promotion_discount_amount, 0)), 2) as promotion_discount_amount,\n        round(sum(coalesce(promotion_discount_tax_amount, 0)), 2) as promotion_discount_tax_amount\n\n    from {{ target.schema }}_amazon_selling_partner_dev.stg_amazon_selling_partner__order_item\n),\n\nmodel as (\n\n    select \n        count(*) as row_count,\n        count(distinct amazon_order_id) as count_distinct_orders,\n        count(distinct asin) as count_distinct_asin,\n        count(distinct order_item_id) as count_distinct_order_items,\n        round(sum(coalesce(quantity_ordered, 0)), 2) as quantity_ordered,\n        round(sum(coalesce(quantity_shipped, 0)), 2) as quantity_shipped,\n        round(sum(coalesce(item_price_amount, 0)), 2) as item_price_amount,\n        round(sum(coalesce(item_tax_amount, 0)), 2) as item_tax_amount,\n        round(sum(coalesce(shipping_discount_amount, 0)), 2) as shipping_discount_amount,\n        round(sum(coalesce(shipping_discount_tax_amount, 0)), 2) as shipping_discount_tax_amount,\n        round(sum(coalesce(shipping_price_amount, 0)), 2) as shipping_price_amount,\n        round(sum(coalesce(shipping_tax_amount, 0)), 2) as shipping_tax_amount,\n        round(sum(coalesce(promotion_discount_amount, 0)), 2) as promotion_discount_amount,\n        round(sum(coalesce(promotion_discount_tax_amount, 0)), 2) as promotion_discount_tax_amount\n\n    from {{ target.schema }}_amazon_selling_partner_dev.amazon_selling_partner__order_items\n)\n\nselect \n    model.row_count as model_row_count,\n    source.row_count as source_row_count,\n    model.count_distinct_orders as model_count_distinct_orders,\n    source.count_distinct_orders as source_count_distinct_orders,\n    model.count_distinct_asin as model_count_distinct_asin,\n    source.count_distinct_asin as source_count_distinct_asin,\n    model.count_distinct_order_items as model_count_distinct_order_items,\n    source.count_distinct_order_items as source_count_distinct_order_items,\n    model.quantity_ordered as model_quantity_ordered,\n    source.quantity_ordered as source_quantity_ordered,\n    model.quantity_shipped as model_quantity_shipped,\n    source.quantity_shipped as source_quantity_shipped,\n    model.item_price_amount as model_item_price_amount,\n    source.item_price_amount as source_item_price_amount,\n    model.item_tax_amount as model_item_tax_amount,\n    source.item_tax_amount as source_item_tax_amount,\n    model.shipping_discount_amount as model_shipping_discount_amount,\n    source.shipping_discount_amount as source_shipping_discount_amount,\n    model.shipping_discount_tax_amount as model_shipping_discount_tax_amount,\n    source.shipping_discount_tax_amount as source_shipping_discount_tax_amount,\n    model.shipping_price_amount as model_shipping_price_amount,\n    source.shipping_price_amount as source_shipping_price_amount,\n    model.shipping_tax_amount as model_shipping_tax_amount,\n    source.shipping_tax_amount as source_shipping_tax_amount,\n    model.promotion_discount_amount as model_promotion_discount_amount,\n    source.promotion_discount_amount as source_promotion_discount_amount,\n    model.promotion_discount_tax_amount as model_promotion_discount_tax_amount,\n    source.promotion_discount_tax_amount as source_promotion_discount_tax_amount\n\nfrom model \njoin source on true\nwhere \n    model.row_count != source.row_count or\n    model.count_distinct_orders != source.count_distinct_orders or\n    model.count_distinct_asin != source.count_distinct_asin or\n    model.count_distinct_order_items != source.count_distinct_order_items or\n    model.quantity_ordered != source.quantity_ordered or\n    model.quantity_shipped != source.quantity_shipped or\n    model.item_price_amount != source.item_price_amount or\n    model.item_tax_amount != source.item_tax_amount or\n    model.shipping_discount_amount != source.shipping_discount_amount or\n    model.shipping_discount_tax_amount != source.shipping_discount_tax_amount or\n    model.shipping_price_amount != source.shipping_price_amount or\n    model.shipping_tax_amount != source.shipping_tax_amount or\n    model.promotion_discount_amount != source.promotion_discount_amount or\n    model.promotion_discount_tax_amount != source.promotion_discount_tax_amount", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.amazon_selling_partner_integration_tests.integrity_item_inventory": [{"database": "dbt-package-testing", "schema": "asp_tests_dbt_test__audit", "name": "integrity_item_inventory", "resource_type": "test", "package_name": "amazon_selling_partner_integration_tests", "path": "integrity/integrity_item_inventory.sql", "original_file_path": "tests/integrity/integrity_item_inventory.sql", "unique_id": "test.amazon_selling_partner_integration_tests.integrity_item_inventory", "fqn": ["amazon_selling_partner_integration_tests", "integrity", "integrity_item_inventory"], "alias": "integrity_item_inventory", "checksum": {"name": "sha256", "checksum": "8011f4573b035f3fc897b1bb136224eb766e9c8bf1420d0dce48d767b7ed2d82"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1743628944.910846, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\nwith item_source as (\n\n    select *\n    from {{ target.schema }}_amazon_selling_partner_dev.stg_amazon_selling_partner__item_summary\n),\n\ninventory_source as (\n\n    select *\n    from {{ target.schema }}_amazon_selling_partner_dev.stg_amazon_selling_partner__fba_inventory_summary\n),\n\nsource as (\n\n    select \n        count(*) as row_count,\n        count(distinct item_source.asin) as count_distinct_asin,\n        sum(coalesce(total_quantity, 0)) as total_quantity,\n        sum(coalesce(total_researching_quantity, 0)) as total_researching_quantity,\n        sum(coalesce(total_reserved_quantity, 0)) as total_reserved_quantity,\n        sum(coalesce(fullfillable_quantity, 0)) as fullfillable_quantity,\n        sum(coalesce(total_unfulfillable_quantity, 0)) as total_unfulfillable_quantity,\n        sum(coalesce(pending_customer_order_quantity, 0)) as pending_customer_order_quantity,\n        sum(coalesce(pending_transshipment_quantity, 0)) as pending_transshipment_quantity,\n        sum(coalesce(fc_processing_quantity, 0)) as fc_processing_quantity,\n        sum(coalesce(inblound_shipped_quantity, 0)) as inblound_shipped_quantity,\n        sum(coalesce(inbound_receiving_quantity, 0)) as inbound_receiving_quantity,\n        sum(coalesce(inbound_working_quantity, 0)) as inbound_working_quantity,\n        sum(coalesce(warehouse_damaged_quantity, 0)) as warehouse_damaged_quantity,\n        sum(coalesce(carrier_damaged_quantity, 0)) as carrier_damaged_quantity,\n        sum(coalesce(customer_damaged_quantity, 0)) as customer_damaged_quantity,\n        sum(coalesce(defective_quantity, 0)) as defective_quantity,\n        sum(coalesce(distributor_damaged_quantity, 0)) as distributor_damaged_quantity,\n        sum(coalesce(expired_quantity, 0)) as expired_quantity\n    from item_source \n    left join inventory_source \n        on item_source.asin = inventory_source.asin \n        and item_source.source_relation = inventory_source.source_relation\n),\n\nmodel as (\n\n    select \n        count(*) as row_count,\n        count(distinct asin) as count_distinct_asin,\n        sum(coalesce(total_quantity, 0)) as total_quantity,\n        sum(coalesce(total_researching_quantity, 0)) as total_researching_quantity,\n        sum(coalesce(total_reserved_quantity, 0)) as total_reserved_quantity,\n        sum(coalesce(fullfillable_quantity, 0)) as fullfillable_quantity,\n        sum(coalesce(total_unfulfillable_quantity, 0)) as total_unfulfillable_quantity,\n        sum(coalesce(pending_customer_order_quantity, 0)) as pending_customer_order_quantity,\n        sum(coalesce(pending_transshipment_quantity, 0)) as pending_transshipment_quantity,\n        sum(coalesce(fc_processing_quantity, 0)) as fc_processing_quantity,\n        sum(coalesce(inblound_shipped_quantity, 0)) as inblound_shipped_quantity,\n        sum(coalesce(inbound_receiving_quantity, 0)) as inbound_receiving_quantity,\n        sum(coalesce(inbound_working_quantity, 0)) as inbound_working_quantity,\n        sum(coalesce(warehouse_damaged_quantity, 0)) as warehouse_damaged_quantity,\n        sum(coalesce(carrier_damaged_quantity, 0)) as carrier_damaged_quantity,\n        sum(coalesce(customer_damaged_quantity, 0)) as customer_damaged_quantity,\n        sum(coalesce(defective_quantity, 0)) as defective_quantity,\n        sum(coalesce(distributor_damaged_quantity, 0)) as distributor_damaged_quantity,\n        sum(coalesce(expired_quantity, 0)) as expired_quantity\n\n    from {{ target.schema }}_amazon_selling_partner_dev.amazon_selling_partner__item_inventory\n)\n\nselect \n    model.row_count as model_row_count,\n    source.row_count as source_row_count,\n    model.count_distinct_asin as model_count_distinct_asin,\n    source.count_distinct_asin as source_count_distinct_asin,\n    model.total_quantity as model_total_quantity,\n    source.total_quantity as source_total_quantity,\n    model.total_researching_quantity as model_total_researching_quantity,\n    source.total_researching_quantity as source_total_researching_quantity,\n    model.total_reserved_quantity as model_total_reserved_quantity,\n    source.total_reserved_quantity as source_total_reserved_quantity,\n    model.fullfillable_quantity as model_fullfillable_quantity,\n    source.fullfillable_quantity as source_fullfillable_quantity,\n    model.total_unfulfillable_quantity as model_total_unfulfillable_quantity,\n    source.total_unfulfillable_quantity as source_total_unfulfillable_quantity,\n    model.pending_customer_order_quantity as model_pending_customer_order_quantity,\n    source.pending_customer_order_quantity as source_pending_customer_order_quantity,\n    model.pending_transshipment_quantity as model_pending_transshipment_quantity,\n    source.pending_transshipment_quantity as source_pending_transshipment_quantity,\n    model.fc_processing_quantity as model_fc_processing_quantity,\n    source.fc_processing_quantity as source_fc_processing_quantity,\n    model.inblound_shipped_quantity as model_inblound_shipped_quantity,\n    source.inblound_shipped_quantity as source_inblound_shipped_quantity,\n    model.inbound_receiving_quantity as model_inbound_receiving_quantity,\n    source.inbound_receiving_quantity as source_inbound_receiving_quantity,\n    model.inbound_working_quantity as model_inbound_working_quantity,\n    source.inbound_working_quantity as source_inbound_working_quantity,\n    model.warehouse_damaged_quantity as model_warehouse_damaged_quantity,\n    source.warehouse_damaged_quantity as source_warehouse_damaged_quantity,\n    model.carrier_damaged_quantity as model_carrier_damaged_quantity,\n    source.carrier_damaged_quantity as source_carrier_damaged_quantity,\n    model.customer_damaged_quantity as model_customer_damaged_quantity,\n    source.customer_damaged_quantity as source_customer_damaged_quantity,\n    model.defective_quantity as model_defective_quantity,\n    source.defective_quantity as source_defective_quantity,\n    model.distributor_damaged_quantity as model_distributor_damaged_quantity,\n    source.distributor_damaged_quantity as source_distributor_damaged_quantity,\n    model.expired_quantity as model_expired_quantity,\n    source.expired_quantity as source_expired_quantity\n\nfrom model \njoin source on true\nwhere \n    model.row_count != source.row_count or\n    model.count_distinct_asin != source.count_distinct_asin or\n    model.total_quantity != source.total_quantity or\n    model.total_researching_quantity != source.total_researching_quantity or\n    model.total_reserved_quantity != source.total_reserved_quantity or\n    model.fullfillable_quantity != source.fullfillable_quantity or\n    model.total_unfulfillable_quantity != source.total_unfulfillable_quantity or\n    model.pending_customer_order_quantity != source.pending_customer_order_quantity or\n    model.pending_transshipment_quantity != source.pending_transshipment_quantity or\n    model.fc_processing_quantity != source.fc_processing_quantity or\n    model.inblound_shipped_quantity != source.inblound_shipped_quantity or\n    model.inbound_receiving_quantity != source.inbound_receiving_quantity or\n    model.inbound_working_quantity != source.inbound_working_quantity or\n    model.warehouse_damaged_quantity != source.warehouse_damaged_quantity or\n    model.carrier_damaged_quantity != source.carrier_damaged_quantity or\n    model.customer_damaged_quantity != source.customer_damaged_quantity or\n    model.defective_quantity != source.defective_quantity or\n    model.distributor_damaged_quantity != source.distributor_damaged_quantity or\n    model.expired_quantity != source.expired_quantity", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}]}, "parent_map": {"seed.amazon_selling_partner_integration_tests.orders": [], "seed.amazon_selling_partner_integration_tests.order_item_promotion_id": [], "seed.amazon_selling_partner_integration_tests.item_relationship": [], "seed.amazon_selling_partner_integration_tests.financial_service_fee_event": [], "seed.amazon_selling_partner_integration_tests.financial_fee_component": [], "seed.amazon_selling_partner_integration_tests.vendor_retail_procurement_order_item": [], "seed.amazon_selling_partner_integration_tests.item_dimension": [], "seed.amazon_selling_partner_integration_tests.item_classification_sales_rank": [], "seed.amazon_selling_partner_integration_tests.vendor_retail_procurement_order_item_status": [], "seed.amazon_selling_partner_integration_tests.item_product_type": [], "seed.amazon_selling_partner_integration_tests.item_summary": [], "seed.amazon_selling_partner_integration_tests.payment_method_detail_item": [], "seed.amazon_selling_partner_integration_tests.item_variation_theme": [], "seed.amazon_selling_partner_integration_tests.item_display_group_sales_rank": [], "seed.amazon_selling_partner_integration_tests.item_identifier": [], "seed.amazon_selling_partner_integration_tests.item_image": [], "seed.amazon_selling_partner_integration_tests.fba_inventory_summary": [], "seed.amazon_selling_partner_integration_tests.catalog": [], "seed.amazon_selling_partner_integration_tests.financial_charge_component": [], "seed.amazon_selling_partner_integration_tests.fba_inventory_researching_quantity_entry": [], "seed.amazon_selling_partner_integration_tests.vendor_retail_procurement_order_status": [], "seed.amazon_selling_partner_integration_tests.order_item": [], "seed.amazon_selling_partner_integration_tests.vendor_retail_procurement_order": [], "model.amazon_selling_partner.amazon_selling_partner__order_items": ["model.amazon_selling_partner.int_amazon_selling_partner__item", "model.amazon_selling_partner.stg_amazon_selling_partner__order_item", "model.amazon_selling_partner.stg_amazon_selling_partner__order_item_promotion_id", "model.amazon_selling_partner.stg_amazon_selling_partner__orders"], "model.amazon_selling_partner.amazon_selling_partner__item_inventory": ["model.amazon_selling_partner.int_amazon_selling_partner__item", "model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_researching", "model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_summary"], "model.amazon_selling_partner.amazon_selling_partner__orders": ["model.amazon_selling_partner.stg_amazon_selling_partner__order_item", "model.amazon_selling_partner.stg_amazon_selling_partner__order_item_promotion_id", "model.amazon_selling_partner.stg_amazon_selling_partner__orders", "model.amazon_selling_partner.stg_amazon_selling_partner__payment_method_detail_item"], "model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_researching": ["model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_researching_base"], "model.amazon_selling_partner.stg_amazon_selling_partner__item_image": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_image_base"], "model.amazon_selling_partner.stg_amazon_selling_partner__payment_method_detail_item": ["model.amazon_selling_partner.stg_amazon_selling_partner__payment_method_detail_item_base"], "model.amazon_selling_partner.stg_amazon_selling_partner__item_product_type": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_product_type_base"], "model.amazon_selling_partner.stg_amazon_selling_partner__order_item": ["model.amazon_selling_partner.stg_amazon_selling_partner__order_item_base"], "model.amazon_selling_partner.stg_amazon_selling_partner__item_dimension": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_dimension_base"], "model.amazon_selling_partner.stg_amazon_selling_partner__orders": ["model.amazon_selling_partner.stg_amazon_selling_partner__orders_base"], "model.amazon_selling_partner.stg_amazon_selling_partner__item_relationship": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_relationship_base"], "model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_summary": ["model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_summary_base"], "model.amazon_selling_partner.stg_amazon_selling_partner__item_classification_sales_rank": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_classification_sales_rank_base"], "model.amazon_selling_partner.stg_amazon_selling_partner__item_display_group_sales_rank": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_display_group_sales_rank_base"], "model.amazon_selling_partner.stg_amazon_selling_partner__order_item_promotion_id": ["model.amazon_selling_partner.stg_amazon_selling_partner__order_item_promotion_id_base"], "model.amazon_selling_partner.stg_amazon_selling_partner__item_summary": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_summary_base"], "model.amazon_selling_partner.stg_amazon_selling_partner__item_identifier": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_identifier_base"], "model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_summary_base": ["source.amazon_selling_partner.amazon_selling_partner.fba_inventory_summary"], "model.amazon_selling_partner.stg_amazon_selling_partner__item_display_group_sales_rank_base": ["source.amazon_selling_partner.amazon_selling_partner.item_display_group_sales_rank"], "model.amazon_selling_partner.stg_amazon_selling_partner__item_dimension_base": ["source.amazon_selling_partner.amazon_selling_partner.item_dimension"], "model.amazon_selling_partner.stg_amazon_selling_partner__payment_method_detail_item_base": ["source.amazon_selling_partner.amazon_selling_partner.payment_method_detail_item"], "model.amazon_selling_partner.stg_amazon_selling_partner__item_product_type_base": ["source.amazon_selling_partner.amazon_selling_partner.item_product_type"], "model.amazon_selling_partner.stg_amazon_selling_partner__orders_base": ["source.amazon_selling_partner.amazon_selling_partner.orders"], "model.amazon_selling_partner.stg_amazon_selling_partner__item_summary_base": ["source.amazon_selling_partner.amazon_selling_partner.item_summary"], "model.amazon_selling_partner.stg_amazon_selling_partner__order_item_promotion_id_base": ["source.amazon_selling_partner.amazon_selling_partner.order_item_promotion_id"], "model.amazon_selling_partner.stg_amazon_selling_partner__order_item_base": ["source.amazon_selling_partner.amazon_selling_partner.order_item"], "model.amazon_selling_partner.stg_amazon_selling_partner__item_identifier_base": ["source.amazon_selling_partner.amazon_selling_partner.item_identifier"], "model.amazon_selling_partner.stg_amazon_selling_partner__item_classification_sales_rank_base": ["source.amazon_selling_partner.amazon_selling_partner.item_classification_sales_rank"], "model.amazon_selling_partner.stg_amazon_selling_partner__item_relationship_base": ["source.amazon_selling_partner.amazon_selling_partner.item_relationship"], "model.amazon_selling_partner.stg_amazon_selling_partner__item_image_base": ["source.amazon_selling_partner.amazon_selling_partner.item_image"], "model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_researching_base": ["source.amazon_selling_partner.amazon_selling_partner.fba_inventory_researching_quantity_entry"], "model.amazon_selling_partner.int_amazon_selling_partner__item": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_classification_sales_rank", "model.amazon_selling_partner.stg_amazon_selling_partner__item_dimension", "model.amazon_selling_partner.stg_amazon_selling_partner__item_display_group_sales_rank", "model.amazon_selling_partner.stg_amazon_selling_partner__item_identifier", "model.amazon_selling_partner.stg_amazon_selling_partner__item_image", "model.amazon_selling_partner.stg_amazon_selling_partner__item_product_type", "model.amazon_selling_partner.stg_amazon_selling_partner__item_relationship", "model.amazon_selling_partner.stg_amazon_selling_partner__item_summary"], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_amazon_selling_partner__orders_source_relation__amazon_order_id.eadaa050f9": ["model.amazon_selling_partner.amazon_selling_partner__orders"], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_amazon_selling_partner__order_items_source_relation__amazon_order_id__order_item_id.e2e3803230": ["model.amazon_selling_partner.amazon_selling_partner__order_items"], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_amazon_selling_partner__item_inventory_source_relation__asin__marketplace_id.862270d9c2": ["model.amazon_selling_partner.amazon_selling_partner__item_inventory"], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__orders_source_relation__amazon_order_id.220aebdd30": ["model.amazon_selling_partner.stg_amazon_selling_partner__orders"], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__order_item_source_relation__amazon_order_id__order_item_id.14745b83f3": ["model.amazon_selling_partner.stg_amazon_selling_partner__order_item"], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__order_item_promotion_id_source_relation__amazon_order_id__promotion_id__order_item_id.045cc9551d": ["model.amazon_selling_partner.stg_amazon_selling_partner__order_item_promotion_id"], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__payment_method_detail_item_source_relation__amazon_order_id__method.0517594b48": ["model.amazon_selling_partner.stg_amazon_selling_partner__payment_method_detail_item"], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_product_type_source_relation__asin__marketplace_id.e7ae21c2ed": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_product_type"], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_dimension_source_relation__asin__marketplace_id.0905407d73": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_dimension"], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_image_source_relation__asin__marketplace_id__variant.f20b0b4dfa": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_image"], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_summary_source_relation__asin__marketplace_id.e7e483fbaf": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_summary"], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_display_group_sales_rank_source_relation__asin__website_display_group.8aecef26ca": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_display_group_sales_rank"], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_classification_sales_rank_source_relation__asin__classification_id.70fa6e66ad": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_classification_sales_rank"], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_identifier_source_relation__asin__identifier_type__marketplace_id.e87c2a56ab": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_identifier"], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_relationship_source_relation__parent_asin__child_asin__type.d10658b039": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_relationship"], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__fba_inventory_summary_source_relation__inventory_summary_id.a8081f6e59": ["model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_summary"], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__fba_inventory_researching_source_relation__inventory_summary_id__name.d9a6bcd780": ["model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_researching"], "source.amazon_selling_partner.amazon_selling_partner.orders": [], "source.amazon_selling_partner.amazon_selling_partner.order_item": [], "source.amazon_selling_partner.amazon_selling_partner.order_item_promotion_id": [], "source.amazon_selling_partner.amazon_selling_partner.payment_method_detail_item": [], "source.amazon_selling_partner.amazon_selling_partner.item_product_type": [], "source.amazon_selling_partner.amazon_selling_partner.item_dimension": [], "source.amazon_selling_partner.amazon_selling_partner.item_image": [], "source.amazon_selling_partner.amazon_selling_partner.item_summary": [], "source.amazon_selling_partner.amazon_selling_partner.item_display_group_sales_rank": [], "source.amazon_selling_partner.amazon_selling_partner.item_classification_sales_rank": [], "source.amazon_selling_partner.amazon_selling_partner.item_identifier": [], "source.amazon_selling_partner.amazon_selling_partner.item_relationship": [], "source.amazon_selling_partner.amazon_selling_partner.fba_inventory_summary": [], "source.amazon_selling_partner.amazon_selling_partner.fba_inventory_researching_quantity_entry": []}, "child_map": {"seed.amazon_selling_partner_integration_tests.orders": [], "seed.amazon_selling_partner_integration_tests.order_item_promotion_id": [], "seed.amazon_selling_partner_integration_tests.item_relationship": [], "seed.amazon_selling_partner_integration_tests.financial_service_fee_event": [], "seed.amazon_selling_partner_integration_tests.financial_fee_component": [], "seed.amazon_selling_partner_integration_tests.vendor_retail_procurement_order_item": [], "seed.amazon_selling_partner_integration_tests.item_dimension": [], "seed.amazon_selling_partner_integration_tests.item_classification_sales_rank": [], "seed.amazon_selling_partner_integration_tests.vendor_retail_procurement_order_item_status": [], "seed.amazon_selling_partner_integration_tests.item_product_type": [], "seed.amazon_selling_partner_integration_tests.item_summary": [], "seed.amazon_selling_partner_integration_tests.payment_method_detail_item": [], "seed.amazon_selling_partner_integration_tests.item_variation_theme": [], "seed.amazon_selling_partner_integration_tests.item_display_group_sales_rank": [], "seed.amazon_selling_partner_integration_tests.item_identifier": [], "seed.amazon_selling_partner_integration_tests.item_image": [], "seed.amazon_selling_partner_integration_tests.fba_inventory_summary": [], "seed.amazon_selling_partner_integration_tests.catalog": [], "seed.amazon_selling_partner_integration_tests.financial_charge_component": [], "seed.amazon_selling_partner_integration_tests.fba_inventory_researching_quantity_entry": [], "seed.amazon_selling_partner_integration_tests.vendor_retail_procurement_order_status": [], "seed.amazon_selling_partner_integration_tests.order_item": [], "seed.amazon_selling_partner_integration_tests.vendor_retail_procurement_order": [], "model.amazon_selling_partner.amazon_selling_partner__order_items": ["test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_amazon_selling_partner__order_items_source_relation__amazon_order_id__order_item_id.e2e3803230"], "model.amazon_selling_partner.amazon_selling_partner__item_inventory": ["test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_amazon_selling_partner__item_inventory_source_relation__asin__marketplace_id.862270d9c2"], "model.amazon_selling_partner.amazon_selling_partner__orders": ["test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_amazon_selling_partner__orders_source_relation__amazon_order_id.eadaa050f9"], "model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_researching": ["model.amazon_selling_partner.amazon_selling_partner__item_inventory", "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__fba_inventory_researching_source_relation__inventory_summary_id__name.d9a6bcd780"], "model.amazon_selling_partner.stg_amazon_selling_partner__item_image": ["model.amazon_selling_partner.int_amazon_selling_partner__item", "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_image_source_relation__asin__marketplace_id__variant.f20b0b4dfa"], "model.amazon_selling_partner.stg_amazon_selling_partner__payment_method_detail_item": ["model.amazon_selling_partner.amazon_selling_partner__orders", "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__payment_method_detail_item_source_relation__amazon_order_id__method.0517594b48"], "model.amazon_selling_partner.stg_amazon_selling_partner__item_product_type": ["model.amazon_selling_partner.int_amazon_selling_partner__item", "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_product_type_source_relation__asin__marketplace_id.e7ae21c2ed"], "model.amazon_selling_partner.stg_amazon_selling_partner__order_item": ["model.amazon_selling_partner.amazon_selling_partner__order_items", "model.amazon_selling_partner.amazon_selling_partner__orders", "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__order_item_source_relation__amazon_order_id__order_item_id.14745b83f3"], "model.amazon_selling_partner.stg_amazon_selling_partner__item_dimension": ["model.amazon_selling_partner.int_amazon_selling_partner__item", "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_dimension_source_relation__asin__marketplace_id.0905407d73"], "model.amazon_selling_partner.stg_amazon_selling_partner__orders": ["model.amazon_selling_partner.amazon_selling_partner__order_items", "model.amazon_selling_partner.amazon_selling_partner__orders", "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__orders_source_relation__amazon_order_id.220aebdd30"], "model.amazon_selling_partner.stg_amazon_selling_partner__item_relationship": ["model.amazon_selling_partner.int_amazon_selling_partner__item", "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_relationship_source_relation__parent_asin__child_asin__type.d10658b039"], "model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_summary": ["model.amazon_selling_partner.amazon_selling_partner__item_inventory", "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__fba_inventory_summary_source_relation__inventory_summary_id.a8081f6e59"], "model.amazon_selling_partner.stg_amazon_selling_partner__item_classification_sales_rank": ["model.amazon_selling_partner.int_amazon_selling_partner__item", "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_classification_sales_rank_source_relation__asin__classification_id.70fa6e66ad"], "model.amazon_selling_partner.stg_amazon_selling_partner__item_display_group_sales_rank": ["model.amazon_selling_partner.int_amazon_selling_partner__item", "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_display_group_sales_rank_source_relation__asin__website_display_group.8aecef26ca"], "model.amazon_selling_partner.stg_amazon_selling_partner__order_item_promotion_id": ["model.amazon_selling_partner.amazon_selling_partner__order_items", "model.amazon_selling_partner.amazon_selling_partner__orders", "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__order_item_promotion_id_source_relation__amazon_order_id__promotion_id__order_item_id.045cc9551d"], "model.amazon_selling_partner.stg_amazon_selling_partner__item_summary": ["model.amazon_selling_partner.int_amazon_selling_partner__item", "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_summary_source_relation__asin__marketplace_id.e7e483fbaf"], "model.amazon_selling_partner.stg_amazon_selling_partner__item_identifier": ["model.amazon_selling_partner.int_amazon_selling_partner__item", "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_identifier_source_relation__asin__identifier_type__marketplace_id.e87c2a56ab"], "model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_summary_base": ["model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_summary"], "model.amazon_selling_partner.stg_amazon_selling_partner__item_display_group_sales_rank_base": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_display_group_sales_rank"], "model.amazon_selling_partner.stg_amazon_selling_partner__item_dimension_base": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_dimension"], "model.amazon_selling_partner.stg_amazon_selling_partner__payment_method_detail_item_base": ["model.amazon_selling_partner.stg_amazon_selling_partner__payment_method_detail_item"], "model.amazon_selling_partner.stg_amazon_selling_partner__item_product_type_base": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_product_type"], "model.amazon_selling_partner.stg_amazon_selling_partner__orders_base": ["model.amazon_selling_partner.stg_amazon_selling_partner__orders"], "model.amazon_selling_partner.stg_amazon_selling_partner__item_summary_base": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_summary"], "model.amazon_selling_partner.stg_amazon_selling_partner__order_item_promotion_id_base": ["model.amazon_selling_partner.stg_amazon_selling_partner__order_item_promotion_id"], "model.amazon_selling_partner.stg_amazon_selling_partner__order_item_base": ["model.amazon_selling_partner.stg_amazon_selling_partner__order_item"], "model.amazon_selling_partner.stg_amazon_selling_partner__item_identifier_base": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_identifier"], "model.amazon_selling_partner.stg_amazon_selling_partner__item_classification_sales_rank_base": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_classification_sales_rank"], "model.amazon_selling_partner.stg_amazon_selling_partner__item_relationship_base": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_relationship"], "model.amazon_selling_partner.stg_amazon_selling_partner__item_image_base": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_image"], "model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_researching_base": ["model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_researching"], "model.amazon_selling_partner.int_amazon_selling_partner__item": ["model.amazon_selling_partner.amazon_selling_partner__item_inventory", "model.amazon_selling_partner.amazon_selling_partner__order_items"], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_amazon_selling_partner__orders_source_relation__amazon_order_id.eadaa050f9": [], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_amazon_selling_partner__order_items_source_relation__amazon_order_id__order_item_id.e2e3803230": [], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_amazon_selling_partner__item_inventory_source_relation__asin__marketplace_id.862270d9c2": [], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__orders_source_relation__amazon_order_id.220aebdd30": [], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__order_item_source_relation__amazon_order_id__order_item_id.14745b83f3": [], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__order_item_promotion_id_source_relation__amazon_order_id__promotion_id__order_item_id.045cc9551d": [], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__payment_method_detail_item_source_relation__amazon_order_id__method.0517594b48": [], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_product_type_source_relation__asin__marketplace_id.e7ae21c2ed": [], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_dimension_source_relation__asin__marketplace_id.0905407d73": [], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_image_source_relation__asin__marketplace_id__variant.f20b0b4dfa": [], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_summary_source_relation__asin__marketplace_id.e7e483fbaf": [], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_display_group_sales_rank_source_relation__asin__website_display_group.8aecef26ca": [], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_classification_sales_rank_source_relation__asin__classification_id.70fa6e66ad": [], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_identifier_source_relation__asin__identifier_type__marketplace_id.e87c2a56ab": [], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__item_relationship_source_relation__parent_asin__child_asin__type.d10658b039": [], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__fba_inventory_summary_source_relation__inventory_summary_id.a8081f6e59": [], "test.amazon_selling_partner.dbt_utils_unique_combination_of_columns_stg_amazon_selling_partner__fba_inventory_researching_source_relation__inventory_summary_id__name.d9a6bcd780": [], "source.amazon_selling_partner.amazon_selling_partner.orders": ["model.amazon_selling_partner.stg_amazon_selling_partner__orders_base"], "source.amazon_selling_partner.amazon_selling_partner.order_item": ["model.amazon_selling_partner.stg_amazon_selling_partner__order_item_base"], "source.amazon_selling_partner.amazon_selling_partner.order_item_promotion_id": ["model.amazon_selling_partner.stg_amazon_selling_partner__order_item_promotion_id_base"], "source.amazon_selling_partner.amazon_selling_partner.payment_method_detail_item": ["model.amazon_selling_partner.stg_amazon_selling_partner__payment_method_detail_item_base"], "source.amazon_selling_partner.amazon_selling_partner.item_product_type": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_product_type_base"], "source.amazon_selling_partner.amazon_selling_partner.item_dimension": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_dimension_base"], "source.amazon_selling_partner.amazon_selling_partner.item_image": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_image_base"], "source.amazon_selling_partner.amazon_selling_partner.item_summary": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_summary_base"], "source.amazon_selling_partner.amazon_selling_partner.item_display_group_sales_rank": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_display_group_sales_rank_base"], "source.amazon_selling_partner.amazon_selling_partner.item_classification_sales_rank": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_classification_sales_rank_base"], "source.amazon_selling_partner.amazon_selling_partner.item_identifier": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_identifier_base"], "source.amazon_selling_partner.amazon_selling_partner.item_relationship": ["model.amazon_selling_partner.stg_amazon_selling_partner__item_relationship_base"], "source.amazon_selling_partner.amazon_selling_partner.fba_inventory_summary": ["model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_summary_base"], "source.amazon_selling_partner.amazon_selling_partner.fba_inventory_researching_quantity_entry": ["model.amazon_selling_partner.stg_amazon_selling_partner__fba_inventory_researching_base"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}